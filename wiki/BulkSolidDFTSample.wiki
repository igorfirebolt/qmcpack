#summary Builk solid calculations using DFT orbitals

||[Welcome home]||[TutorialsList Tutorial]||

= Introduction =
Solids can be simulated in periodic boundary conditions using orbitals from a
plane-wave DFT code such as ABINIT, PWscf (Quantum Espresso), or Qbox.  This
page explains the process of generating orbitals, converting them to QMCPACK's
HDF5 format, and setting up the input files.  As an example, we will use cubic
boron nitride, an analog of diamond in the zincblende structure.

= Tools for exercises =
 * *`wfconv`*
  * *`wfconv`* is a tool for converting orbitals in various plane-wave formats to the real-space 3D mesh format used by QMCPACK.  QMCPACK reads files stored in a platform-independent binary file format known as HDF5 (http://hdfgroup.org).
  * A 64-bit static linux binary can be downloaded at [http://cms.mcc.uiuc.edu/qmcpack/prebuilt/wfconv wfconv].
  * Contact Ken Esler (esler@uiuc.edu) if you would like the source code.
 * *`ppconvert`*
  * ppconvert is a tool for converting pseudopotentials between various formats.
  * A 64-bit static linux binary can be downloaded at [http://cms.mcc.uiuc.edu/qmcpack/prebuilt/ppconvert ppconvert].

After downloading these tools, do "chmod u+x wfconv ppconvert" to mark the files as executable.

= Convert the pseudopotentials =
Copy the following pseudopotential in GAMESS format into a file "B.BFD.gamess":
{{{
B-QMC GEN 2 1
3
3.00000000 1 5.40423964
16.21271892 3 5.71678458
-11.86640633 2 4.48974455
1
15.49737620 2 3.43781634
}}}

Likewise, the following into "N.BFD.gamess":
{{{
N-QMC GEN 2 1
3
5.00000000 1 9.23501007
46.17505034 3 7.66830008
-30.18893534 2 7.34486070
1
31.69720409 2 6.99536540
}}}

We will now convert the pseudopotentials into the FHI format used by ABINIT and
the FSatom XML format used by QMCPACK.  Put ''ppconvert'' into a directory in
your PATH.  The execute
{{{
ppconvert --gamess_pot B.BFD.gamess --s_ref "1s(2)2p(1)" --p_ref "1s(2)2p(1)" --fhi B.BFD.fhi --xml B.BFD.fsatom.xml
ppconvert --gamess_pot N.BFD.gamess --s_ref "1s(2)2p(3)" --p_ref "1s(2)2p(3)" --fhi N.BFD.fhi --xml N.BFD.fsatom.xml
}}}

 * The first argument given is the input pseudopotential file.  
 * The second and third arguments give the reference state for forming Kleinmann-Bylander projectors.
  * Note this state specifies the reference for the valence electrons only, e.g. the neutral state for the valence electrons in a boron atom.
  * The last two arguments specify output file formats.

= Generating orbitals with ABINIT =
ABINIT (http://www.abinit.org) is a general-purpose plane-wave DFT code which
supports pseudopotential and PAW calculations.  It is well-documented,
full-featured, and has a vibrant community support forum.

We will begin with a primitive cell of c-BN.  Copy the following into cBNprim.in:
{{{
# Cubic Boron Nitride : primitive cell orbitals
#
# Definition of the unit cell
# BN lattice constant near experimental volume
acell  3*6.839904

# FCC lattice vectors
rprim 0.5 0.5 0.0
      0.0 0.5 0.5
      0.5 0.0 0.5

# Definition of the atom types
ntypat 2          # There is only one type of atom
znucl 5 7         # The keyword "znucl" refers to the atomic number of the 
                  # possible type(s) of atom. The pseudopotential(s) 
                  # mentioned in the "files" file must correspond
                  # to the type(s) of atom. Here, the only type is Silicon.
                         

# Definition of the atoms
natom 2           # There are two atoms
                  # They both of type boron and nitrogen
typat 1 2

xred
   0.0000  0.0000  0.0000  # B1
   0.2500  0.2500  0.2500  # N1

# Definition of the planewave basis set
ecut  200.0         # Maximal kinetic energy cut-off, in Hartree

# Allow non-primitive unit cell
chkprim 0


#Definition of the k-point grid
##################################
# USE THESE FOR CASINO OUTPUT!!! #
##################################
kptopt 0          # Manual k-points
nkpt 1
istwfk 1
wtk 1

kpt
    0.000 0.000 0.000

prtwf 1

# Definition of the SCF procedure
nstep 100          # Maximal number of SCF cycles
toldfe 1.0d-12     # Will stop when, twice in a row, the difference 
                   # between two consecutive evaluations of total energy 
                   # differ by less than toldfe (in Hartree) 
diemac 2.0         # Although this is not mandatory, it is worth to
                   # precondition the SCF cycle. The model dielectric
                   # function used as the standard preconditioner
                   # is described in the "dielng" input variable section.
                   # Here, we follow the prescription for bulk silicon.

# ixc 23           # Wu-Cohen
ixc 7             # LDA
}}}
Copy the following into cBNprim.files:
{{{
cBNprim.in
cBNprim.out
cBNprim.xi
cBNprim.xo
cBNprim_
B.BFD.fhi
N.BFD.fhi
}}}
Now, run
{{{
abinis < cBNprim.files
}}}


=== Converting the orbitals ===
With *`wfconv`* in your PATH, run
{{{
wfconv --eshdf cBNprim.h5 cBNprim.xo_WFK
}}}
This will generated an orbital file in the ESHDF format that QMCPACK reads.

'''N.B.''' The GPU version of QMCPACK uses an older format for the orbital file. 
To generate orbitals for the GPU code, do instead
{{{
wfconv --spline --qmcPACK cBNprim.h5 cBNprim.xo_WFK
}}}
The newer CPU code also can read this format, but we are trying to deprecate it.  We intend to remerge the GPU and CPU versions in the near future.

== Running QMCPACK ==
Copy the following to "cBNprim.qmc.xml"
{{{
<?xml version="1.0"?>
<simulation>
  <project id="BN2_prim" series="0">
    <application name="qmcapp" role="molecu" class="serial" version="0.2">
    </application>
  </project>
  <random seed="13"/>
  <qmcsystem dim="3">
    <simulationcell>
      <parameter name="scale"> 6.839904 </parameter>
      <parameter name="lattice">
	0.5 0.5 0.0
	0.0 0.5 0.5
	0.5 0.0 0.5
      </parameter>
      <parameter name="bconds">p p p</parameter>
      <parameter name="LR_dim_cutoff">20.0</parameter>
    </simulationcell>
    <particleset name="e" random="yes">
      <group name="u" size="4">
	<parameter name="charge">-1</parameter>
      </group>
      <group name="d" size="4">
	<parameter name="charge">-1</parameter>
      </group>
    </particleset>
    <particleset name="i" size="2">
      <group name="B">
	<parameter name="charge">3</parameter>
	<parameter name="valence">3</parameter>
	<parameter name="atomicnumber">5</parameter>
      </group>
      <group name="N">
	<parameter name="charge">5</parameter>
	<parameter name="valence">5</parameter>
	<parameter name="atomicnumber">7</parameter>
      </group>
      <attrib name="position" datatype="posArray" condition="1">
	0.000 0.000 0.000
	0.250 0.250 0.250
      </attrib>
      <attrib name="ionid" datatype="stringArray">
	B N 
      </attrib> 
    </particleset>
    <wavefunction name="psi0" target="e">
      <jastrow name="J1" type="One-Body" function="Bspline" print="yes" source="i">
	<correlation elementType="B" cusp="0.0" size="2">
	  <coefficients id="b" type="Array"> 
	    0 0
	  </coefficients>
	</correlation>
	<correlation elementType="N" cusp="0.0" size="6">
	  <coefficients id="n" type="Array"> 
	    0 0 
	  </coefficients>
	</correlation>
      </jastrow> 
      
      <jastrow name="J2" type="Two-Body" function="Bspline" print="yes">
	<correlation pairType="uu" speciesA="u" speciesB="u" size="2">
	  <coefficients id="uu" type="Array"> 
	    0 0 
	  </coefficients>
	</correlation>
	<correlation pairType="ud" speciesA="u" speciesB="d" size="2">
	  <coefficients id="ud" type="Array"> 
	    0 0
	  </coefficients>
	</correlation>
      </jastrow> 
      
      <determinantset type="einspline" href="cBNprim.h5" sort="1">
	<basisset/>
	<slaterdeterminant>
          <determinant id="updet" size="4">    
            <occupation mode="ground" spindataset="0">
            </occupation>  
          </determinant>
          <determinant id="downdet" size="4">
            <occupation mode="ground" spindataset="0">
            </occupation>
          </determinant>
	</slaterdeterminant>
      </determinantset>
    </wavefunction>
    
    
    <hamiltonian name="h0" type="generic" target="e">
      <pairpot name="ElecElec" type="coulomb" source="e" target="e"/>
      <pairpot type="pseudo" name="PPot" source="i" wavefunction="psi0" 
	       format="xml">
	<pseudo elementType="B" href="B.BFD.fsatom.xml" format="xml"/>
	<pseudo elementType="N" href="N.BFD.fsatom.xml" format="xml"/>
      </pairpot>
      <constant name="IonIon" type="coulomb" source="i" target="i"/>
    </hamiltonian>
  </qmcsystem>
  
  <!-- Optimize -->
  <loop max="2">
    <qmc method="optimize" move="pbyp">
      <parameter name="blocks">  1000 </parameter>
      <parameter name="steps">     10 </parameter>
      <parameter name="timestep"> 0.7 </parameter>
      <parameter name="walkers">    8 </parameter>
      <parameter name="samples"> 1000 </parameter>
      <cost name="energy"> 0.0 </cost>
      <cost name="variance"> 1.0 </cost>
      <cost name="difference"> 0.0 </cost>
      <parameter name="minWalkers"> 0.4 </parameter>
      <parameter name="useWeight"> no </parameter>
      <optimizer method="cg">
	<parameter name="max_steps">   15 </parameter>
	<parameter name="tolerance"> 1e-6 </parameter>
	<parameter name="stepsize">  0.02 </parameter>
	<parameter name="friction">     5 </parameter>
	<parameter name="epsilon">    0.0 </parameter>
      </optimizer>
      <parameter name="power"> 2 </parameter>
      <parameter name="correlation"> 0.01 </parameter>
    </qmc> 
  </loop> 
  
  <!-- WARMUP -->
  <qmc method="vmc" move="pbyp">
    <estimator name="LocalEnergy"/>
    <parameter name="walkers">       8 </parameter>
    <parameter name="warmupSteps"> 100 </parameter>
    <parameter name="blocks">      160 </parameter>
    <parameter name="steps">        10 </parameter>
    <parameter name="samples">    1280 </parameter>
    <parameter name="timestep">    0.5 </parameter>
  </qmc>

  <qmc method="dmc" move="pbyp">
    <parameter name="blocks">       20000 </parameter>
    <parameter name="steps">           10 </parameter>
    <parameter name="timestep">      0.01 </parameter>
    <parameter name="nonlocalmoves">  yes </parameter>
    <parameter name="warmupSteps">    500 </parameter>
  </qmc>

</simulation>
}}}

== Analyzing the results ==
Several output files are written in the present directory.  Those ending in ".scalar.dat" list the energies per block for each of the stages of the calculation
 # Optimization cycle 1
 # Optimization cycle 2
 # VMC stage, generating initial population for DMC
 # DMC simulation

In QMCPACK's "utils" directory are several python scripts for computing statistics.
Add the "utils" directory to your PATH and run
{{{
Energy.py BN2_prim.s000.scalar.dat
}}}
This gives the variational energy of about -11.9550 +/- 0.0063 for the first stage, before any optimization is done.
Now try,
{{{
Energy.py BN2_prim.s002.scalar.dat
}}}
The energy has decreased to -12.1394 +/- 0.0091, and you see that the optimization has reduced the energy.

Finally, run
{{{ Energy.py BN2_prim.s003.scalar.dat }}}
DMC projection has caused the energy has dropped about another 50 mHa to -12.18501 +/- 0.00057 Hartrees.

== Running on QMCPACK-GPU ==
For users of the GPU version of the code, a few modifications are necessary:
* The GPU code cannot currently do optimization.  Optimize with the CPU version and copy the optimized wavefunction from the last ".opt.xml" files into the input file.
* The attribute gpu="yes" must be added to the determinantset, vmc, and dmc sections.
* The GPU code is designed to run all walkers in parallel and at least 128 to 256 walkers be GPU are needed to get good efficiency.

Below is the same example, run on the GPU version of the code:
{{{
<?xml version="1.0"?>
<simulation>
  <project id="BN2_prim_gpu_dmc" series="0">
    <application name="qmcapp" role="molecu" class="serial" version="0.2">
    </application>
  </project>
  <random seed="13"/>
  <qmcsystem dim="3">
    <simulationcell>
      <parameter name="scale"> 6.839904 </parameter>
      <parameter name="lattice">
	0.5 0.0 0.5
	0.5 0.5 0.0
	0.0 0.5 0.5
      </parameter>
      <parameter name="bconds">p p p</parameter>
      <parameter name="LR_dim_cutoff">20.0</parameter>
    </simulationcell>
    <particleset name="e" random="yes">
      <group name="u" size="4">
	<parameter name="charge">-1</parameter>
      </group>
      <group name="d" size="4">
	<parameter name="charge">-1</parameter>
      </group>
    </particleset>
    <particleset name="i" size="2">
      <group name="B">
	<parameter name="charge">3</parameter>
	<parameter name="valence">3</parameter>
	<parameter name="atomicnumber">5</parameter>
      </group>
      <group name="N">
	<parameter name="charge">5</parameter>
	<parameter name="valence">5</parameter>
	<parameter name="atomicnumber">7</parameter>
      </group>
      <attrib name="position" datatype="posArray" condition="1">
	0.000 0.000 0.000
	0.250 0.250 0.250
      </attrib>
      <attrib name="ionid" datatype="stringArray">
	B N 
      </attrib> 
    </particleset>
    <wavefunction name="psi0" target="e">
      <jastrow name="J1" type="One-Body" function="Bspline" print="yes" source="i">
        <correlation elementType="B" cusp="0.0" size="2" rcut="2.4">
          <coefficients id="b" type="Array"> 0.0449009 0.0553</coefficients>
        </correlation>
        <correlation elementType="N" cusp="0.0" size="2" rcut="2.4">
          <coefficients id="n" type="Array"> -0.2496 -0.158904</coefficients>
        </correlation>
      </jastrow> 
      
      <jastrow name="J2" type="Two-Body" function="Bspline" print="yes">
        <correlation pairType="uu" speciesA="u" speciesB="u" size="2" rcut="2.4">
          <coefficients id="uu" type="Array"> 0.207831 0.0720175</coefficients>
        </correlation>
        <correlation pairType="ud" speciesA="u" speciesB="d" size="2" rcut="2.4">
          <coefficients id="ud" type="Array"> 0.313222 0.0983</coefficients>
        </correlation>
      </jastrow> 

      <determinantset type="einspline" href="cBNprim.h5" sort="1" gpu="yes">
	<basisset/>
	<slaterdeterminant>
          <determinant id="updet" size="4">    
            <occupation mode="ground" spindataset="0">
            </occupation>  
          </determinant>
          <determinant id="downdet" size="4">
            <occupation mode="ground" spindataset="0">
            </occupation>
          </determinant>
	</slaterdeterminant>
      </determinantset> 
    </wavefunction>
        
    <hamiltonian name="h0" type="generic" target="e">
      <pairpot name="ElecElec" type="coulomb" source="e" target="e"/>
      <pairpot type="pseudo" name="PPot" source="i" wavefunction="psi0" 
	       format="xml">
	<pseudo elementType="B" href="B.BFD.fsatom.xml" format="xml"/>
	<pseudo elementType="N" href="N.BFD.fsatom.xml" format="xml"/>
      </pairpot>
      <constant name="IonIon" type="coulomb" source="i" target="i"/>
    </hamiltonian>
  </qmcsystem>
    
  <!-- WARMUP -->
  <qmc method="vmc" move="pbyp" gpu="yes">
    <estimator name="LocalEnergy"/>
    <parameter name="walkers">    1280 </parameter>
    <parameter name="warmupSteps">  10 </parameter>
    <parameter name="blocks">       10 </parameter>
    <parameter name="steps">        10 </parameter>
    <parameter name="samples">    1280 </parameter>
    <parameter name="timestep">    0.5 </parameter>
    <parameter name="usedrift">    yes </parameter>
  </qmc>

  <qmc method="dmc" move="pbyp" gpu="yes">
    <parameter name="walkers">       1280 </parameter>
    <parameter name="blocks">       20000 </parameter>
    <parameter name="steps">           10 </parameter>
    <parameter name="timestep">      0.01 </parameter>
    <parameter name="nonlocalmoves">  yes </parameter>
    <parameter name="warmupSteps">    500 </parameter>
  </qmc>

</simulation>
}}}

== Scaling to larger systems ==
Larger crystal supercells require small changes to the input.  First, we need to run ABINIT with more k-points.  Then we will need to update the sizes and dimensions in the QMCPACK input.

=== 16-atom 2x2x2 supercell ===


=== 64-atom cubic supercell ===

