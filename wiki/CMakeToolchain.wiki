#summary How to prepare a Toolchain file

||[Welcome Home]||[CMakeExplained cmake howto]||

<wiki:toc max_depth="1" />

One can prepare  a toolchain file, which is especially useful  on large
clusters with changing environments. The toolchains in `topdir/config` are
used by the developers on the NSF and DOE sites. Use them as a starting
point and customize them for your system.

In your build directory
{{{
cp ../config/AbeMvapich2.cmake yourtoolchain.cmake
.... modify yourtoolchain.cmake ....
cmake -DCMAKE_TOOLCHAIN_FILE=yourtoolchain.cmake ..
cmake -DCMAKE_TOOLCHAIN_FILE=yourtoolchain.cmake ..
make
}}}

= What is in a toolchain file  =
== Compilers and compiler options ==
Related cmake variables
|| `CMAKE_CXX_COMPILER`|| c++ compiler, linker ||
|| `CMAKE_C_COMPILER`|| c compiler ||
|| `CMAKE_CXX_FLAGS`|| flags for c++ ||
|| `CMAKE_C_FLAGS`|| flags for c ||

An example using GNU compilers:
{{{
set(CMAKE_CXX_COMPILER g++)
set(CMAKE_C_COMPILER  gcc)
set(GNU_FLAGS "-g -fopenmp -O3 -ftemplate-depth-60 -Drestrict=__restrict__ -finline-limit=1000 -fstrict-aliasing -funroll-all-loops -Wno-deprecated -fomit-frame-pointer ")
set(CMAKE_CXX_FLAGS "${GNU_FLAGS} -ftemplate-depth-60")
set(CMAKE_C_FLAGS "${GNU_FLAGS} -std=gnu99 ")
}}}

== Paths for external libraries ==
Add the paths to `CMAKE_FIND_ROOT_PATH`
{{{
set(CMAKE_FIND_ROOT_PATH
    XYZ_HOME
    ....
)
}}}

This enables `CMake/FindXYZ.cmake` to search 
 * `XYZ_HOME/include` for the header files
 * `XYZ_HOME/lib` for the library files
Some libraries will link more than one library file.

== Set build properties ==
Important cmake variables are
|| *Variables* || *type* || *valid option* ||
|| `ENABLE_OPENMP`  || bool || 1/0 ||
|| `HAVE_MPI` || bool || 1/0 ||

For GNU and INTEL compilers, add the definitions
{{{
ADD_DEFINITIONS(-DADD_ -DINLINE_ALL=inline)
}}}
to use BLAS.  

For some compilers, setting `-DINLINE_ALL= `  is helpful to speed up
compliations.


= Special notes for cross-compilers =

= Clusters using GNU compilers =
 * [JaguarGNU JaguarGNU.cmake]
 * [KrakenGNU KrakenGNU.cmake]

= Clusters using INTEL compilers =
 * [LinuxIntelCMake LinuxIntel.cmake]
 * [AbeMvapich2 AbeMvapich2.cmake]
