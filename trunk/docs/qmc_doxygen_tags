<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>QMCPACK main page</title>
    <filename>index</filename>
    <docanchor file="index">Major</docanchor>
    <docanchor file="index">intro_sec</docanchor>
    <docanchor file="/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/docs/ohmms-config.h">license</docanchor>
  </compound>
  <compound kind="file">
    <name>AGPDeterminant.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>AGPDeterminant_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AGPDeterminant.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>AGPDeterminant_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::AGPDeterminant</class>
  </compound>
  <compound kind="file">
    <name>AGPDeterminantBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>AGPDeterminantBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AGPDeterminantBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>AGPDeterminantBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::AGPDeterminantBuilder</class>
  </compound>
  <compound kind="file">
    <name>Any2GridBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>Any2GridBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Any2GridBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>Any2GridBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::Any2GridBuilder</class>
  </compound>
  <compound kind="file">
    <name>Any2Slater.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>Any2Slater_8h</filename>
    <class kind="class">Any2Slater</class>
  </compound>
  <compound kind="file">
    <name>AnyConstraints.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>AnyConstraints_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>AnyConstraints.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>AnyConstraints_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::AnyConstraints</class>
    <class kind="struct">qmcplusplus::AnyConstraints::BasisGroupType</class>
  </compound>
  <compound kind="file">
    <name>Assign.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>Assign_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Assign_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsymmetricDistanceTableData.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>AsymmetricDistanceTableData_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::AsymmetricDTD</class>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_ASYMMETROCDISTANCETABLEDATAIMPL_H</name>
      <anchorfile>AsymmetricDistanceTableData_8h.html</anchorfile>
      <anchor>50d7a97b17d19f4fd559fe78015603d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AtomicBasisBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>AtomicBasisBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::AtomicBasisBuilder</class>
  </compound>
  <compound kind="file">
    <name>AttributeSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>AttributeSet_8h</filename>
    <class kind="struct">OhmmsAttributeSet</class>
  </compound>
  <compound kind="file">
    <name>BareKineticEnergy.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>BareKineticEnergy_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::BareKineticEnergy</class>
  </compound>
  <compound kind="file">
    <name>BasisSetBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>BasisSetBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BasisSetBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>BasisSetBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::BasisSetBase</class>
    <class kind="struct">qmcplusplus::BasisSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>BasisSetFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>BasisSetFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>BasisSetFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>BasisSetFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::BasisSetFactory</class>
  </compound>
  <compound kind="file">
    <name>Blasf.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>Blasf_8h</filename>
    <member kind="function">
      <type>double</type>
      <name>ddot</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>6e29cbf70013944be3b7c3e8f3f1c13d</anchor>
      <arglist>(const int &amp;n, const double *dx, const int &amp;incx, const double *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sdot</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>7a79b424f08bc4c2c4862650cc8b0871</anchor>
      <arglist>(const int &amp;n, const float *dx, const int &amp;incx, const float *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>zdot</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>784a66631da756f50f5084b32c2f0a02</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx, const complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>zdotu</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>30f73a50c18b55302d586e249042b4ef</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx, const complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>daxpy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>4ff3541dace982de1fc437ea1da08eac</anchor>
      <arglist>(const int &amp;n, const double &amp;da, const double *dx, const int &amp;incx, double *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saxpy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>9b70d56b2382dbb83a49351044a5b3e1</anchor>
      <arglist>(const int &amp;n, const float &amp;da, const float *dx, const int &amp;incx, float *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zaxpy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>1e50eedd53b01d92da18981d534baa02</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; &amp;da, const complex&lt; double &gt; *dx, const int &amp;incx, complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnrm2</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>acd0ca2670164a46124f91756e1d9921</anchor>
      <arglist>(const int &amp;n, const double *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>snrm2</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>fa24886594ec19e7e25ffbf1fc2dda35</anchor>
      <arglist>(const int &amp;n, const float *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dznrm2</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>379c7e06a6b24fb00ebf8f284af4a54c</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dscal</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>b347a0b32e2cc95773e96282dbddaa20</anchor>
      <arglist>(const int &amp;n, const double &amp;, double *x, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>8af0c54eea17274cff093406dd987aa1</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const double &amp;alpha, const double &amp;a, const int &amp;lda, const double *x, const int &amp;incx, const double &amp;beta, double *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ssymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>c966ebeb490f536b9dfc2934e80038f9</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const float &amp;alpha, const float &amp;a, const int &amp;lda, const float *x, const int &amp;incx, const float &amp;beta, float *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zsymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>de2aba8b4faaaf1a7eb43d316b4b5d38</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const complex&lt; double &gt; &amp;alpha, complex&lt; double &gt; *a, const int &amp;lda, complex&lt; double &gt; *x, const int &amp;incx, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>csymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>529fc7055f9d1e44a0621b071351ddc9</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const complex&lt; float &gt; &amp;alpha, complex&lt; float &gt; *a, const int &amp;lda, complex&lt; float &gt; *x, const int &amp;incx, const complex&lt; float &gt; &amp;beta, complex&lt; float &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zcopy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>020395ba1736ff0f69d374f837c5d591</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *x, const int &amp;incx, complex&lt; double &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcopy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>faaf7ff46845b3d6410c76b5c74b09ef</anchor>
      <arglist>(const int &amp;n, const double *, const int &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsyr2k</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>6c544ebc3076157e810d7b1214e6f038</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsymm</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>278577994ffc9c63edba607748d3deb3</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *A, const int &amp;lda, const double *B, const int &amp;ldb, const double &amp;beta, double *C, const int &amp;ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgemm</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>22e5a6efa0876f92f1a8e9841c644228</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgemm</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>be38e65696419bc871981a0b1a7a9e03</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const int &amp;, const complex&lt; double &gt; &amp;, const complex&lt; double &gt; *, const int &amp;, const complex&lt; double &gt; *, const int &amp;, const complex&lt; double &gt; &amp;, complex&lt; double &gt; *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgemv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>9c1e2b2c04e541680a79e5a3b439e2c9</anchor>
      <arglist>(const char &amp;trans, const int &amp;nr, const int &amp;nc, const double &amp;alpha, const double *amat, const int &amp;lda, const double *bv, const int &amp;incx, const double &amp;beta, double *cv, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgemv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>018fad23a0c2246e44580afef14951f3</anchor>
      <arglist>(const char &amp;trans, const int &amp;nr, const int &amp;nc, const complex&lt; double &gt; &amp;alpha, const complex&lt; double &gt; *amat, const int &amp;lda, const complex&lt; double &gt; *bv, const int &amp;incx, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; *cv, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsyrk</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>8783c5794d7d99ce564795172b11ec64</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgetrf</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>7b378f728e9e73d7414d799a518bedbb</anchor>
      <arglist>(const int &amp;n, const int &amp;m, double *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgetrf</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>1a3fb9e4dca7d756a85417156303fe40</anchor>
      <arglist>(const int &amp;n, const int &amp;m, complex&lt; double &gt; *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgetri</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>23e0f422451ec3596419b781d34ba021</anchor>
      <arglist>(const int &amp;n, double *a, const int &amp;n0, int *piv, double *work, const int &amp;, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgetri</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>259cca4ac57aa1a893cd4209a1794c45</anchor>
      <arglist>(const int &amp;n, complex&lt; double &gt; *a, const int &amp;n0, int *piv, complex&lt; double &gt; *work, const int &amp;, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgesvd</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>79a9db0b758b5eca0def043568f0df4a</anchor>
      <arglist>(char *JOBU, char *JOBVT, int *M, int *N, double *A, int *LDA, double *S, double *U, int *LDU, double *VT, int *LDVT, double *work, int *LWORK, int *INFO)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BMakeFunc.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>BMakeFunc_8cpp</filename>
    <class kind="struct">BMakeFunc</class>
    <class kind="struct">BMakeFunc&lt; 34 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 10 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 12 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 20 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 22 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 30 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 100 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 103 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 127 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 147 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 200 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 300 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 400 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 3000 &gt;</class>
    <class kind="struct">BMakeFunc&lt; 3100 &gt;</class>
    <member kind="function">
      <type>BMakeFuncBase *</type>
      <name>createBMakeFunc</name>
      <anchorfile>BMakeFunc_8cpp.html</anchorfile>
      <anchor>3c29413f724f2cddab617cc6dca54259</anchor>
      <arglist>(int iflag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BMakeFunc.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>BMakeFunc_8h</filename>
    <class kind="struct">BMakeFuncBase</class>
    <member kind="function">
      <type>BMakeFuncBase *</type>
      <name>createBMakeFunc</name>
      <anchorfile>BMakeFunc_8h.html</anchorfile>
      <anchor>3c29413f724f2cddab617cc6dca54259</anchor>
      <arglist>(int iflag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostRandom.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>BoostRandom_8h</filename>
    <class kind="class">BoostRandom</class>
  </compound>
  <compound kind="file">
    <name>BParser.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>BParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>BParser.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>BParser_8h</filename>
    <class kind="struct">AGPLambda</class>
    <class kind="class">BParser</class>
  </compound>
  <compound kind="file">
    <name>BsplineOneDimSolvers.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>BsplineOneDimSolvers_8h</filename>
    <class kind="struct">SolvePeriodicInterp1D</class>
    <class kind="struct">SolvePeriodicInterp1D&lt; double &gt;</class>
    <class kind="struct">SolvePeriodicInterp1D&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">SolveFirstDerivInterp1D</class>
    <class kind="struct">SolveFirstDerivInterp1D&lt; double &gt;</class>
    <class kind="struct">SolveFirstDerivInterp1D&lt; std::complex&lt; double &gt; &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>FuncSolvePeriodicInterp1D</name>
      <anchorfile>BsplineOneDimSolvers_8h.html</anchorfile>
      <anchor>aee93c6ad7de1fdfc00446a60de9f36b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data, std::vector&lt; T &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CasinoParser.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>CasinoParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>CasinoParser.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>CasinoParser_8h</filename>
    <class kind="class">CasinoParser</class>
  </compound>
  <compound kind="file">
    <name>CBSOBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>CBSOBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CBSOBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>CBSOBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::CBSOBuilder</class>
  </compound>
  <compound kind="file">
    <name>ChebyshevFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ChebyshevFunctor_8h</filename>
    <class kind="struct">ChebyshevFunctor</class>
  </compound>
  <compound kind="file">
    <name>Clebsch_Gordan.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>Clebsch__Gordan_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Clebsch_Gordan.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>Clebsch__Gordan_8h</filename>
    <class kind="class">Clebsch_Gordan</class>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>Clock_8h</filename>
    <namespace>Pooma</namespace>
    <class kind="class">Pooma::Clock</class>
  </compound>
  <compound kind="file">
    <name>CloneManager.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>CloneManager_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CloneManager.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>CloneManager_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::CloneManager</class>
  </compound>
  <compound kind="file">
    <name>ComboOrbital.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>ComboOrbital_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ComboOrbital.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>ComboOrbital_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ComboOrbital</class>
  </compound>
  <compound kind="file">
    <name>ConservedEnergy.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>ConservedEnergy_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ConservedEnergy</class>
  </compound>
  <compound kind="file">
    <name>ConstScale.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>ConstScale_8h</filename>
    <class kind="struct">ConstScale</class>
  </compound>
  <compound kind="file">
    <name>CosineFunction.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CosineFunction_8h</filename>
    <class kind="struct">Sine3D</class>
    <class kind="struct">Cosine3D</class>
  </compound>
  <compound kind="file">
    <name>CoulombPBC.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>CoulombPBC_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CoulombPBCAA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAB</class>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAATemp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>CoulombPBCAATemp_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCAATemp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>CoulombPBCAATemp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CoulombPBCAATemp</class>
  </compound>
  <compound kind="file">
    <name>CoulombPBCABTemp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>CoulombPBCABTemp_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPBCABTemp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>CoulombPBCABTemp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CoulombPBCABTemp</class>
  </compound>
  <compound kind="file">
    <name>CoulombPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>CoulombPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CoulombPotentialAB</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAA</class>
  </compound>
  <compound kind="file">
    <name>CubicBspline.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicBspline_8h</filename>
    <class kind="struct">CubicBspline</class>
  </compound>
  <compound kind="file">
    <name>CubicBsplineGrid.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicBsplineGrid_8h</filename>
    <class kind="struct">CubicBsplineGrid</class>
    <class kind="struct">CubicBsplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">CubicBsplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
  </compound>
  <compound kind="file">
    <name>CubicBsplineGroup.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>CubicBsplineGroup_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::CubicBsplineGroup</class>
  </compound>
  <compound kind="file">
    <name>CubicSpline.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicSpline_8h</filename>
    <class kind="class">CubicSpline</class>
  </compound>
  <compound kind="file">
    <name>CubicSplineEngine.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicSplineEngine_8h</filename>
    <class kind="struct">CubicSplineEngine</class>
    <class kind="struct">CubicSplineEngine&lt; T, GRIDTYPE, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">CubicSplineEngine&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</class>
  </compound>
  <compound kind="file">
    <name>CubicSplineFunctions.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicSplineFunctions_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>CubicSplineFunctions.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicSplineFunctions_8h</filename>
    <class kind="class">CubicSpline</class>
    <class kind="class">RegCubicSpline</class>
  </compound>
  <compound kind="file">
    <name>CubicSplineGrid.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>CubicSplineGrid_8h</filename>
    <class kind="struct">CubicSplineGrid</class>
    <class kind="struct">CubicSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">CubicSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
  </compound>
  <compound kind="file">
    <name>DataParserTemplate.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>DataParserTemplate_8h</filename>
  </compound>
  <compound kind="file">
    <name>DeterminantOperators.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>DeterminantOperators_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4beca2de012935b3450ab6045dcad639</anchor>
      <arglist>(const int &amp;n, const int &amp;m, double *restrict a, const int &amp;n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7c1690d51dd10c5fd8d8e6b3692f76b5</anchor>
      <arglist>(const int &amp;n, const int &amp;m, std::complex&lt; double &gt; *restrict a, const int &amp;n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>85150e27830f0df6c921b671befc0c35</anchor>
      <arglist>(const int &amp;n, double *restrict a, const int &amp;n0, int *restrict piv, double *restrict work, const int &amp;n1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c24b84e1e1390b06c3dea77fffd1c783</anchor>
      <arglist>(const int &amp;n, std::complex&lt; double &gt; *restrict a, const int &amp;n0, int *restrict piv, std::complex&lt; double &gt; *restrict work, const int &amp;n1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Invert</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8cb6360cd2e9529da26358a05bf9dcd5</anchor>
      <arglist>(T *restrict x, int n, int m, T *restrict work, int *restrict pivot)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Invert</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>6cef963e6be749b52e117fa4d95319e0</anchor>
      <arglist>(T *restrict x, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invert_matrix</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2d98dd9be7f606a2f2006734d0d2593d</anchor>
      <arglist>(MatrixA &amp;M, bool getdet=true)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatio</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b50df23f91a58e5ff39bc931da8943ef</anchor>
      <arglist>(const MatA &amp;Minv, Iter newrow, int rowchanged)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatioTranspose</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4e7c4e19c00fa2d89885dc7801351f6a</anchor>
      <arglist>(const MatA &amp;Minv, Iter newcol, int colchanged)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>detRatio</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>561780ebdf9bf39e33258c6dd071c64b</anchor>
      <arglist>(T *restrict Minv, Iter2 newrow, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DetUpdate</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dc5e780be70c53c7fa5006a1c8b07a23</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newrow, VecT &amp;rvec, VecT &amp;rvecinv, int rowchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DetUpdateTranspose</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>912ce53290db4064beeb0edbb77c28a9</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newcol, VecT &amp;rvec, VecT &amp;rvecinv, int colchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dd9fb3d7778a1e2a789c3fc594782fae</anchor>
      <arglist>(const T *a, const TinyVector&lt; T, D &gt; *b, int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f8356667d87a810dff0194252bcbe2d0</anchor>
      <arglist>(const T *restrict a, const T *restrict b, int n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DetSetBuilderWithBasisSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>DetSetBuilderWithBasisSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::DetSetBuilderWithBasisSet</class>
  </compound>
  <compound kind="file">
    <name>DiracDeterminant.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>DiracDeterminant_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DiracDeterminant</class>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>DiracDeterminantBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>DiracDeterminantBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DiracDeterminantBase</class>
  </compound>
  <compound kind="file">
    <name>DiracDeterminantT.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>DiracDeterminantT_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DiracDeterminantT</class>
  </compound>
  <compound kind="file">
    <name>DispersionRelation.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>DispersionRelation_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2e7f64d7a975a9fa5accf6d3892316b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::IndexType</type>
      <name>IndexType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8f4dea079a62b4bcaec1312901280b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::PosType</type>
      <name>PosType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f1afe90cd6fca48c20ad2b9f6aaaee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen3DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e796eaaaa1b98c38377e9ea139b4e2c3</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen1DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>53bb61a2fd25c69208e96d6cef2521ca</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDegenLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5fa2da1679684e25fad004eb56d4f477</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genFreeParticleDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ecffd7bf6ad35ed976ca1c13cf6f53f6</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDebugDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>764282058d0f396c7eedb5570392300d</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSimpleModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>72cc166d89f54058cac1a97d1a1b8233</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp, RealType GapSize, RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPennModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2234922cce1f2f6a620c2a894718fcf4</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp, RealType GapSize, RealType FermiMomentum)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DispersionRelation.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>DispersionRelation_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>gen3DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0fd96d041ac5d7f76fa562d4e40b8095</anchor>
      <arglist>(QMCTraits::RealType cut, ParticleSet &amp;ptclSet, Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Degeneracies, Vector&lt; QMCTraits::IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen1DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b7e9fb4275b1a461b617e4326d636919</anchor>
      <arglist>(QMCTraits::RealType cut, ParticleSet &amp;ptclSet, Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Degeneracies, Vector&lt; QMCTraits::IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDegenLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3e4d66bd35e366b1328f173c617c8eab</anchor>
      <arglist>(QMCTraits::RealType cut, ParticleSet &amp;ptclSet, Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Degeneracies, Vector&lt; QMCTraits::IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genFreeParticleDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3f30bd4c32ff59824c65e80b225cb63e</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDebugDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>16e06329b4f8787c20b393e60520db65</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSimpleModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>064706e41ad1e437d7445ebee7ddfc1f</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp, QMCTraits::RealType GapSize, QMCTraits::RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPennModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9f1b80ed1d9ed03bf31a3759230a969c</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp, QMCTraits::RealType GapSize, QMCTraits::RealType FermiMomentum)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistanceTable.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>DistanceTable_8cpp</filename>
    <class kind="struct">SuperCellType</class>
    <class kind="struct">SuperCellType&lt; 3 &gt;</class>
    <class kind="struct">DTD_BConds</class>
    <class kind="struct">DTD_BConds&lt; T, 3, 0 &gt;</class>
    <class kind="struct">DTD_BConds&lt; T, 3, 7 &gt;</class>
    <class kind="struct">NoBConds</class>
    <class kind="struct">PeriodicBConds</class>
  </compound>
  <compound kind="file">
    <name>DistanceTable.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>DistanceTable_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DistanceTable</class>
  </compound>
  <compound kind="file">
    <name>DistanceTableData.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>DistanceTableData_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PairDataType</class>
    <class kind="struct">qmcplusplus::TempDisplacement</class>
    <class kind="class">qmcplusplus::DistanceTableData</class>
  </compound>
  <compound kind="file">
    <name>DMC.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMC_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMC.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMC_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMC</class>
  </compound>
  <compound kind="file">
    <name>DMCEnergyEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>DMCEnergyEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::DMCEnergyEstimator</class>
  </compound>
  <compound kind="file">
    <name>DMCFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::DMCFactory</class>
  </compound>
  <compound kind="file">
    <name>DMCMoveAll.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCMoveAll_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCMoveAll.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCMoveAll_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCMoveAll</class>
  </compound>
  <compound kind="file">
    <name>DMCNonLocalUpdate.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCNonLocalUpdate_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCNonLocalUpdate.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCNonLocalUpdate_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCNonLocalUpdate</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdatePbyP</class>
  </compound>
  <compound kind="file">
    <name>DMCOMP.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCOMP_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCOMP.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCOMP_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCOMP</class>
  </compound>
  <compound kind="file">
    <name>DMCPbyP.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCPbyP_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCPbyP.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCPbyP_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCPbyP</class>
  </compound>
  <compound kind="file">
    <name>DMCPbyPOMP.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCPbyPOMP_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCPbyPOMP.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCPbyPOMP_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCPbyPOMP</class>
  </compound>
  <compound kind="file">
    <name>DMCUpdateAll.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCUpdateAll_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdateAll.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCUpdateAll_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCUpdateAllWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdateAllWithKill</class>
  </compound>
  <compound kind="file">
    <name>DMCUpdateBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCUpdateBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdateBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCUpdateBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCUpdateBase</class>
  </compound>
  <compound kind="file">
    <name>DMCUpdatePbyP.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCUpdatePbyP_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCUpdatePbyP.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCUpdatePbyP_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithKill</class>
  </compound>
  <compound kind="file">
    <name>DMCWOS.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCWOS_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DMCWOS.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>DMCWOS_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DMCWOS</class>
  </compound>
  <compound kind="file">
    <name>DOMProcessor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>DOMProcessor_8h</filename>
  </compound>
  <compound kind="file">
    <name>DriftOperators.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>DriftOperators_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>decc9a9177f6b137c455125dc2ef4918</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>27c33d4804ae08b5f2e81ac51bd68387</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>bac3ce97dec5206749b4c1bac3e6b3ee</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b504cf60c58666a5486a71dd4a73b2b6</anchor>
      <arglist>(T tau, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8ef0c032cc0bbf4eb479ba77a52f623b</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c6073d16389f3bf9f71943873d069123</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>980f4585f10544146f5dca9cf237391d</anchor>
      <arglist>(T s, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>36447f0cbcb0b9b9192540c9737543cb</anchor>
      <arglist>(T s, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;ga, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;da)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DummyBasisSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>DummyBasisSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::DummyBasisSet</class>
  </compound>
  <compound kind="file">
    <name>DummyQMC.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>DummyQMC_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>DummyQMC.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>DummyQMC_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::DummyQMC</class>
  </compound>
  <compound kind="file">
    <name>ecp4qmc.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>ecp4qmc_8cpp</filename>
    <class kind="struct">ECPTest</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ecp4qmc_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ECPComponentBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>ECPComponentBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPComponentBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>ECPComponentBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ECPComponentBuilder</class>
  </compound>
  <compound kind="file">
    <name>ECPotentialBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>ECPotentialBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ECPotentialBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>ECPotentialBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ECPotentialBuilder</class>
  </compound>
  <compound kind="file">
    <name>EffMKineticEnergy.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>EffMKineticEnergy_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::EffMKineticEnergy</class>
  </compound>
  <compound kind="file">
    <name>ElectronGasComplexOrbitalBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>ElectronGasComplexOrbitalBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ElectronGasComplexOrbitalBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>ElectronGasComplexOrbitalBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ElectronGasComplexOrbitalBuilder</class>
    <class kind="struct">qmcplusplus::ElectronGasComplexOrbitalBuilder::EGOSet</class>
  </compound>
  <compound kind="file">
    <name>ElectronGasOrbitalBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>ElectronGasOrbitalBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ElectronGasOrbitalBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>ElectronGasOrbitalBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::RealEGOSet</class>
    <class kind="class">qmcplusplus::ElectronGasOrbitalBuilder</class>
  </compound>
  <compound kind="file">
    <name>EwaldSum.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>EwaldSum_8h</filename>
    <class kind="struct">EwaldSumTraits</class>
    <class kind="struct">EwaldSumTraits&lt; T, true, true &gt;</class>
    <class kind="struct">EwaldSumTraits&lt; T, false, false &gt;</class>
    <class kind="struct">EwaldSum</class>
  </compound>
  <compound kind="file">
    <name>FastParticleOperators.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>FastParticleOperators_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ConvertPosUnit</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>SUPERCELL_BOUNDARY_LIMITS</name>
      <anchorfile>FastParticleOperators_8h.html</anchorfile>
      <anchor>8d78c46d7923014a94df1c7c9c4e4808</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>THREE_DIM_BOUNDARY_BLOCK</name>
      <anchorfile>FastParticleOperators_8h.html</anchorfile>
      <anchor>a6fd7caf233250fc90abcdc1ea94b815</anchor>
      <arglist>(X, Y, Z, EPS, PLUSONE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FFTAbleVector.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>FFTAbleVector_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <class kind="class">APPNAMESPACE::FFTAbleVectorBase</class>
    <class kind="class">APPNAMESPACE::FFTAbleVector</class>
  </compound>
  <compound kind="file">
    <name>FFTEngines.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>FFTEngines_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <class kind="class">APPNAMESPACE::FFTWEngine</class>
    <class kind="class">APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; double &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; long double &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; float &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>FileUtility.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>FileUtility_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>Tokenize</name>
      <anchorfile>FileUtility_8h.html</anchorfile>
      <anchor>4b5ccab3e9c58e9776b17a2197c16a6d</anchor>
      <arglist>(const std::string &amp;str, std::vector&lt; std::string &gt; &amp;tokens, const std::string &amp;delimiters=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getExtension</name>
      <anchorfile>FileUtility_8h.html</anchorfile>
      <anchor>3783fbfa322462d5d033052387a8b198</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FSAtomPseudoPot.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>FSAtomPseudoPot_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::FSAtomPseudoPot</class>
  </compound>
  <compound kind="file">
    <name>GamesXmlParser.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>GamesXmlParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>GamesXmlParser.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>GamesXmlParser_8h</filename>
    <class kind="class">GamesXmlParser</class>
  </compound>
  <compound kind="file">
    <name>GaussianBasisSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>GaussianBasisSet_8h</filename>
    <class kind="struct">GaussianCombo</class>
    <class kind="struct">GaussianCombo::BasicGaussian</class>
  </compound>
  <compound kind="file">
    <name>GaussianFCHKParser.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>GaussianFCHKParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>GaussianFCHKParser.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>GaussianFCHKParser_8h</filename>
    <class kind="class">GaussianFCHKParser</class>
  </compound>
  <compound kind="file">
    <name>GaussianTimesRN.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>GaussianTimesRN_8h</filename>
    <class kind="struct">GaussianTimesRN</class>
    <class kind="struct">GaussianTimesRN::BasicGaussian</class>
  </compound>
  <compound kind="file">
    <name>GaussianTypeOrbital.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>GaussianTypeOrbital_8h</filename>
    <class kind="struct">RadialGaussian</class>
  </compound>
  <compound kind="file">
    <name>gemtest.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>gemtest_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gemtest_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GridMolecularOrbitals.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GridMolecularOrbitals_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GridMolecularOrbitals.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GridMolecularOrbitals_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::GridMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>GridTraits.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>GridTraits_8h</filename>
    <class kind="struct">GridTraits</class>
    <class kind="struct">GridTraits&lt; double &gt;</class>
    <class kind="struct">GridTraits&lt; std::complex&lt; double &gt; &gt;</class>
    <member kind="enumvalue">
      <name>LINEAR_1DGRID</name>
      <anchor>385c44f6fb256e5716a2302a5b9403886f2878a0a6c2a1f43346cd0b8aa356f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG_1DGRID</name>
      <anchor>385c44f6fb256e5716a2302a5b940388a6b381a90687b741d49d78cacbc59c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGZERO_1DGRID</name>
      <anchor>385c44f6fb256e5716a2302a5b9403885f55fe8f8283089f5a99850def18226f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUSTOM_1DGRID</name>
      <anchor>385c44f6fb256e5716a2302a5b94038829fd042c43b4d82005e588c4c94ceeef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PBC_CONSTRAINTS</name>
      <anchor>bc5c98fcc1211af2b80116dd6e0a035d250abe62dd74e8028ce20454f7d44d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRSTDERIV_CONSTRAINTS</name>
      <anchor>bc5c98fcc1211af2b80116dd6e0a035d5f3210a1450b08007106b588af12cf7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_CONSTRAINTS</name>
      <anchor>bc5c98fcc1211af2b80116dd6e0a035d61549ecba3ec41695e09b2808274555b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GroupedOrbitalSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>GroupedOrbitalSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::GroupedOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>GSLOptimize.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>GSLOptimize_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GSLOptimize.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>GSLOptimize_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::GSLOptimize</class>
  </compound>
  <compound kind="file">
    <name>gto2grid.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>gto2grid_8cpp</filename>
    <member kind="function">
      <type>void</type>
      <name>buildBasisSet</name>
      <anchorfile>gto2grid_8cpp.html</anchorfile>
      <anchor>0eda80e415eaadda4590da180e74b877</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gto2grid_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GTO2GridBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTO2GridBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTO2GridBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTO2GridBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::GTO2GridBuilder</class>
  </compound>
  <compound kind="file">
    <name>gto2slater.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>gto2slater_8cpp</filename>
    <class kind="struct">GTO2Slater</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gto2slater_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GTOBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTOBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTOBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTOBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::GTOBuilder</class>
  </compound>
  <compound kind="file">
    <name>GTOMolecularOrbitals.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTOMolecularOrbitals_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>GTOMolecularOrbitals.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTOMolecularOrbitals_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::GTOMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>h5merge.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>h5merge_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>h5merge_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HamiltonianFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>HamiltonianFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HamiltonianFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>HamiltonianFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HamiltonianFactory</class>
  </compound>
  <compound kind="file">
    <name>HamiltonianPool.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>HamiltonianPool_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HamiltonianPool.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>HamiltonianPool_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HamiltonianPool</class>
  </compound>
  <compound kind="file">
    <name>HarmonicPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>HarmonicPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HarmonicPotential</class>
  </compound>
  <compound kind="file">
    <name>HDFAttribIO.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>HDFAttribIO_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HDFAttribIOBase</class>
    <class kind="struct">qmcplusplus::HDFAttribIO</class>
    <member kind="typedef">
      <type>int</type>
      <name>hid_t</name>
      <anchorfile>HDFAttribIO_8h.html</anchorfile>
      <anchor>96df66c0d11ed2a58049c29f6fa510ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>hsize_t</name>
      <anchorfile>HDFAttribIO_8h.html</anchorfile>
      <anchor>1e6b228493f550c22275e37b18c4e021</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFNumericAttrib.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>HDFNumericAttrib_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; hsize_t &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; int &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; int, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; int, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; string &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; double, 3 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; complex&lt; double &gt;, 3 &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFParticleAttrib.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFParticleAttrib_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFSTLAttrib.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>HDFSTLAttrib_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFTriCubicSpline.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>HDFTriCubicSpline_8h</filename>
    <class kind="struct">HDFAttribIO&lt; TriCubicSplineT&lt; double &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput0.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerInput0_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInput0.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerInput0_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HDFWalkerInput0</class>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputCollect.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerInputCollect_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputCollect.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerInputCollect_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HDFWalkerInputCollect</class>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputManager.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerInputManager_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HDFWalkerInputManager.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerInputManager_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HDFWalkerInputManager</class>
  </compound>
  <compound kind="file">
    <name>HDFWalkerIO.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerIO_8h</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerMerger.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>HDFWalkerMerger_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerMerger.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>HDFWalkerMerger_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HDFWalkerMerger</class>
  </compound>
  <compound kind="file">
    <name>HDFWalkerOutput.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerOutput_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerOutput.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>HDFWalkerOutput_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HDFWalkerOutput</class>
  </compound>
  <compound kind="file">
    <name>HEGGrid.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/ElectronGas/</path>
    <filename>HEGGrid_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HEGGrid</class>
    <class kind="struct">qmcplusplus::HEGGrid&lt; T, 3 &gt;</class>
  </compound>
  <compound kind="file">
    <name>HeSTOClementiRottie.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HeSTOClementiRottie_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>HeSTOClementiRottie.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HeSTOClementiRottie_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HePresetHF</class>
    <class kind="struct">qmcplusplus::HePresetHFBuilder</class>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSet.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSet_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ComboSTO</class>
    <class kind="struct">qmcplusplus::HFAtomicSTOSet</class>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSetBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSetBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>bae1d80779ba4aa26ee91c828d22de51</anchor>
      <arglist>(std::ostream &amp;out, const ComboSTO&lt; T, POS &gt; &amp;asto)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSetBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSetBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HFAtomicSTOSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>InitMolecularSystem.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>InitMolecularSystem_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::LoneElectron</class>
  </compound>
  <compound kind="file">
    <name>InitMolecularSystem.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>InitMolecularSystem_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::InitMolecularSystem</class>
  </compound>
  <compound kind="file">
    <name>IonIonPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>IonIonPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::IonIonPotential</class>
  </compound>
  <compound kind="file">
    <name>IteratorUtility.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>IteratorUtility_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>delete_iter</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>06067ed3e3a467edb7bdd5d000871184</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_first_address</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>498e16cb0805ac912f352d09dd9c74c1</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_last_address</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d6d1b08e67ea52d0ad408455a5d53c16</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JAABuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JAABuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JAABuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JAABuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::JAABuilder</class>
  </compound>
  <compound kind="file">
    <name>JABBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JABBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JABBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JABBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::JABBuilder</class>
  </compound>
  <compound kind="file">
    <name>JastrowBasisBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JastrowBasisBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBasisBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JastrowBasisBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::JastrowBasisBuilder</class>
  </compound>
  <compound kind="file">
    <name>JastrowBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JastrowBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>JastrowBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::JastrowBuilder</class>
  </compound>
  <compound kind="file">
    <name>LCOrbitals.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>LCOrbitals_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::LCOrbitals</class>
  </compound>
  <compound kind="file">
    <name>LCOrbitalSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>LCOrbitalSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::LCOrbitalSet</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, true &gt;</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, false &gt;</class>
  </compound>
  <compound kind="file">
    <name>Libxml2Doc.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>Libxml2Doc_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Libxml2Doc.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>Libxml2Doc_8h</filename>
    <class kind="struct">OhmmsXPathObject</class>
    <class kind="struct">Libxml2Document</class>
  </compound>
  <compound kind="file">
    <name>libxmldefs.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>libxmldefs_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>getNodeName</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>be5d9210a18c20f02f35c43bc14fc8e3</anchor>
      <arglist>(std::basic_string&lt; _CharT &gt; &amp;cname, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>96875ad927c4ed4341cc18646a0ace8e</anchor>
      <arglist>(T &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>c053760b8645e7dc536125deeb960847</anchor>
      <arglist>(IT first, IT last, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>b33b1a4bb240b9b40f43db11b1fa4bce</anchor>
      <arglist>(const T &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>1b0dc13ea6925bca8f9aa68fe7c43b48</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>fff04126aa39edb7f000178be031a122</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LibxmlNumericIO.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>LibxmlNumericIO_8h</filename>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>LibxmlNumericIO_8h.html</anchorfile>
      <anchor>ad70475fe54310f8392424d1bdb34b61</anchor>
      <arglist>(qmcplusplus::Vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>LibxmlNumericIO_8h.html</anchorfile>
      <anchor>0d8bccdf67200ee5e0a8f1bbb1882112</anchor>
      <arglist>(qmcplusplus::Matrix&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearSpline.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>LinearSpline_8h</filename>
    <class kind="struct">LinearSplineGrid</class>
    <class kind="struct">LinearSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</class>
    <class kind="struct">LinearSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
    <class kind="struct">LinearSplineGrid&lt; T, CUSTOM_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</class>
    <class kind="struct">LinearSpline</class>
  </compound>
  <compound kind="file">
    <name>LocalCorePolPotential.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>LocalCorePolPotential_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalCorePolPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>LocalCorePolPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::LocalCorePolPotential</class>
    <class kind="struct">qmcplusplus::LocalCorePolPotential::CPP_Param</class>
  </compound>
  <compound kind="file">
    <name>LocalECPotential.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>LocalECPotential_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalECPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>LocalECPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::LocalECPotential</class>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimator.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>LocalEnergyEstimator_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>LocalEnergyEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::LocalEnergyEstimator</class>
  </compound>
  <compound kind="file">
    <name>LocalEnergyOnlyEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>LocalEnergyOnlyEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::LocalEnergyOnlyEstimator</class>
  </compound>
  <compound kind="file">
    <name>LocalizedBasisSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>LocalizedBasisSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::LocalizedBasisSet</class>
  </compound>
  <compound kind="file">
    <name>LocalPPotential.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>LocalPPotential_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LocalPPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>LocalPPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::LocalPPotential</class>
    <class kind="struct">qmcplusplus::LocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="file">
    <name>LRTwoBodyJastrow.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>LRTwoBodyJastrow_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>LRTwoBodyJastrow.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>LRTwoBodyJastrow_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::LRTwoBodyJastrow</class>
  </compound>
  <compound kind="file">
    <name>MatGrid1D.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>MatGrid1D_8h</filename>
    <class kind="class">MatGrid1D</class>
  </compound>
  <compound kind="file">
    <name>MatrixOperators.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>MatrixOperators_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::MatrixOperators</class>
  </compound>
  <compound kind="file">
    <name>MCWalkerConfiguration.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>MCWalkerConfiguration_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MCWalkerConfiguration.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>MCWalkerConfiguration_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::MCWalkerConfiguration</class>
  </compound>
  <compound kind="file">
    <name>MixedSPOSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>MixedSPOSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::MixedSPOSet</class>
  </compound>
  <compound kind="file">
    <name>MO2Grid3D.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>MO2Grid3D_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::BasisGroupType</class>
  </compound>
  <compound kind="file">
    <name>MO2Grid3D.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>MO2Grid3D_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::MO2Grid3D</class>
  </compound>
  <compound kind="file">
    <name>mo2grid3d_main.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>mo2grid3d__main_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>mo2grid3d__main_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModInsKineticEnergy.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>ModInsKineticEnergy_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ModInsKineticEnergy</class>
  </compound>
  <compound kind="file">
    <name>ModPadeFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ModPadeFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ModPadeFunctor</class>
  </compound>
  <compound kind="file">
    <name>MolecularBasisBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularBasisBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::MolecularBasisBuilder</class>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBasis.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularOrbitalBasis_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::MolecularOrbitalBasis</class>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularOrbitalBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularOrbitalBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::MolecularOrbitalBuilder</class>
  </compound>
  <compound kind="file">
    <name>MomentumDistribution.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>MomentumDistribution_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>QMCTraits::IndexType</type>
      <name>IndexType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8f4dea079a62b4bcaec1312901280b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::PosType</type>
      <name>PosType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f1afe90cd6fca48c20ad2b9f6aaaee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2e7f64d7a975a9fa5accf6d3892316b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::ValueType</type>
      <name>ValueType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5e5620ee3bca4f45e33fa3cb508134a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::ComplexType</type>
      <name>ComplexType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>6dbf77d79fedbaa4fc2487a228e16b13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MomentumDistribution.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>MomentumDistribution_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PtclChoiceBase</class>
    <class kind="class">qmcplusplus::RandomChoice</class>
    <class kind="class">qmcplusplus::RandomChoicePerWalker</class>
    <class kind="class">qmcplusplus::StaticChoice</class>
    <class kind="class">qmcplusplus::MomDistBase</class>
    <class kind="class">qmcplusplus::FFTMomentumDist</class>
    <class kind="class">qmcplusplus::ThreeDimMomDist</class>
    <class kind="class">qmcplusplus::OneDimMomDist</class>
    <class kind="class">qmcplusplus::AveragedOneDimMomDist</class>
    <class kind="class">qmcplusplus::DirectMomDist</class>
    <class kind="class">qmcplusplus::RandomMomDist</class>
  </compound>
  <compound kind="file">
    <name>MultiChain.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>MultiChain_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; PooledData&lt; double &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>MultiChain.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>MultiChain_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::Bead</class>
    <class kind="struct">qmcplusplus::MultiChain</class>
  </compound>
  <compound kind="file">
    <name>MultiChainIO.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>MultiChainIO_8cpp</filename>
    <class kind="struct">HDFAttribIO&lt; PooledData&lt; double &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>MultiChainIO.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>MultiChainIO_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::HDFMultiChainOutput</class>
    <class kind="class">qmcplusplus::HDFMultiChainInput</class>
  </compound>
  <compound kind="file">
    <name>MultipleEnergyEstimator.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>MultipleEnergyEstimator_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>MultipleEnergyEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>MultipleEnergyEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::MultipleEnergyEstimator</class>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminant.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>MultiSlaterDeterminant_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::MultiSlaterDeterminant</class>
  </compound>
  <compound kind="file">
    <name>NGOBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NGOBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PadeOrbital</class>
  </compound>
  <compound kind="file">
    <name>NGOBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NGOBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::NGOBuilder</class>
  </compound>
  <compound kind="file">
    <name>NoCuspFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>NoCuspFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NoCuspFunctor</class>
  </compound>
  <compound kind="file">
    <name>NonLocalECPComponent.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalECPComponent_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPComponent.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalECPComponent_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NonLocalECPComponent</class>
  </compound>
  <compound kind="file">
    <name>NonLocalECPotential.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalECPotential_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalECPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalECPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NonLocalECPotential</class>
  </compound>
  <compound kind="file">
    <name>NonLocalPPotential.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalPPotential_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalPPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalPPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NonLocalPPotential</class>
    <class kind="struct">qmcplusplus::NonLocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="file">
    <name>NonLocalTOperator.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalTOperator_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalTOperator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>NonLocalTOperator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NonLocalTOperator</class>
  </compound>
  <compound kind="file">
    <name>NRSplineFunctions.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>NRSplineFunctions_8h</filename>
    <class kind="struct">TriDiagSolver</class>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSpline</name>
      <anchorfile>NRSplineFunctions_8h.html</anchorfile>
      <anchor>f15a3339d6f703b7fa07add351dac70b</anchor>
      <arglist>(const Tg *x, const T *y, int n, T yp1, T ypn, T *y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplinePBC</name>
      <anchorfile>NRSplineFunctions_8h.html</anchorfile>
      <anchor>7318c0a7223daf319288f9a93ed6b511</anchor>
      <arglist>(const Tg *x, const T *y, int n, T *d1, T *d2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplineFirst</name>
      <anchorfile>NRSplineFunctions_8h.html</anchorfile>
      <anchor>3adce34b5db9f2ea7d83ae6b45b3c14c</anchor>
      <arglist>(const Tg *x, const T *y, int n, T *d1, T *d2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NumericalJastrowFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>NumericalJastrowFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CutoffFunctor</class>
    <class kind="struct">qmcplusplus::NumericalJastrow</class>
  </compound>
  <compound kind="file">
    <name>NumericalMolecularOrbitals.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalMolecularOrbitals_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalMolecularOrbitals.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalMolecularOrbitals_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::NumericalMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>NumericalOrbitalSetBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>NumericalOrbitalSetBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalOrbitalSetBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>NumericalOrbitalSetBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::NumericalOrbitalSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>NumericalRGFBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalRGFBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalRGFBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalRGFBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NumericalRGFBuilder</class>
  </compound>
  <compound kind="file">
    <name>ohmms-config.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/docs/</path>
    <filename>ohmms-config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBHDF5</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>0d73f5cf130e137b29503da8332ddeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBBOOST</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>b2a4c0ae60c4447771321c68b35ac965</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBBLITZ</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>e447601d7f6a4dd67224a622bcfd36c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBXML2</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>8287c32e7f48ebf6054ca3ae09b56646</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBGSL</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>c7d03b1506df0bab49fb2f5809699f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_DIM</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>8a82775773a2c0bd6f181579e7a8797e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_INDEXTYPE</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>6770ec35b934b26f6d83c1bea960f451</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_PRECISION</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>6c699f0614fe0f99e2a43a56b05af25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_ORTHO</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>ead2c3c0331dcbccc807004b7952d6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMC_FASTWALKER</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>d2efe8dda69f65fa68645084d628f61e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsBlas.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OhmmsBlas_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsBlas.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OhmmsBlas_8h</filename>
    <class kind="struct">BLAS</class>
  </compound>
  <compound kind="file">
    <name>OhmmsElementBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>OhmmsElementBase_8h</filename>
    <class kind="class">OhmmsElementBase</class>
    <member kind="define">
      <type>#define</type>
      <name>xmlDocPtr</name>
      <anchorfile>OhmmsElementBase_8h.html</anchorfile>
      <anchor>fce00d49ee3d7178f773c3e439090802</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlNodePtr</name>
      <anchorfile>OhmmsElementBase_8h.html</anchorfile>
      <anchor>9559fa02dc5763cfd71b5fc2f2107d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlNsPtr</name>
      <anchorfile>OhmmsElementBase_8h.html</anchorfile>
      <anchor>be5104001fc626afc1d082f48d579d48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsInfo.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsInfo_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsInfo.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsInfo_8h</filename>
    <class kind="class">OhmmsInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>LOGMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>3cc195f38b3b36953ed4cf62c0b296fd</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERRORMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>93d4be0c42bb6191255e156c2943be12</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARNMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>f4377ffb3a0dc2a20873db75c3fb0d56</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XMLReport</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>c4d04e387120e00abe291af4aebc878d</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUGMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>ed6d1186912238eabd7672078a396423</anchor>
      <arglist>(msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsInform.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsInform_8cpp</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>OhmmsInform.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsInform_8h</filename>
    <class kind="class">OhmmsInform</class>
    <member kind="function">
      <type>OhmmsInform &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsInform_8h.html</anchorfile>
      <anchor>4abd8530cc865b69106c6cfd14f198d2</anchor>
      <arglist>(OhmmsInform &amp;o, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>OhmmsInform &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsInform_8h.html</anchorfile>
      <anchor>633a8a3ec6772f32f3f65f99a0adcad7</anchor>
      <arglist>(OhmmsInform &amp;o, const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsIOBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>OhmmsIOBase_8h</filename>
    <class kind="class">OhmmsIOBase</class>
    <class kind="class">StreamIO</class>
  </compound>
  <compound kind="file">
    <name>OhmmsMatrix.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>OhmmsMatrix_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <class kind="class">APPNAMESPACE::Matrix</class>
    <class kind="struct">APPNAMESPACE::CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::SizeLeaf2</class>
    <class kind="struct">APPNAMESPACE::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">APPNAMESPACE::LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">APPNAMESPACE::LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dbaef3dbf9898b2ec09e66416881841c</anchor>
      <arglist>(std::ostream &amp;out, const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c4653ac0342909c64224767daa4d6402</anchor>
      <arglist>(std::istream &amp;is, Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9cb741fb099ece3c70651950fbb3e875</anchor>
      <arglist>(Matrix&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsMatrixOperators.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>OhmmsMatrixOperators_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ed5aaab271f7a576f8aac71a33894dad</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6083d9e90301b3abf599570d01f5f4ab</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5e9cb54d1481b8aff2cd9435f110c375</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6d7978ec0b73158bdb39cdfc93d08487</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a8b7f567336ac70c1fd848840be90cf7</anchor>
      <arglist>(const T1 &amp;, const Matrix&lt; T2, C2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>19401f40139c133c5911db6f98f994e0</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5d957f74613f3ad0a81a7653f3b2aeb2</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>25f0756f208c6f7ae9f33ebfe51f27a2</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c47f5d8c6db4f1d87ec61d945c99505d</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e26ed423860fba1ae9b6ae198741751a</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>76361c400a4802c3c016c0d61227f711</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ae38989403bce61e74dc0a000fe72f9e</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>debb94c2d675a54e59e3cbabac6dac15</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ba17b622b07e534e2d8ffdd349f76eb3</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3b7e50b4d6853253930c7ef43a1d3cd3</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a6bb14dbffc7ecfef554d3fcfd96963f</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>31c6392c6cb38eb8da642b93de6de713</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c91578532b14d0b9e6f28d58c7c2001c</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>08eea18b8751270f8e811cd35aa27bcf</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b6e3edd0ad8f260efca71e26394cf102</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>517cff9639e909bf289d815da9336b97</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ba0ef06399d785c3626cb29528cdea2f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1019176b7da0ae0c67a42d1c41231f33</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ebd40d7c6f5f2bb9c0b2a802c60979b3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8e621ff0ccfaba2857b6679cfd53fd02</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6e4d3900b4d768054f696b3c5977208a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d6ac0140d16b9503d5db1007e7da4826</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a3159e1871c3338ff50bff1784c887b8</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>da428c4f28be94fbc66a771bbe5b59b5</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9d6068d78df60db35ba3fe288dacda1a</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>240232a0a70fd31c85625e5a6760f586</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5986d4edc9afdbc9f07a390b721ea543</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7d9b95365578873e901e1ccd38eb40b8</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4a374ad7803523be6266461f58bac3c8</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d79931bb710aa0d54812b83fd717d73c</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>591996c08567518c679d52e8290d9a94</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e26f3c2479e38c9fbefd9c4018bd9652</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ee28d26819593394249aa5418e9ca572</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0f56878c184befdc3bf1daf35f85b4a1</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5c215622edd99ce5cd773184d482feb1</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>746cc79413c0434efa83f48a1698cf9a</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9bd7e56931ffbf42b4b328006cbd16c1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9191b4f10a9afde40a8b163fa0af932d</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f7d2fbb4ec9b740deaad45290f01df5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4d672e84665015ca86051a54032dc39b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f62c18a542eb1c84967981f80a0520bc</anchor>
      <arglist>(const T1 &amp;, const Expression&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eaa8a5b3bca965e5d423a45ebcbb41d1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c560e625623bf08586fe5676f5924959</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0b12bb53a90e72d65b98b4425dc68c72</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>87b35f8bd41668b069b292215123af17</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9ce5bb9c339bc192f80df324519693ea</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fe540c6bd1bba45bf21364f71c0a6897</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7979fb40274a7a63ec97b7cf6743a00f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4a49d4dd08266c1899deff0e9801d62a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>86b5726b111f91e80d08ea66bef8a8c8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>afb46cd40662ffd9a82a6ec8d0e00541</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a31e5aaaa78db41b2e3ea503af687374</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1c380976e6cdbade3fdcfe3c55c836c2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4f2e75af490416c9c152f10fc31675a3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>538451b96271b7a5021bca9b07013089</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>00fa8df8eb6aa8950e890eb4466249bf</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>32449b90cb1945dcfc0ea8e8107e4efc</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ee01616c33432db4a74b36b191318845</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>900fdf4fb40468b4e246f419b5b776a3</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4edc6917d9f3152847bdf9878a64903f</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dd471d7c3f78bf1c9db149a6a8b531b3</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fa658a9f93ae453111776fd66603b31e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cd1d65cca6443dda2c02d97c24bbe1d9</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6c2740b23fe277c445fb99893c5f0786</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a73dbed7ca1e9c23eaa5b6e4b5950c51</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f7ba9de54ef097d6712abc1a12ec4478</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>29baff869e96b823e3e7fed6040fcc0a</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>164f9e5bcce0785ecc81a1248933d5c6</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f648d1b4af05597440a149cc8417936</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>74a8fff1954be1c92abe942db67a2529</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cfcfee9f16cdfb0d08ec6740f4b2b2f8</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsObject.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsObject_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsObject.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsObject_8h</filename>
    <class kind="class">OhmmsObject</class>
  </compound>
  <compound kind="file">
    <name>OhmmsParameter.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>OhmmsParameter_8h</filename>
    <class kind="class">OhmmsParameter</class>
    <class kind="class">OhmmsParameter&lt; bool &gt;</class>
  </compound>
  <compound kind="file">
    <name>OhmmsSpecies.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsSpecies_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsSpecies.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>OhmmsSpecies_8h</filename>
    <class kind="class">SpeciesBase</class>
  </compound>
  <compound kind="file">
    <name>OhmmsSymmetricMatrix.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>OhmmsSymmetricMatrix_8h</filename>
    <class kind="class">SymmetricMatrix</class>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>OhmmsSymmetricMatrix_8h.html</anchorfile>
      <anchor>a3b2c324686e741fe61237877c33c5bb</anchor>
      <arglist>(SymmetricMatrix&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsSymmetricMatrix_8h.html</anchorfile>
      <anchor>a8bc8e05439e0aba1488e4a0cddffed8</anchor>
      <arglist>(ostream &amp;out, const SymmetricMatrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVector.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>OhmmsVector_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <namespace>qmcplusplus</namespace>
    <class kind="class">APPNAMESPACE::Vector</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeaf</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e8848320562d09636332ade7a827464e</anchor>
      <arglist>(Vector&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a54063afde5dc06970a754132d74ce92</anchor>
      <arglist>(std::ostream &amp;out, const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8becc18ea64fde6d239d32d8265ecc21</anchor>
      <arglist>(std::istream &amp;is, Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVectorOperators.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>OhmmsVectorOperators_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>acos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5f1c1f68e1c38cfffac1aed3cb29dbc2</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>asin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6bb11adb707662aa5efd48b3ae0db5b1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b0960cb55173644507ef4dcda5fd263</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCeil, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ceil</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>761fe4d89c52e1abcb9fdf9d6005e30c</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>066778e488067d7b2f95fb471275a276</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cosh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ad15f4aba630c2d791b11c3305157be6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnExp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>exp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8b58730f83c0b8aa6468965a2711bec6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFabs, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fabs</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7fe841c998193a9724c0125209156b7b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFloor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>floor</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>73cff08a99f5a0f9f60f6002aff7e5fe</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>36c2b8d724337cf9c13721f7eb765f5a</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog10, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log10</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a4b2112ac29208c0e79ac5c560201dce</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>35bd118ea7190584896902d8be2c01cb</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sinh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>663f2ac3fe75b5da91523ce88c47e1ad</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSqrt, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sqrt</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0ff7518f385d01b9fe4f9cad1bc04dd4</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>93cb018e935f53ecf447eaaae232f970</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tanh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b50e5a7b93478163a921f3dfe9d0d73</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fd51d65436fd1df13f9a7946e2c95a39</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7d8c975676c81bdaf7441715bceea7d0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3bf04d0d9bd9a64584d5892ed49f955b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e16acadcda5ea420dfd141795e88acaf</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpNot, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>65222cc1e6ef1895445126b16ae76aa1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ad5ab1f3fdf4fdd82641ca4b89b17a32</anchor>
      <arglist>(const T1 &amp;, const Vector&lt; T2, C2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>52908df4d53714547dbf5001ed2af057</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>172a57168d5024aa47cd05fe774ee5c8</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0eeb35dbd599fa44b6dba23c2186d1d5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7f480fbd6df9db8e679a52957852c5ff</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d2835506f3937aa86cc6abfe1478e690</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d0ca2b79821e07233429a0929627df02</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bfbda6c48c073d2ea3f4ebdf12c9c900</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>493915ad4b99810631588453f95576e1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>64de48c1ce3f3da9659e0dcc38641fde</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d42e8592c3cc4eb8c45bd5f07d4dcf60</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2e0b90cba9f83b736b2b747470bd083e</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>92540f061dae99fa5ee80095933c4b4c</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5a85ddc7140f4eb069bcb0a5126cd1b0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9204bcba753e133bf96c3139b49b1e80</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>acfdadc7f072b0a6252fee353a61e683</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b6021d9ad9b29b1bf5867008e94da38</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2a6ddc1bfe156fdf52f2bd8a99fdc335</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6577668ddfaaf1b8609f6716872b6d19</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>269de3e03efa37fede4ed56b4524e0d7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ff12fc23447a7bf876724669d7a4dcd0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1701719275a18fd0acac964d5f5e9221</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bc4729c91471546f7e09a4bccce9013c</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>45b95f72d39e5ef530b20bce6d35afa9</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9b6502d619d5ddf26ef0c01b036f887f</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d6f3aec8d9c0c26d150d96db01bef5c7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>baa0ac2717e0747e20c781400c361a9d</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>475a198b3e86ad5e71cc5497346f79cd</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>75df286f29e7f2a20f4cdf88239104be</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1e7c6a5c201cfa5e2de35c0ad9e9d9e6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f13d00a60014b11cb33462c09dc023e0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3d12ae83a16a92035782e9db6463d75b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a412c4d52b0151f564723d9ac771d0af</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>76eb6af5b147f6eb2e17024b2fe34d39</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7a0927546156ed9c4ab9865d71838c41</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dc091d62f1cec7192516b44f4185d8ff</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e3426e299b654fc95b1d592f7fd7779f</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>76cf96ad03328e9dec99ee15448fc957</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>478de62c9257e721ca421723cf4633f5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c65028e5ece86b5bcba1e331a7d4daae</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>17692502d7ded8f808bf61ff30a34582</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>32575f56707ef7263b0a934fce5a6aa3</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>231677621a2343484509b5ceebd601b0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7335fc1387fab9e3f8482e127b763b81</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5d595a20c856481240cb2d4b46df742f</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9aea70c0ab92449c1c6513b5cce3c2fe</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5dda9be623abc167f1db2a43b1f125a4</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>13b470abbdda26668f6c336eaa5e9c53</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>99f3d4b5c5c5f1e5e101f38c89d45956</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b7a8f21bec5480b3646580585dc216a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f242b0eb2997c16fcd77552aac4403c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>791944108bd6bc08e408b086d8237183</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c2d184cb780f14669f6f8002b2ea34bd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9ad310afd634790ddcef0c803c1e6665</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7c9a86de3cc6fb7a80665092ea1c9a44</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c70f34d7d7c35e49766320535944e6a7</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e8043e65115341b62ba98d2efbb0ee0f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7de2935264de50badb498be492aa0365</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bedcee9e44b01e0dfc8d78f8cce22cc2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e1b620b426ce90935c020d0cfc3bcc7e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6dac22e044a960dc6835be6666d3237e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6d3f12229016325e80a50f34c41d5512</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c6c027537c5915bb68a63dce0401e4a7</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ad24d936e2dcd009c12cb3e363ad601a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>60d2aa1e2a920636f6cf843e9bd6a37b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c36f8c161318bb2c0e81132342afa304</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e79f3e90671f891c77a4cd4ee9d035e0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a3c5832dd9e93f8d5af7a686d90c8048</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ed75c84c6cd16bbca0d0640fc7cb86c7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7f78f777621a4dc9006ee6fd737c2f54</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>923e7c41471c8be0a5a315633a7fb5cf</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fa1caa2d491247a45436177b9ee05557</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3b10be5638cf73669859e3120a581444</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b994226377bfd5e0c31fbf9ba00358fe</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9fce12ebe161495d8b13393d0631b2fc</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6f973db23002bcf537c66e2e448caef5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c7f96a1685a8501212e32cd3dd79e965</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8c8ebdb20630f4f4a021b643b3c6a249</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eda3e44971b19e66f796772c0406c89b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bcaa0a848be6e4cf408b14b5a793f67b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>46a0e2ce8aa63d11fc42af1cbbfd0688</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dda578bdb6bc76b8cf33ab59198e3e01</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8975e6a2fe0b8766bc69bd0aac1e9a6e</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7b97a73453259eb41c19b8da5aab5809</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5ca6b7e881e4d568b11033b0bdd18ef9</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e5f91d6c12f6f97f3b426ea59cd65244</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>03df98c72c5a4b4dbc8b23f2b827f5a0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7a9108bf4a5ccbea6b6d807f4d69bff8</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1ea696bd814872e87ac02fe301a816e3</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>276ace4b81b40d1b2c291c8e30713f32</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>930b8246b8c40cbbf14b82c0266b4f64</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>95977d5d8c5719b9e3549dcffe67eada</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f21f71f066b8f8a261995d3bf1c2a774</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a9306a5d5dc6afb74510a718a2245dac</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8f214ff5fda53a0705e7e31197343deb</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6d25e8683b8093ca0f9ef2936e7a1867</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>509157e546b6bb662f7c741b1b20f9fb</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>04372165e45cd347f045851edc89c2ad</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>88340c3e6ba3b77c647088396ce2f529</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f457cebbec07d2181a80b2f8f9bf634e</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fe5cc9e76201716fdb647a4f0b073b6c</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>35dfb7d9e2c2a2d8f70e5de5e8bef44e</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>599a8251f211025a71557e1ede72d295</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cbfc3d991952463542098aa8dc694793</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>22b89fcecfdc27c0520ed4b8f2133f46</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5177cd5569e481b22aa2eb095f08a84b</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eda28de75c2452c42a74e3e084e87d5f</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cfe4291a7b0613b719ca8101c8c46966</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1ab01560d83665f6c5197329e706f22d</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ce36d685784c025e22058468ab1e8999</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcCos, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>acos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1a3121d42dc957db552e049c699bd0f0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcSin, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>asin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d0f13bf85925dae25d0fb5d8a62747e2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcTan, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a60478f81a57de1a5ff965d4937adf2f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCeil, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ceil</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a7d1a0ddf7a46970dd456d873e5f4974</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCos, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9024aa81800fa2a71c1007d9ceba867a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypCos, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cosh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dd9cd8579597007d6c6a4824f67626ed</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnExp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>exp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8bc5c88cd8f062714f6c75c02bf6d62b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFabs, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fabs</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8b926bdf028408667eefe39ffd209908</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFloor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>floor</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f1f4f73b0e6cc9d165467342f15d9749</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b72bf5f987ee4c2a4892cd2b65f4621a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog10, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log10</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a74bea5de10f09a85980939988bfdbdc</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSin, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a466a55c13f2bb44681ac1c2f6b81c09</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypSin, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sinh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b942e376eb4dd5eb8365d25d1fa8dea5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSqrt, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sqrt</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9f206a8009b046580117dea135c11a1a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnTan, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cb5ff81dcc3cfb189f0c6fb4f3140cff</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypTan, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tanh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bf4662c68629b1fcf2cf0506ef4bc1b0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9bd7e56931ffbf42b4b328006cbd16c1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9191b4f10a9afde40a8b163fa0af932d</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f7d2fbb4ec9b740deaad45290f01df5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4d672e84665015ca86051a54032dc39b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>67efa388bb47dd4e0e01ba89e655427c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f62c18a542eb1c84967981f80a0520bc</anchor>
      <arglist>(const T1 &amp;, const Expression&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eaa8a5b3bca965e5d423a45ebcbb41d1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c560e625623bf08586fe5676f5924959</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0b12bb53a90e72d65b98b4425dc68c72</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7c1787acb2901f0ca0143f3136e6fec8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>87b35f8bd41668b069b292215123af17</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9ce5bb9c339bc192f80df324519693ea</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fe540c6bd1bba45bf21364f71c0a6897</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7979fb40274a7a63ec97b7cf6743a00f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f8a0b3b2300c56e7bf4d66e59b3feeae</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7efbb43c54936af390e0f255a4550d2a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>82e9f3347fe14570caa6d4baeb5c4e65</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7b116b5a256ad4aa31ff38f8c30fe9af</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1bfe7d4dceb31ada24bad13cb83b4a3c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1988ded6b5521ab932a33f96a58e824b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d269d561a826f4cf0963176c96efb583</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>719cb77d1c57db591588812b249ab419</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f4451cf1ec0bf0d42dcfd94f2e76216c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f417f9068ebe4d008cd615d45dbae643</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>559c058819514c9f17a904156d74373b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9d9d12e0d0a5bfddd84b707e614697e9</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5c4f8c8db6b4b168e0890f2a91dba082</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7c6e77d3a3d5bef2803958d0e8576b4c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4a49d4dd08266c1899deff0e9801d62a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>86b5726b111f91e80d08ea66bef8a8c8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>afb46cd40662ffd9a82a6ec8d0e00541</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>65a9991b0227a3924fd05da97154f0dd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a31e5aaaa78db41b2e3ea503af687374</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1c380976e6cdbade3fdcfe3c55c836c2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4f2e75af490416c9c152f10fc31675a3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>538451b96271b7a5021bca9b07013089</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>77aedbfd68fc2307276487b308194918</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e6abede4a3893917aa13674e96dd4c6b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3b1bc848dcbbd0fabcf5f297fe38f764</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7b51128cd0d313bd8e8726e355d3ab17</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b47d24cb8f239cb177b7dd987059556c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>51de756fe22d81df4be52b35e31f6050</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>96f6c917cfd8c8697b1be74227474ca8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>af99700b4395a35ab0ad63fd11dfc818</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a4d123d3205ab37b62047a5060820de5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4d1bd79f0b60a4f0e682f630cab3a874</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4edb9629cd3d7224396314c8c4693ebb</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>846ddb9e522cfdf612ca003c40b917e3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cea1e23c2fa0879da9af640fe2974164</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f67672ad53754e616586f465c4658fe1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>00fa8df8eb6aa8950e890eb4466249bf</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>32449b90cb1945dcfc0ea8e8107e4efc</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ee01616c33432db4a74b36b191318845</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>39b53d327a92395c619dfd1e1fb6027c</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>900fdf4fb40468b4e246f419b5b776a3</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4edc6917d9f3152847bdf9878a64903f</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dd471d7c3f78bf1c9db149a6a8b531b3</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fa658a9f93ae453111776fd66603b31e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5c093899bb6b17a0c475b9173d61364a</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>25613f5721e95ef87a19b1133c2e0d5e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6bab523938c607d9fb3cf8996b6e8879</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b89a8a2110bced5635e1e4dedbc04d75</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3619d81473b11fb11db3448771aba337</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d440e2802ae9ea82ffeb6be67872c2f2</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>abbb1fce611b4ee044f0949d0e9079fc</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8dcc5e39f5b0255d2367b26ec49d43f7</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ef160b09cfe62738e88f4eab4a33b839</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>39c5ebdaf0d508a9ecdf186ea0925547</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c79ead3480e068445fe214461ba7048d</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0c618f47b2b598d3c86728b40f876417</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cd1d65cca6443dda2c02d97c24bbe1d9</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>10aaafb57bb39108224ad2198f54cc75</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f0a7d669088f63f14c128db9d4d151bd</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>40fca1dcf997c82df542a36c322da793</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>53c18d0ed16c87d31c4fa80af49ee0d8</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5841386b817c84292ce9c080f53cb079</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1686bb75f88ef0e82ec150a97d90edce</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5b67451d0799577739246b3e9dfad93a</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5fcb7ae689935bf70ff6c3d087444371</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b628938e51c58d7a51a0d6c9c48af0dc</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>de496ce83125862e25b3ce1239ada770</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3d5cb394c5b9e1d2a4d6554777cf4637</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVectorRef.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>OhmmsVectorRef_8h</filename>
    <class kind="struct">VectorRef</class>
  </compound>
  <compound kind="file">
    <name>OneBodyJastrowFunction.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>OneBodyJastrowFunction_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::OneBodyJastrow</class>
  </compound>
  <compound kind="file">
    <name>OneDimCubicSpline.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OneDimCubicSpline_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::OneDimCubicSplineFirst</class>
    <class kind="class">qmcplusplus::OneDimCubicSplinePBC</class>
    <class kind="class">qmcplusplus::OneDimCubicSpline</class>
  </compound>
  <compound kind="file">
    <name>OneDimGridBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OneDimGridBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::OneDimGridBase</class>
    <class kind="struct">qmcplusplus::LinearGrid</class>
    <class kind="struct">qmcplusplus::LogGrid</class>
    <class kind="struct">qmcplusplus::LogGridZero</class>
    <class kind="struct">qmcplusplus::NumericalGrid</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>64e15e2b3576cadd123220d101d4f5a8</anchor>
      <arglist>(std::ostream &amp;out, const OneDimGridBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDimGridFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OneDimGridFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::FunctorBase</class>
    <class kind="struct">qmcplusplus::OneDimGridFunctor</class>
    <class kind="class">qmcplusplus::OneDimConstFunctor</class>
  </compound>
  <compound kind="file">
    <name>OneDimIntegration.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OneDimIntegration_8h</filename>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>656fa951c2d9b2b18a90498eea5d69e6</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2_forward</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>ce385d4b29e74c2a575e5082a61651b4</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2_backward</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>25f2ac17a6cefd19aa8800448871a736</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>0665bc96f000dada8bc538136c832f1d</anchor>
      <arglist>(const GF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_RK2</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>987651837b8eecbca4d50125f7b3df5e</anchor>
      <arglist>(GF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Fn::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>dfda12acec4a8fc0263a0cc6e922c9eb</anchor>
      <arglist>(const GT &amp;grid, const Fn &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>dc773cdd6ac9ef381d7e92a8f3e9467c</anchor>
      <arglist>(const GF &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDimLinearSpline.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OneDimLinearSpline_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::OneDimLinearSpline</class>
  </compound>
  <compound kind="file">
    <name>OneDimNumGridFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OneDimNumGridFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::OneDimNumGridFunctor</class>
  </compound>
  <compound kind="file">
    <name>OptimizableFunctorBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>OptimizableFunctorBase_8h</filename>
    <class kind="struct">NumericTraits</class>
    <class kind="struct">NumericTraits&lt; double &gt;</class>
    <class kind="struct">NumericTraits&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">OptimizableFunctorBase</class>
    <class kind="struct">ComboFunctor</class>
  </compound>
  <compound kind="file">
    <name>OrbitalBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalBase_8h</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalBuilderBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalBuilderBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalBuilderBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalBuilderBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::OrbitalBuilderBase</class>
  </compound>
  <compound kind="file">
    <name>OrbitalConstraintsBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalConstraintsBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalConstraintsBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalConstraintsBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::OrbitalConstraintsBase</class>
  </compound>
  <compound kind="file">
    <name>OrbitalSetTraits.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalSetTraits_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::DummyGrid</class>
    <class kind="struct">qmcplusplus::OrbitalSetTraits</class>
    <member kind="typedef">
      <type>TinyVector&lt; int, 4 &gt;</type>
      <name>QuantumNumberType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>860a4dc608081201f3640f3ef53adbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_n</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959d8068d2cb884b47873780e108f093673c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_l</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959db0596726fa3a4f406e3fd9b208cb0b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_m</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959d9861701506e2b9b037307616a5097534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_s</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959d06bfb7c7a8582f244f4b3daa7d9bbfad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrbitalTraits.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>OrbitalTraits_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::OrbitalTraits</class>
    <class kind="struct">qmcplusplus::OrbitalTraits&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::OrbitalTraits&lt; std::complex&lt; double &gt; &gt;</class>
    <member kind="function">
      <type>double</type>
      <name>real</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e397e99e10925d0eef2e8e8d116a8a2c</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>real</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e21ea86db32d356ef104467d817f353e</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>real</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9f605e1368eae5a29e54c218289b8303</anchor>
      <arglist>(const TinyVector&lt; std::complex&lt; double &gt;, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateLogAndPhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5b94f6483ade760dde6a87d09f7a77fb</anchor>
      <arglist>(const T psi, T &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateLogAndPhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1788a09e2c6f28abd8bba98b7c636d16</anchor>
      <arglist>(const std::complex&lt; T &gt; &amp;psi, T &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>df40cfc93ddf6162a0815b4c79720495</anchor>
      <arglist>(const double psi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3180479fb8388a2d94e96f22ebf44587</anchor>
      <arglist>(const std::complex&lt; double &gt; &amp;psi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PadeBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>PadeBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PadeConstraints.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>PadeConstraints_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PadeConstraints.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>PadeConstraints_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PadeConstraints</class>
    <class kind="struct">qmcplusplus::ScaledPadeConstraints</class>
  </compound>
  <compound kind="file">
    <name>PadeFunctors.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>PadeFunctors_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PadeFunctor</class>
    <class kind="struct">qmcplusplus::Pade2ndOrderFunctor</class>
    <class kind="struct">qmcplusplus::ScaledPadeFunctor</class>
  </compound>
  <compound kind="file">
    <name>ParameterSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>ParameterSet_8h</filename>
    <class kind="struct">ParameterSet</class>
  </compound>
  <compound kind="file">
    <name>parse.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>parse_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>parse_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttrib.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleAttrib_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeafPA</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</class>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>93b01868a342885183e05e610c3ee34d</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>aac7ceec29b0c234bbb9d5605ee39b84</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>fdaa209d594c96bf2d63f6fe881f3920</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3875e65485b08c90471e84b45c49029d</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>70ebe2255a44c8bd7e94e51f95ed7823</anchor>
      <arglist>(const T1 &amp;, const ParticleAttrib&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a0d136ed797ab06a35d1e854b6ab6efe</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e5debf9ae8db7883fe9b870336333efa</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c79fa51f0ff26813927a420f40a985eb</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a862f0ffae9c00c2deaf40fe9dd6de64</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>15d9622a91547c429f03870ecfb1d826</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f004957c420ac1b16386c0c7394c50bc</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4c4c9ae514898f51b055b7d082cdca0a</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9709757e0f971b2f91d0c671c883b948</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>980648a7ae4145ac6d5cd9128c0d9e7c</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>26dc2a28890f2572e84beaf512015279</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7c9abb2b696113a5147f30861490344e</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>57821a01d7c6d9a7873a7c6c583d3588</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>eb66277dc2980e856e492e091e0b12fb</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7e02159ac9c2265bf3edf4be777daf7f</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b14e083c50862d28434917fe1a2f1c2c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8305b317ecd62fee7721455e37040448</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2c8ed34c0765bd06455d0d74ce893d47</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e5658181678ea3f01b12893fc6e8f365</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>914b95b2e823cc7a4dc5fd70aec55a8b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c05a272b5d5f7aacc9d50b332d05d8f1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>542533bd73afeb81871e9ca02ddec46c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5a59fd3f40d8d361ec158bb1c7dd20e3</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e91c3a2a2858b4befaf5b34c532787fa</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>af17ddd4e3ed68a945f3d18456f7a7fd</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d8a8af20e600725ebe48edfa729d9a95</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0804091b42e097ef8c07bfbb5b26a5a5</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a08202660f8c6a8e345470af063f2cfc</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ac46554986baa21eeec3756da873e4f1</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>763a51d841e58b83c66bf641ccd691db</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>803a7be987c3eed6875c04dcdd64a06c</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>88c6e9e76c90835aae190e32ffe44733</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c9f37aa7e606667a0dcd1288a5e651ea</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0c49c481b955b7d92bf33cfd3d9a745e</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d0566647f5323ae71a54a088fcb3de86</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7f9113e52e5b96d47369de4ba2a0dae6</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ddc3feda2a5a2293b4fd1c18556749c2</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9df490265375b125b608baeeb4529bad</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c9600039fe5daba748a420084fc1c6ed</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dea1e4680ccc7943658af8da941cd762</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2e7784ff5399d0a9316d065d9fa558f2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>70ae699eab88939f64f7fb91e7cdeb65</anchor>
      <arglist>(const T1 &amp;, const Expression&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>12c6a91f5a7671ff866910b64420f3d6</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4dad585a4db2338b52d7cb9ea461518a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>02fdf5f46c25ad0a168eac9f3adea308</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>51134f7eba708e9aa2f8304ae2408eb6</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0782b0fb57edb500cd8734dc41ee806c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9914771db9863a0bb3be07d1e21aab24</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>80ba2677e2bfa261d86323b3a3612b3e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7eb9ce77f5dc81d289c63aa0d3fe4ddd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c8c3e74da618540823b4c2c0ec017ac6</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7aca9620f548ae58096183e21334dafd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>91d152b80655a21e554227b0b2f4929e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9cd7594d0ab6d7494a1fdf94d34fe333</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a8159514f0a4bbaa404302d6351122e1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dd0c97ecff3f5fb0e81a4fecbd162e2d</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4c4ae53c91bb2b700567a0c9a231472e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c9e4527452e4f31d51e314c8a30a04ca</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a8f9844af9cdeb6ed10ff8c56df6c1a9</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8ca8c5a1ec5c3d79ec4879bd747d7909</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ba0e1ea7f6ec0b60e32890e76c81033e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3c489ce63d3e9aaea8cd44f795fe86af</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1838c8e6713718c9bcc1fbc6dc4a188d</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>946cd1897a16c84013dc71b3ef24b453</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>45dcfe19aea98ff6d49953538775a42f</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>74d1cbe820fb23c5a601f3fd19363e53</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>53332662a5d67e9e2715a93361c778bb</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8d94dcf98d9822911f8853441b91763c</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3456845d0c0d64fa47c15ab64ebbef7d</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>da6b8f90408f397d7b9c33cdd492fc6e</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>84c2a3f0d9c572125a305d29476c0045</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9a08c41e559a4bda7790a899e50d66cc</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>714de010a8118c95a72b859ec0af7785</anchor>
      <arglist>(ParticleAttrib&lt; T &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ec00b3397ee25e01963358c29ffd0586</anchor>
      <arglist>(std::ostream &amp;out, const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttrib.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleAttrib_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ParticleAttrib</class>
    <member kind="define">
      <type>#define</type>
      <name>DEBUGMSG</name>
      <anchorfile>ParticleAttrib_8h.html</anchorfile>
      <anchor>ed6d1186912238eabd7672078a396423</anchor>
      <arglist>(msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttribOps.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleAttribOps_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <class kind="struct">APPNAMESPACE::OTCDot</class>
    <class kind="struct">APPNAMESPACE::OTCDot&lt; T1, T2, 1 &gt;</class>
    <class kind="struct">APPNAMESPACE::OTCDot&lt; T1, T2, 2 &gt;</class>
    <class kind="struct">APPNAMESPACE::OTCDot&lt; T1, T2, 3 &gt;</class>
    <class kind="struct">APPNAMESPACE::PAOps</class>
    <class kind="struct">APPNAMESPACE::PAOps&lt; T, 3 &gt;</class>
    <class kind="struct">APPNAMESPACE::PAOps&lt; T, 2 &gt;</class>
    <member kind="function">
      <type>double</type>
      <name>Dot</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>393299d33df754526e80ccf6bb0f51c2</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; std::complex&lt; double &gt;, D &gt; &gt; &amp;pa, const ParticleAttrib&lt; TinyVector&lt; std::complex&lt; double &gt;, D &gt; &gt; &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sum</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6deb3287ce36744b3ea963eee9f3a37b</anchor>
      <arglist>(const ParticleAttrib&lt; std::complex&lt; double &gt; &gt; &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0308248c93cb36db700c79c051b926c9</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; std::complex&lt; T &gt;, D &gt; &gt; &amp;c, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b3ff92deaefd4870227cd28f0a84cb8b</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;c, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ParticleBase</class>
  </compound>
  <compound kind="file">
    <name>ParticleFunctions.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleFunctions_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>PartitionGrid</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d7697c2472ea78da2003798f9b4442b3</anchor>
      <arglist>(PL &amp;lattice, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2a0215b2a293bbeed02c508611c72c7d</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCellOMP</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f2bf412a4a31b23bb98e58fbc2638cdc</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ce4d9b9ad5958c4058f746bda1707c3e</anchor>
      <arglist>(PT &amp;inout_, GIV &amp;uc_grid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleMessage.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleMessage_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>ParticleMessage_8h.html</anchorfile>
      <anchor>bda6ea0426de8a17732c220425609922</anchor>
      <arglist>(T &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleSet.BC.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>ParticleSet_8BC_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSet.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>ParticleSet_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>ParticleSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ParticleSet</class>
  </compound>
  <compound kind="file">
    <name>ParticleSetPool.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>ParticleSetPool_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSetPool.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>ParticleSetPool_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ParticleSetPool</class>
  </compound>
  <compound kind="file">
    <name>ParticleTags.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/</path>
    <filename>ParticleTags_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>ParticleTags.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/</path>
    <filename>ParticleTags_8h</filename>
    <class kind="struct">ParticleTags</class>
  </compound>
  <compound kind="file">
    <name>ParticleUtility.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>ParticleUtility_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4dbe74cb87bd15b7586a37de97dbae72</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9cd016f030895e7d7ad0fc602ed6bdce</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>555ef7beb1b5a30a76ecb794a9a06a8a</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrapAroundBox</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8d55013e5634bda527a70b69d69a83c8</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>84beef2b52def70413de960c563f24f1</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &amp;pa, const ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sum</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f90a7c1e5437d1b42f23c9e93002edac</anchor>
      <arglist>(const ParticleAttrib&lt; double &gt; &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>63088a51dc77b87b69ca36af1dd810d5</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;pa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PC.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>PC_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>PC_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PLayoutFunctions.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>PLayoutFunctions_8h</filename>
    <namespace>OHMMS</namespace>
    <class kind="struct">OHMMS::PLayoutFunc</class>
  </compound>
  <compound kind="file">
    <name>PolarizationEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>PolarizationEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PolarizationEstimator</class>
  </compound>
  <compound kind="file">
    <name>PolarizationPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>PolarizationPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PolarizationPotential</class>
  </compound>
  <compound kind="file">
    <name>PolarizedJastrow.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>PolarizedJastrow_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PolarizedJastrow</class>
  </compound>
  <compound kind="file">
    <name>PolymerChain.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>PolymerChain_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PolymerChain</class>
  </compound>
  <compound kind="file">
    <name>PolymerEstimator.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>PolymerEstimator_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PolymerEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>PolymerEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PolymerEstimator</class>
  </compound>
  <compound kind="file">
    <name>PooledData.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>PooledData_8h</filename>
    <class kind="class">PooledData</class>
  </compound>
  <compound kind="file">
    <name>ProjectData.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>ProjectData_8cpp</filename>
    <namespace>OHMMS</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectData.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>ProjectData_8h</filename>
    <namespace>OHMMS</namespace>
    <class kind="struct">OHMMS::ProjectData</class>
    <member kind="define">
      <type>#define</type>
      <name>OHHMS_PROJECTDATA_H__</name>
      <anchorfile>ProjectData_8h.html</anchorfile>
      <anchor>6f7a31aa8e113d4440a2a8863677319c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PWBasis.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWBasis_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWBasis.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWBasis_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PWBasis</class>
  </compound>
  <compound kind="file">
    <name>PWOrbitalBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWOrbitalBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWOrbitalBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWOrbitalBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PWOrbitalBuilder</class>
  </compound>
  <compound kind="file">
    <name>PWOrbitalSet.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWOrbitalSet_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWOrbitalSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWOrbitalSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::PWOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>PWParameterSet.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWParameterSet_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>PWParameterSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/PlaneWave/</path>
    <filename>PWParameterSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::PWParameterSet</class>
  </compound>
  <compound kind="file">
    <name>qmcapp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>qmcapp_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>qmcapp_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QMCAppBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCAppBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCAppBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCAppBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCAppBase</class>
  </compound>
  <compound kind="file">
    <name>QMCCostFunction.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCCostFunction_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCCostFunction.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCCostFunction_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCCostFunction</class>
  </compound>
  <compound kind="file">
    <name>QMCDriver.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCDriver_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriver.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCDriver_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCDriver</class>
  </compound>
  <compound kind="file">
    <name>QMCDriverFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCDriverFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriverFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCDriverFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::QMCDriverFactory</class>
  </compound>
  <compound kind="file">
    <name>QMCGaussianParserBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>QMCGaussianParserBase_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>QMCGaussianParserBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>QMCGaussianParserBase_8h</filename>
    <class kind="struct">QMCGaussianParserBase</class>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonian.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>QMCHamiltonian_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonian.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>QMCHamiltonian_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCHamiltonian</class>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonianBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>QMCHamiltonianBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::NonLocalData</class>
    <class kind="struct">qmcplusplus::QMCHamiltonianBase</class>
  </compound>
  <compound kind="file">
    <name>QMCInterface.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCInterface_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>std::map&lt; std::string, HamiltonianFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3aa759b860226e361d07cfd7b12fca7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QMCInterface.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCInterface_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCInterface</class>
  </compound>
  <compound kind="file">
    <name>QMCMain.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCMain_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCMain.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>QMCMain_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCMain</class>
  </compound>
  <compound kind="file">
    <name>QMCOptimize.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCOptimize_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCOptimize.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCOptimize_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCOptimize</class>
  </compound>
  <compound kind="file">
    <name>QMCUpdateBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCUpdateBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>QMCUpdateBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>QMCUpdateBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::QMCUpdateBase</class>
  </compound>
  <compound kind="file">
    <name>QMCUtilities.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>QMCUtilities_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>determineNumOfElectrons</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ae8cd7b74758d1270a228f51fe91ecb5</anchor>
      <arglist>(ParticleSet &amp;el, xmlXPathContextPtr acontext)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RadialFunctorUtility.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>RadialFunctorUtility_8h</filename>
    <member kind="function">
      <type>T</type>
      <name>Phisq_x_Yk</name>
      <anchorfile>RadialFunctorUtility_8h.html</anchorfile>
      <anchor>1341ce4f47ccb8cff57b38a66b9c4a13</anchor>
      <arglist>(const GF &amp;g, const GF &amp;a, const GF &amp;b, T prefactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ykofr</name>
      <anchorfile>RadialFunctorUtility_8h.html</anchorfile>
      <anchor>4ac86d8dacb362477a915e599a3a3a95</anchor>
      <arglist>(GF &amp;g, const GF &amp;a, const GF &amp;b, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Make_Loc_Pot</name>
      <anchorfile>RadialFunctorUtility_8h.html</anchorfile>
      <anchor>e1bff926718b4a33af26b837c269023d</anchor>
      <arglist>(GF &amp;g, const GF &amp;y, const GF &amp;a, const GF &amp;b, typename GF::value_type coeff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RadialOrbitalBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>RadialOrbitalBase_8h</filename>
    <class kind="struct">RadialOrbitalBase</class>
    <class kind="struct">RadialOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>RandomFunctors.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>RandomFunctors_8h</filename>
    <class kind="class">RandomUniformPos</class>
    <class kind="class">RandomUniformPos&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="class">RandomUniformPos&lt; TinyVector&lt; double, 2 &gt;, RNG &gt;</class>
    <class kind="struct">NormRandomSeq</class>
    <class kind="struct">NormRandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</class>
    <class kind="struct">NormRandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="struct">RandomSeq</class>
    <class kind="struct">RandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</class>
    <class kind="struct">RandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="struct">RandomVector</class>
    <class kind="struct">RandomSequence</class>
    <class kind="struct">RandomSequence&lt; vector&lt; T &gt;, RNG &gt;</class>
    <class kind="struct">RandomSequence&lt; vector&lt; double &gt;, RNG &gt;</class>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>RandomGenerator_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>RandomGenerator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="typedef">
      <type>RandRandom</type>
      <name>RandomGenerator_t</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>51b76f7e3eedeadbb3b39f79e540323b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t</type>
      <name>Random</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>14c33e7b3737488688dc4193fa59fccd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomNumberControl.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>RandomNumberControl_8cpp</filename>
    <namespace>OHMMS</namespace>
  </compound>
  <compound kind="file">
    <name>RandomNumberControl.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsApp/</path>
    <filename>RandomNumberControl_8h</filename>
    <namespace>OHMMS</namespace>
    <class kind="class">OHMMS::RandomNumberControl</class>
  </compound>
  <compound kind="file">
    <name>RandomSeqGenerator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/ParticleBase/</path>
    <filename>RandomSeqGenerator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>assignGaussRand</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>933763b3704893af5b8da5dca83ce73c</anchor>
      <arglist>(T *restrict a, unsigned n, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignUniformRand</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>fddfe8fc099267eb394aae9e9f9984f1</anchor>
      <arglist>(T *restrict a, unsigned n, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c68d008106afb96324008ccf2e9d34ea</anchor>
      <arglist>(Matrix&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d64301e083c4deac82872378c35a0508</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a0b0a9c482c0ff66c0c10bfb73d8b075</anchor>
      <arglist>(ParticleAttrib&lt; double &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>cfb7f31f454ee5b0277ca8670469cf0e</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3617ae57f0247ddc1e4e85ec15778d43</anchor>
      <arglist>(ParticleAttrib&lt; double &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSphereRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ce5382fcf6f87fd5d476631b3e14c975</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandomWithEngine</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1c1ec6b22d72271f89b92d038c1332e6</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a, RG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandRandom.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>RandRandom_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>struct_t</name>
      <anchorfile>RandRandom_8cpp.html</anchorfile>
      <anchor>d2e3a41c7112fbd37479ba224a10fc7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandRandom.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>RandRandom_8h</filename>
    <class kind="class">RandRandom</class>
  </compound>
  <compound kind="file">
    <name>RecordProperty.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsData/</path>
    <filename>RecordProperty_8h</filename>
    <class kind="struct">RecordProperty</class>
    <class kind="class">RecordPropertyList</class>
    <class kind="struct">RecordNamedProperty</class>
  </compound>
  <compound kind="file">
    <name>ReptationMC.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>ReptationMC_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ReptationMC.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>ReptationMC_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ReptationMC</class>
  </compound>
  <compound kind="file">
    <name>RGFBuilderBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>RGFBuilderBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RGFBuilderBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>RGFBuilderBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::RGFBuilderBase</class>
  </compound>
  <compound kind="file">
    <name>RPAConstraints.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>RPAConstraints_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RPAConstraints.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>RPAConstraints_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::RPAConstraints</class>
    <class kind="struct">qmcplusplus::RPAPBCConstraints</class>
    <class kind="struct">qmcplusplus::ShortRangePartAdapter</class>
  </compound>
  <compound kind="file">
    <name>RPAJastrow.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>RPAJastrow_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::RPAJastrow</class>
  </compound>
  <compound kind="file">
    <name>RQMCMultiple.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>RQMCMultiple_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RQMCMultiple.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>RQMCMultiple_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::RQMCMultiple</class>
  </compound>
  <compound kind="file">
    <name>RQMCMultipleEstimator.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>RQMCMultipleEstimator_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RQMCMultipleEstimator.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>RQMCMultipleEstimator_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::RQMCEstimator</class>
  </compound>
  <compound kind="file">
    <name>RQMCMultiWarp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>RQMCMultiWarp_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>RQMCMultiWarp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>RQMCMultiWarp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::RQMCMultiWarp</class>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>ScalarEstimatorBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::ScalarEstimatorBase</class>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorManager.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>ScalarEstimatorManager_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QMC_ASYNC_COLLECT</name>
      <anchorfile>ScalarEstimatorManager_8cpp.html</anchorfile>
      <anchor>8cdcd3690c34f78f71d58bcc161c6a91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorManager.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Estimators/</path>
    <filename>ScalarEstimatorManager_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ScalarEstimatorManager</class>
  </compound>
  <compound kind="file">
    <name>SimpleFixedNodeBranch.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>SimpleFixedNodeBranch_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleFixedNodeBranch.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>SimpleFixedNodeBranch_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::SimpleFixedNodeBranch</class>
  </compound>
  <compound kind="file">
    <name>SimpleParser.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>SimpleParser_8cpp</filename>
    <member kind="function">
      <type>char *</type>
      <name>readLine</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>d210be08a283a1ddfb28b03db993a860</anchor>
      <arglist>(char *s, int max, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>4760668597a0f36a5082d8cb9538ed59</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>625640ccdb38f908abb169dc4a2533f4</anchor>
      <arglist>(char *inbuf, list&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>cedb0fc35a7c7cd668442b7bcc234854</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readXmol</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>d19019cb09e80e22655ec5b705e6195f</anchor>
      <arglist>(istream &amp;fxmol, double *data, int numvar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>d2476014a964fcd1e6a5c076b4b0a7d0</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *field, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>0e9cce3ddc11baac1e13cfc5725a7a23</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parseXwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>1c437d2e794d339a0cf68dd2205f3895</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>533087dfebcf2150ddbb8af51579097a</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>6892813437315314be864e9ccc86bfa4</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleParser.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>SimpleParser_8h</filename>
    <class kind="struct">OhmmsAsciiParser</class>
    <member kind="function">
      <type>char *</type>
      <name>readLine</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>d210be08a283a1ddfb28b03db993a860</anchor>
      <arglist>(char *s, int max, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>cedb0fc35a7c7cd668442b7bcc234854</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>d2476014a964fcd1e6a5c076b4b0a7d0</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *field, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>0e9cce3ddc11baac1e13cfc5725a7a23</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>533087dfebcf2150ddbb8af51579097a</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>6892813437315314be864e9ccc86bfa4</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fpos, const char *terminate)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>4760668597a0f36a5082d8cb9538ed59</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>625640ccdb38f908abb169dc4a2533f4</anchor>
      <arglist>(char *inbuf, list&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readXmol</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>3988bcbedfa2819d560fbfd7b88415de</anchor>
      <arglist>(istream &amp;, double *, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SingleParticleOrbitalSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SingleParticleOrbitalSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::SingleParticleOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>SinglePtclWarp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>SinglePtclWarp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::SinglePtclWarp</class>
  </compound>
  <compound kind="file">
    <name>SlaterBasisSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>SlaterBasisSet_8h</filename>
    <class kind="struct">SlaterCombo</class>
  </compound>
  <compound kind="file">
    <name>SlaterDet.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>SlaterDet_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>SlaterDet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::SlaterDet</class>
  </compound>
  <compound kind="file">
    <name>SlaterDetBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>SlaterDetBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SlaterDetBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Fermion/</path>
    <filename>SlaterDetBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::SlaterDetBuilder</class>
  </compound>
  <compound kind="file">
    <name>SlaterDeterminant.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SlaterDeterminant_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::SlaterDeterminant</class>
  </compound>
  <compound kind="file">
    <name>SlaterTypeOrbital.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>SlaterTypeOrbital_8h</filename>
    <class kind="struct">STONorm</class>
    <class kind="struct">GenericSTO</class>
    <class kind="struct">RadialSTO</class>
  </compound>
  <compound kind="file">
    <name>SpaceWarp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>SpaceWarp_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SpaceWarp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>SpaceWarp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::SpaceWarp</class>
  </compound>
  <compound kind="file">
    <name>SpeciesSet.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>SpeciesSet_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>SpeciesSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>SpeciesSet_8h</filename>
    <class kind="class">SpeciesSet</class>
  </compound>
  <compound kind="file">
    <name>SphericalBasisSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SphericalBasisSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::SphericalBasisSet</class>
  </compound>
  <compound kind="file">
    <name>SphericalOrbitalSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SphericalOrbitalSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::SphericalOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>SphericalTensor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>SphericalTensor_8h</filename>
    <class kind="class">SphericalTensor</class>
    <class kind="struct">SCTFunctor</class>
    <class kind="struct">SCTFunctor&lt; SCT, 1 &gt;</class>
    <class kind="struct">SCTFunctor&lt; SCT, 2 &gt;</class>
    <class kind="struct">SCTFunctor&lt; SCT, 3 &gt;</class>
  </compound>
  <compound kind="file">
    <name>spline.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>spline_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION</name>
      <anchorfile>spline_8cpp.html</anchorfile>
      <anchor>5c98f329f324caf3d6d5348c33cc24d6</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DFUNCTION</name>
      <anchorfile>spline_8cpp.html</anchorfile>
      <anchor>a660c901ed494f06f3e12ca0ce24fde6</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>spline_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline3.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>spline3_8cpp</filename>
    <class kind="struct">TestFunc</class>
    <class kind="struct">ComboFunc</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>spline3_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline3_io.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>spline3__io_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>spline3__io_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline3DBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Spline3D/</path>
    <filename>Spline3DBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>Spline3DBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Spline3D/</path>
    <filename>Spline3DBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::Spline3DBuilder</class>
  </compound>
  <compound kind="file">
    <name>Spline3DPotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>Spline3DPotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::Spline3DPotential</class>
  </compound>
  <compound kind="file">
    <name>SplineFunctors.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>SplineFunctors_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::CubicBsplineSingle</class>
    <class kind="struct">qmcplusplus::CubicSplineBasisSet</class>
  </compound>
  <compound kind="file">
    <name>SplineSetBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SplineSetBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SplineSetBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SplineSetBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::SplineSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>SPOSetBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SPOSetBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>SPOSetBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>SPOSetBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::SPOSetBase</class>
    <member kind="typedef">
      <type>SPOSetBase *</type>
      <name>SPOSetBasePtr</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d4680676138e960c2c7e3157082a33ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SprngRandom.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>SprngRandom_8h</filename>
    <class kind="class">SprngRandom</class>
    <member kind="define">
      <type>#define</type>
      <name>SRSEED</name>
      <anchorfile>SprngRandom_8h.html</anchorfile>
      <anchor>532002b980a3812602cb62b776ee2950</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STO2GridBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STO2GridBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>STO2GridBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STO2GridBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::STO2GridBuilder</class>
  </compound>
  <compound kind="file">
    <name>STOBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STOBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>STOBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STOBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::STOBuilder</class>
  </compound>
  <compound kind="file">
    <name>STOMolecularOrbitals.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STOMolecularOrbitals_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>STOMolecularOrbitals.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STOMolecularOrbitals_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::STOMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>SymmetricDistanceTableData.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>SymmetricDistanceTableData_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::SymmetricDTD</class>
  </compound>
  <compound kind="file">
    <name>Tensor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>Tensor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::Tensor</class>
    <class kind="class">qmcplusplus::Tensor::DontInitialize</class>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>12d4d37dafa389c725c01d0bbc224c71</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt;</type>
      <name>transpose</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>6ce2d3d81e74beaa3b96589f8c1c13ad</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1f3e53498acd6eb599b24a445aeb8894</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;a, const Tensor&lt; T, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>traceAtB</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8a35343ab76427db616d040ca48538f1</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;a, const Tensor&lt; T, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>47e5769af409e2fe0d516636707dc20b</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>cf5566eb1a9301687a3d752a9aee975c</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a716f4321f73c8f080c7d2a29276a029</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7ae3649cef537dc469bb720da2ae613f</anchor>
      <arglist>(std::ostream &amp;out, const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3e811fb31a6eb6eaea32abc39a811cb0</anchor>
      <arglist>(std::istream &amp;is, Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminal.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyGeminal_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1096df5de6472d72205270e27bd47750</anchor>
      <arglist>(Matrix&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminal.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyGeminal_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ThreeBodyGeminal</class>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminalBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyGeminalBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyGeminalBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyGeminalBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ThreeBodyGeminalBuilder</class>
  </compound>
  <compound kind="file">
    <name>ThreeBodyPade.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyPade_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ThreeBodyPade</class>
    <class kind="struct">qmcplusplus::ThreeBodyPade::Coeff</class>
  </compound>
  <compound kind="file">
    <name>ThreeBodyPadeBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyPadeBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>ThreeBodyPadeBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>ThreeBodyPadeBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::ThreeBodyPadeBuilder</class>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>Timer_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::Timer</class>
  </compound>
  <compound kind="file">
    <name>TinyMatrixRef.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>TinyMatrixRef_8h</filename>
    <class kind="class">TinyMatrixRef</class>
  </compound>
  <compound kind="file">
    <name>TinyVector.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/OhmmsPETE/</path>
    <filename>TinyVector_8h</filename>
    <namespace>APPNAMESPACE</namespace>
    <class kind="class">APPNAMESPACE::TinyVector</class>
    <class kind="class">APPNAMESPACE::TinyVector::DontInitialize</class>
    <class kind="struct">APPNAMESPACE::printTinyVector</class>
    <class kind="struct">APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</class>
    <class kind="struct">APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</class>
    <member kind="function">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>dot</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>83371ee4fee8d2ecad002c97656c0b5a</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e0fc334b563c0bd255bd3d19c6f450ed</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>outerProduct</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>118fe5f0df4586101e66449f66722731</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7cea1688ca63001b09e61b76c47063a6</anchor>
      <arglist>(std::ostream &amp;out, const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b80ab8bbe321487a53f6c38deff942c0</anchor>
      <arglist>(std::istream &amp;is, TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transform2GridFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>Transform2GridFunctor_8h</filename>
    <class kind="struct">Transform2GridFunctorBase</class>
    <class kind="struct">Transform2GridFunctor</class>
    <class kind="struct">TestTransform</class>
    <member kind="function">
      <type>Transform2GridFunctorBase&lt; FnOut &gt; *</type>
      <name>createTransform2GridFunctor</name>
      <anchorfile>Transform2GridFunctor_8h.html</anchorfile>
      <anchor>866681c2102b72237b6befb1d5cb86b7</anchor>
      <arglist>(FnIn &amp;in, FnOut &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>TrialWaveFunction_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>TrialWaveFunction_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TrialWaveFunction</class>
  </compound>
  <compound kind="file">
    <name>TricubicBsplineGrid.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>TricubicBsplineGrid_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>TricubicBsplineGrid.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>TricubicBsplineGrid_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::TricubicBsplineGrid</class>
    <class kind="struct">qmcplusplus::TricubicBsplineTraits</class>
  </compound>
  <compound kind="file">
    <name>TricubicBsplineSet.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>TricubicBsplineSet_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TricubicBspline</class>
    <class kind="class">qmcplusplus::TricubicBsplineVector</class>
    <class kind="class">qmcplusplus::TricubicBsplineSet</class>
  </compound>
  <compound kind="file">
    <name>TricubicBsplineSetBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>TricubicBsplineSetBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TricubicBsplineSetBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>TricubicBsplineSetBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TricubicBsplineSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>TriCubicSplineBuilder.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>TriCubicSplineBuilder_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>TriCubicSplineBuilder.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>TriCubicSplineBuilder_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TriCubicSplineBuilder</class>
    <member kind="define">
      <type>#define</type>
      <name>QMCPLUSPLUS_TRICUBICSPLINE3DBUILDER_H</name>
      <anchorfile>TriCubicSplineBuilder_8h.html</anchorfile>
      <anchor>e5a8be1c56e09a39e19b5d8a17752029</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriCubicSplinePotential.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>TriCubicSplinePotential_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::TriCubicSplinePotential</class>
  </compound>
  <compound kind="file">
    <name>TriCubicSplineT.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>TriCubicSplineT_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TriCubicSplineT</class>
  </compound>
  <compound kind="file">
    <name>TruncatedPadeFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>TruncatedPadeFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::TruncatedPadeFunctor</class>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowFunction.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>TwoBodyJastrowFunction_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TwoBodyJastrow</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</class>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowFunction.Shared.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>TwoBodyJastrowFunction_8Shared_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</class>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowOrbital.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>TwoBodyJastrowOrbital_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbital</class>
  </compound>
  <compound kind="file">
    <name>UOverRN.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>UOverRN_8h</filename>
    <class kind="struct">UOverRN</class>
  </compound>
  <compound kind="file">
    <name>UtilityFunctions.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>UtilityFunctions_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>FairDivide</name>
      <anchorfile>UtilityFunctions_8h.html</anchorfile>
      <anchor>108c45e932ea877dfce9a4e31ba4638b</anchor>
      <arglist>(int ntot, int npart, IV &amp;adist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FairDivideLow</name>
      <anchorfile>UtilityFunctions_8h.html</anchorfile>
      <anchor>e8a2196a42dee3e6bfa9efef64a8643e</anchor>
      <arglist>(int ntot, int npart, IV &amp;adist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VMC.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMC_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMC.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMC_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMC</class>
  </compound>
  <compound kind="file">
    <name>VMCFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::VMCFactory</class>
  </compound>
  <compound kind="file">
    <name>VMCMoveAll.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCMoveAll_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMoveAll.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCMoveAll_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCMoveAll</class>
  </compound>
  <compound kind="file">
    <name>VMCMultiple.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCMultiple_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMultiple.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCMultiple_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCMultiple</class>
  </compound>
  <compound kind="file">
    <name>VMCMultipleWarp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCMultipleWarp_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMultipleWarp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCMultipleWarp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
  </compound>
  <compound kind="file">
    <name>VMCParticleByParticle.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCParticleByParticle_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCParticleByParticle.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCParticleByParticle_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCParticleByParticle</class>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiple.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCPbyPMultiple_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiple.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCPbyPMultiple_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiWarp.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCPbyPMultiWarp_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiWarp.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCPbyPMultiWarp_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
  </compound>
  <compound kind="file">
    <name>VMCSingle.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCSingle_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCSingle.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCSingle_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCSingle</class>
  </compound>
  <compound kind="file">
    <name>VMCSingleOMP.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCSingleOMP_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCSingleOMP.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCSingleOMP_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
  </compound>
  <compound kind="file">
    <name>VMCUpdateAll.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCUpdateAll_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCUpdateAll.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCUpdateAll_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
  </compound>
  <compound kind="file">
    <name>VMCUpdatePbyP.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCUpdatePbyP_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>VMCUpdatePbyP.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/VMC/</path>
    <filename>VMCUpdatePbyP_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
  </compound>
  <compound kind="file">
    <name>Walker.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Particle/</path>
    <filename>Walker_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::Walker</class>
    <member kind="enumvalue">
      <name>LOGPSI</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef630142ddfe126d6eb24aac3b03728932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGN</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef5b93f763209b6cd8f66e596cfd68a405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMBRELLAWEIGHT</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef2c12f7c356d9765ebfc5fa2009e81409</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALENERGY</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef10331b2664739bf5ee5d915d99453a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALPOTENTIAL</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6efd67da3d4c873cbcae7d2ade8cfe6d329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMPROPERTIES</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef28edeaee2b0ee2461b72517771d35344</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>914374782a662f74aedf9932fdd27fdb</anchor>
      <arglist>(ostream &amp;out, const Walker&lt; T, PA &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlBase.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>WalkerControlBase_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>void</type>
      <name>Write2XYZ</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8abf140dbe4cdb87e818240db7828b46</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlBase.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>WalkerControlBase_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::WalkerControlBase</class>
  </compound>
  <compound kind="file">
    <name>WalkerControlFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerControlFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>WalkerControlBase *</type>
      <name>CreateWalkerController</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>428bcd23d095416ec6db3b3df1ba451f</anchor>
      <arglist>(bool reconfig, int &amp;swapmode, int nideal, int nmax, int nmin, WalkerControlBase *wc, Communicate *comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerControlFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>WalkerControlBase *</type>
      <name>CreateWalkerController</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>428bcd23d095416ec6db3b3df1ba451f</anchor>
      <arglist>(bool reconfig, int &amp;swapmode, int nideal, int nmax, int nmin, WalkerControlBase *wc, Communicate *comm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WalkerControlMPI.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerControlMPI_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>WalkerControlMPI.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerControlMPI_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::WalkerControlMPI</class>
  </compound>
  <compound kind="file">
    <name>WalkerReconfiguration.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerReconfiguration_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>WalkerReconfiguration.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerReconfiguration_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::WalkerReconfiguration</class>
  </compound>
  <compound kind="file">
    <name>WalkerReconfigurationMPI.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerReconfigurationMPI_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>WalkerReconfigurationMPI.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/DMC/</path>
    <filename>WalkerReconfigurationMPI_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::WalkerReconfigurationMPI</class>
  </compound>
  <compound kind="file">
    <name>WaveFunctionFactory.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>WaveFunctionFactory_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionFactory.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/</path>
    <filename>WaveFunctionFactory_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::WaveFunctionFactory</class>
  </compound>
  <compound kind="file">
    <name>WaveFunctionPool.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>WaveFunctionPool_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionPool.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCApp/</path>
    <filename>WaveFunctionPool_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::WaveFunctionPool</class>
  </compound>
  <compound kind="file">
    <name>WaveFunctionTester.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>WaveFunctionTester_8cpp</filename>
    <namespace>qmcplusplus</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionTester.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCDrivers/</path>
    <filename>WaveFunctionTester_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="class">qmcplusplus::WaveFunctionTester</class>
  </compound>
  <compound kind="file">
    <name>WMFunctor.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCWaveFunctions/Jastrow/</path>
    <filename>WMFunctor_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::WMFunctor</class>
  </compound>
  <compound kind="file">
    <name>XMLTemplate.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Utilities/</path>
    <filename>XMLTemplate_8h</filename>
    <namespace>OHMMS</namespace>
    <member kind="function">
      <type>void</type>
      <name>printXML</name>
      <anchorfile>namespaceOHMMS.html</anchorfile>
      <anchor>c0b2cfd97701a515b165376b1b801791</anchor>
      <arglist>(const T &amp;, ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XYZCubicGrid.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/Numerics/</path>
    <filename>XYZCubicGrid_8h</filename>
    <namespace>qmcplusplus</namespace>
    <class kind="struct">qmcplusplus::XYZCubicGrid</class>
  </compound>
  <compound kind="file">
    <name>Ylm.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>Ylm_8cpp</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>double</type>
      <name>LegendrePll</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>203c4dfc8e344a719c6cda1e89c81480</anchor>
      <arglist>(int l, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LegendrePlm</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2322f2bb52ffb12dacbbc3f2de216c61</anchor>
      <arglist>(int l, int m, double x)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>Ylm</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>52ab36f47db4b10c7752f544017283b6</anchor>
      <arglist>(int l, int m, TinyVector&lt; double, 3 &gt; r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ylm.h</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCHamiltonians/</path>
    <filename>Ylm_8h</filename>
    <namespace>qmcplusplus</namespace>
    <member kind="function">
      <type>double</type>
      <name>LegendrePll</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>203c4dfc8e344a719c6cda1e89c81480</anchor>
      <arglist>(int l, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LegendrePlm</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2322f2bb52ffb12dacbbc3f2de216c61</anchor>
      <arglist>(int l, int m, double x)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>Ylm</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>52ab36f47db4b10c7752f544017283b6</anchor>
      <arglist>(int l, int m, TinyVector&lt; double, 3 &gt; r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ylmtest.cpp</name>
    <path>/home/tomcat_secure/qmcpack/doxygen/qmcpack-trunk/src/QMCTools/</path>
    <filename>ylmtest_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ylmtest_8cpp.html</anchorfile>
      <anchor>3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>XMLTags</name>
    <title>Reserved XML tags</title>
    <filename>group__XMLTags.html</filename>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>null_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gc863be1ca79f32a24a1c60d8e679bb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>indextype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gc1f0bdbc199db7fdf4e827d876782464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>scalartype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g657a0b26a0aee1db708979cd497fff8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>stringtype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g07cabf58fc65aaf31855b42fda3afd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>postype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gf1b5fe579091ee4a6f713579a8302d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>tensortype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gb5876fa616801bd84212043350500b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>xmoltype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gaea56dac0a8ceab4c198c94452243b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>position_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g779eb89399e955148b459ac171b9d47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>id_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga231bef424a89fde5295a98a3ae1d6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>ionid_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g85572f7f649a3bd7092f719ab283ebd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>trajectory_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g80ce076bc4e3175aa0d690879e461e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>force_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gd14728a1b2bac855e6ccc4d8e82c57a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>velocity_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g87bbc0237bf94d436c3d4c4d83deb219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>energy_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g60e9985a5c241014e41c2f164be5f678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sumbc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g7cc2bc667172a5c540ccb2b5d597d51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>root_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g3b9f996b0dc39268a061ee6fff71807e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>attrib_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g64efa4143e857e1145acca003f911096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>name_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gffb4f9d110daca2d0f2ebeaf0f349b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>datatype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g867c72183586652d122914a364de821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>condition_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g89b93b4ba0bb5e0f33c5ca4f7cd48dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>size_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga07d635d0fb2071531a063784d6e7a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>format_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g668fe55a2e4daf770f8bb371008efcf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>role_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g3593878862c51350f1eb52fdf31616b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>wfs_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g9480abc72414d89a385630e26850716c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>param_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gf01c636011226c7de742936c78f31618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>dtable_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g7dd23d90e7a1fbcaf49dca6802b2bdd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>jastrow_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g64d9d287f97edfe31dbe16d5049948cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>detset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g99c8ca906fb2cf0c81abf7b96811ac92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sd_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gd1416453e3026bb3f65ec604a70a6de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>det_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gb92b048ccae15f908d14b672239d61b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>spo_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gc2f03bc9ab5b4820f94001b76a1ef292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g05412d963effcb0452ccf9d18a0c3426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basis_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g87b3ff5208ea2a0358181f2657639703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisfunc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ge39a24a7256ea5196da73c6047af0075</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PtclAttribConst</name>
    <title>Constructors of ParticleAttrib</title>
    <filename>group__PtclAttribConst.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>g58517a32d569b41e164c9fe9a8388303</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>g3b7bb5a84821e65a17c2abaf41e4160e</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ged6f676bba6494b7c5541837158fe901</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>g37bba2d680d89b6677a08b0edc70a2a0</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nnlist</name>
    <title>Distance-table group</title>
    <filename>group__nnlist.html</filename>
    <class kind="struct">qmcplusplus::AsymmetricDTD</class>
    <class kind="struct">NoBConds</class>
    <class kind="struct">PeriodicBConds</class>
    <class kind="class">qmcplusplus::DistanceTable</class>
    <class kind="class">qmcplusplus::DistanceTableData</class>
    <class kind="struct">qmcplusplus::SymmetricDTD</class>
  </compound>
  <compound kind="group">
    <name>WFSBuilder</name>
    <title>Orbital builder group</title>
    <filename>group__WFSBuilder.html</filename>
    <class kind="class">qmcplusplus::AGPDeterminantBuilder</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminalBuilder</class>
    <class kind="class">qmcplusplus::ThreeBodyPadeBuilder</class>
    <class kind="class">qmcplusplus::NumericalOrbitalSetBuilder</class>
    <class kind="class">qmcplusplus::OrbitalBuilderBase</class>
    <class kind="class">qmcplusplus::SplineSetBuilder</class>
    <class kind="class">qmcplusplus::TricubicBsplineSetBuilder</class>
  </compound>
  <compound kind="group">
    <name>MBWfs</name>
    <title>Many-body wave function group</title>
    <filename>group__MBWfs.html</filename>
    <class kind="class">qmcplusplus::TrialWaveFunction</class>
  </compound>
  <compound kind="group">
    <name>hamiltonian</name>
    <title>Hamiltonian group</title>
    <filename>group__hamiltonian.html</filename>
    <class kind="struct">qmcplusplus::BareKineticEnergy</class>
    <class kind="struct">qmcplusplus::CoulombPBCAA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAB</class>
    <class kind="struct">qmcplusplus::CoulombPBCAATemp</class>
    <class kind="struct">qmcplusplus::CoulombPBCABTemp</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAB</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAA</class>
    <class kind="struct">qmcplusplus::IonIonPotential</class>
    <class kind="struct">qmcplusplus::LocalCorePolPotential</class>
    <class kind="struct">qmcplusplus::LocalECPotential</class>
    <class kind="struct">qmcplusplus::LocalPPotential</class>
    <class kind="struct">qmcplusplus::NonLocalECPotential</class>
    <class kind="struct">qmcplusplus::NonLocalPPotential</class>
    <class kind="struct">qmcplusplus::QMCHamiltonianBase</class>
  </compound>
  <compound kind="group">
    <name>QMCDrivers</name>
    <title>QMC Driver group</title>
    <filename>group__QMCDrivers.html</filename>
    <class kind="class">qmcplusplus::DMC</class>
    <class kind="class">qmcplusplus::DMCMoveAll</class>
    <class kind="class">qmcplusplus::DMCOMP</class>
    <class kind="class">qmcplusplus::DMCPbyP</class>
    <class kind="class">qmcplusplus::DMCPbyPOMP</class>
    <class kind="class">qmcplusplus::DummyQMC</class>
    <class kind="class">qmcplusplus::GSLOptimize</class>
    <class kind="class">qmcplusplus::QMCCostFunction</class>
    <class kind="class">qmcplusplus::QMCDriver</class>
    <class kind="class">qmcplusplus::QMCOptimize</class>
    <class kind="class">qmcplusplus::ReptationMC</class>
    <class kind="class">qmcplusplus::RQMCMultiple</class>
    <class kind="class">qmcplusplus::RQMCMultiWarp</class>
    <class kind="class">qmcplusplus::VMC</class>
    <class kind="class">qmcplusplus::VMCMultiple</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <class kind="class">qmcplusplus::VMCParticleByParticle</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <class kind="class">qmcplusplus::VMCSingle</class>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
  </compound>
  <compound kind="group">
    <name>WalkerByWalker</name>
    <title>QMC Drivers using walker-by-walker update</title>
    <filename>group__WalkerByWalker.html</filename>
    <class kind="class">qmcplusplus::DMCMoveAll</class>
    <class kind="class">qmcplusplus::VMC</class>
    <class kind="class">qmcplusplus::VMCMultiple</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
  </compound>
  <compound kind="group">
    <name>ParticleByParticle</name>
    <title>QMC Drivers using particle-by-particle update</title>
    <filename>group__ParticleByParticle.html</filename>
    <class kind="class">qmcplusplus::DMCPbyP</class>
    <class kind="class">qmcplusplus::VMCParticleByParticle</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
  </compound>
  <compound kind="group">
    <name>MultiplePsi</name>
    <title>QMC Drivers for energy differences</title>
    <filename>group__MultiplePsi.html</filename>
    <class kind="class">qmcplusplus::RQMCMultiple</class>
    <class kind="class">qmcplusplus::RQMCMultiWarp</class>
    <class kind="class">qmcplusplus::VMCMultiple</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
  </compound>
  <compound kind="group">
    <name>qmcapp</name>
    <title>QMC Application Group</title>
    <filename>group__qmcapp.html</filename>
    <file>qmcapp.cpp</file>
    <class kind="class">qmcplusplus::HamiltonianPool</class>
    <class kind="class">qmcplusplus::ParticleSetPool</class>
    <class kind="class">qmcplusplus::QMCAppBase</class>
    <class kind="class">qmcplusplus::QMCInterface</class>
    <class kind="class">qmcplusplus::QMCMain</class>
    <class kind="class">qmcplusplus::WaveFunctionPool</class>
  </compound>
  <compound kind="struct">
    <name>AGPLambda</name>
    <filename>structAGPLambda.html</filename>
    <member kind="function">
      <type></type>
      <name>AGPLambda</name>
      <anchorfile>structAGPLambda.html</anchorfile>
      <anchor>c44a9f3aa057c7f5e3ef22e81d19082f</anchor>
      <arglist>(int i, int j, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AGPLambda</name>
      <anchorfile>structAGPLambda.html</anchorfile>
      <anchor>d2bf4dab6c0b69eff6cfe8807dac3153</anchor>
      <arglist>(vector&lt; string &gt; &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createNode</name>
      <anchorfile>structAGPLambda.html</anchorfile>
      <anchor>e40075ccb0daf2659ee95fc9d5a60e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>I</name>
      <anchorfile>structAGPLambda.html</anchorfile>
      <anchor>3f0cb6bae3dbdf70a53b1a270aca26f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>J</name>
      <anchorfile>structAGPLambda.html</anchorfile>
      <anchor>6d1b0ab7f628f1ca81a9133a2910bd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>X</name>
      <anchorfile>structAGPLambda.html</anchorfile>
      <anchor>96402abb7cdf3b57f62679ff910328c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Any2Slater</name>
    <filename>classAny2Slater.html</filename>
    <base>MinimizeFunction</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; scalar &gt;</type>
      <name>SourceType</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>4167b4efe8120b79fc9b0540d091cbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogGrid&lt; scalar &gt;</type>
      <name>GridType</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>23dac498b2d723c93300c7258cc24603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any2Slater</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>7e08dfd513e378ee0a9cfc126beae3ae</anchor>
      <arglist>(SourceType &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>953435e5f8d1f485064c20fce601244d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>826a2cc6f374f800c522092dc3697980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>Params</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>2b7f3d735b0b35df6241d1fe31dc39e8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Params</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>25400ad74c149e08a416e22d140bfce8</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Cost</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>e004d5b6bc3c62f5e7b881778bbf497d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteStuff</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>787105a44c242e35f13cfa21489d52fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a1ff1de71c64abdd87905076e033cb37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SourceType &amp;</type>
      <name>Source</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>72b37e0817cf62c7c3b7f8f2f31688b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_tolerance</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>bdd7993a91193a643c4064d710600f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_stepsize</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>7df6e4a059a2a8c495826e607d0407ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_epsilon</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>68f2db0e855c37a73be3e1a159e0eb32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minIndex</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>4c9c6a0ef48f72ff2b85cacd84a2a425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>mPtr</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>aae59ce907f6d8d09809344796903a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericSTO&lt; scalar &gt;</type>
      <name>Target</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>33e6c0d51a4c832b976d799904499cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; scalar &gt;</type>
      <name>OptParams</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>e1ff21948505b65e0c01aee00c6a1bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; scalar &gt;</type>
      <name>psi_sq</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>22e5547b6387bfa7b60adbc508ffb210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; scalar &gt;</type>
      <name>psi_norm</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>17be4b81dbb8dc2b5028a1d83bcac18c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BLAS</name>
    <filename>structBLAS.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>831e97fe0dade5f4bf7571f6e5f470eb</anchor>
      <arglist>(int n, double x, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>ce78fddd0e95bd47dea9520d4be4b839</anchor>
      <arglist>(int n, double x, const double *a, int incx, double *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>3054c64d298c4597e75d2e574f354ca4</anchor>
      <arglist>(int n, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>7fa3dd57ea513acfbfb7f1b1acf975bd</anchor>
      <arglist>(int n, float x, const float *a, int incx, float *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>b2daa975678961f99de6e9510eb16d93</anchor>
      <arglist>(int n, const complex&lt; double &gt; x, const complex&lt; double &gt; *a, int incx, complex&lt; double &gt; *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>norm2</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>1e358bec9c40d0518b17b55fd66cadff</anchor>
      <arglist>(int n, const double *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>norm2</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>71b669b309bb2dd57acd001f270d50d6</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>norm2</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>9b6ba34ebc3be5691e180a3adf81e1ad</anchor>
      <arglist>(int n, const float *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scal</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>0cf5c456cc2683ca04f507a20767099f</anchor>
      <arglist>(int n, double alpha, double *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>ff137f830fd4b386a5600bd241f28bf4</anchor>
      <arglist>(int n, int m, const double *restrict amat, const double *restrict x, double *restrict y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>6900950d2c88216cced0f976913978e7</anchor>
      <arglist>(int n, int m, const std::complex&lt; double &gt; *restrict amat, const std::complex&lt; double &gt; *restrict x, std::complex&lt; double &gt; *restrict y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>ef3254c5c5a04a33cfec531986b8ef0c</anchor>
      <arglist>(int n, const double *restrict a, const double *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; double &gt;</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>18f3bc005cd4365fb7bd6c2029f052da</anchor>
      <arglist>(int n, const complex&lt; double &gt; *restrict a, const complex&lt; double &gt; *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; double &gt;</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>5b52bea8f211e79278a28e873ae6eb46</anchor>
      <arglist>(int n, const complex&lt; double &gt; *restrict a, const double *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static complex&lt; double &gt;</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>035f0a864a30f83e484fcb507b97a1b0</anchor>
      <arglist>(int n, const double *restrict a, const complex&lt; double &gt; *restrict b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>a87e3af468e485cf1412c65c940a1ffb</anchor>
      <arglist>(int n, const float *a, const float *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>9ee5c6cf1853caf8187bb1b22cd40d4b</anchor>
      <arglist>(int n, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>51389fb7911087c0a095077716ec138f</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>d012f139d9c5654c63e1160b9571591d</anchor>
      <arglist>(int n, const double *a, int ia, double *b, int ib)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>62c3a2354d5329878afe431c1dcdcca4</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, complex&lt; double &gt; *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>50960cbb9a49595b4d1ee572263131ef</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, int ia, complex&lt; double &gt; *b, int ib)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INCX</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>8c929806cc56d36ebc52f97016668b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INCY</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>41c0c366c28a95cc866f2a99701c1e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>UPLO</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>3404c350ba06fafceff6aca1904cf327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>TRANS</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e34f244410edcc916ee25881e117b022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>sone</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e9ebf04732c379df9fa361889ca1c5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>szero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>878dca2c2cd7a0a93188205fed9604d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>done</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>a20ca0ff374d000a9548989d9c5fd480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>dzero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>da4349899bf3e42b686878f25097e6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; float &gt;</type>
      <name>cone</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>5d6d02d38c9eaf0595e57ce20c27e09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; float &gt;</type>
      <name>czero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>9da0f38014b659a1b79838c262cdbd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; double &gt;</type>
      <name>zone</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>9ae61ac560a41abad68c0160fc820463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; double &gt;</type>
      <name>zzero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>fa7e17b92dcf92986f3aca32de28c52f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc</name>
    <filename>structBMakeFunc.html</filename>
    <templarg>FLAG</templarg>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc.html</anchorfile>
      <anchor>5f34aa3f8bf53cc44195831c42974756</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 10 &gt;</name>
    <filename>structBMakeFunc_3_0110_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_0110_01_4.html</anchorfile>
      <anchor>0da23a5c7b191f219529ca501002dd73</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 100 &gt;</name>
    <filename>structBMakeFunc_3_01100_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01100_01_4.html</anchorfile>
      <anchor>90d08d755c0789536e6d20d63722190b</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 103 &gt;</name>
    <filename>structBMakeFunc_3_01103_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01103_01_4.html</anchorfile>
      <anchor>ecfd5eae554c80ae9ac7b0b72a2ad51a</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 12 &gt;</name>
    <filename>structBMakeFunc_3_0112_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_0112_01_4.html</anchorfile>
      <anchor>c3fd548f989735aea95935de6b0e345e</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 127 &gt;</name>
    <filename>structBMakeFunc_3_01127_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01127_01_4.html</anchorfile>
      <anchor>aaf921f90c0817d6d4ea5c3c72943946</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 147 &gt;</name>
    <filename>structBMakeFunc_3_01147_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01147_01_4.html</anchorfile>
      <anchor>bedf93b6f01d5d01fe980a37d7e776b1</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 20 &gt;</name>
    <filename>structBMakeFunc_3_0120_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_0120_01_4.html</anchorfile>
      <anchor>6ba1374ff8a13924f6396f275731a922</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 200 &gt;</name>
    <filename>structBMakeFunc_3_01200_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01200_01_4.html</anchorfile>
      <anchor>ae5e402b8f26d7f32b73dbb1c42580dd</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 22 &gt;</name>
    <filename>structBMakeFunc_3_0122_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_0122_01_4.html</anchorfile>
      <anchor>7889baea4206ea27f16a558459ebf0a8</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 30 &gt;</name>
    <filename>structBMakeFunc_3_0130_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_0130_01_4.html</anchorfile>
      <anchor>59eea1cb1b6ef5dc6e6779d0be540b10</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 300 &gt;</name>
    <filename>structBMakeFunc_3_01300_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01300_01_4.html</anchorfile>
      <anchor>c58625d7def3fd305524e6aa8a2b91e5</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 3000 &gt;</name>
    <filename>structBMakeFunc_3_013000_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_013000_01_4.html</anchorfile>
      <anchor>5175ba1144da4363a6a5b9659258de9d</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 3100 &gt;</name>
    <filename>structBMakeFunc_3_013100_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_013100_01_4.html</anchorfile>
      <anchor>cae199603f40a822451f2254b0ff8a27</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 34 &gt;</name>
    <filename>structBMakeFunc_3_0134_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_0134_01_4.html</anchorfile>
      <anchor>48f145f7b78fc79ed57c02613d08852a</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFunc&lt; 400 &gt;</name>
    <filename>structBMakeFunc_3_01400_01_4.html</filename>
    <base>BMakeFuncBase</base>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structBMakeFunc_3_01400_01_4.html</anchorfile>
      <anchor>c1ebe260a21716ac32a3afaf76930ed2</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BMakeFuncBase</name>
    <filename>structBMakeFuncBase.html</filename>
    <member kind="enumvalue">
      <name>GAUSSIANTYPE</name>
      <anchor>a15a8047666ad72167ab262c727fdea77b5c5e9901be46ea33b4414285631f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLATERTYPE</name>
      <anchor>a15a8047666ad72167ab262c727fdea76cb9444e158c8b0fc7bd9a4940da7f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWNTYPE</name>
      <anchor>a15a8047666ad72167ab262c727fdea73bb4aa16c16cd55bf9157fa461e24f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BMakeFuncBase</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>f1f00f626b0e84d54dd81bc787010fa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createBasisGroup</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>d410bb61fc2c87b5282763a56b2691de</anchor>
      <arglist>(bool shortform=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRadFunc</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>854f235a2e11dbf888912dee27960191</anchor>
      <arglist>(double e, double c, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>604108c26fe188bae8a905195c4b0349</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>put</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>d61a08eb1ca3cb7747c1c87d62dc75cc</anchor>
      <arglist>(vector&lt; string &gt; &amp;words)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>7d5afbeeefb59480b2666ca559aa081a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>1499b57a0912193ecefcffc8c76b220e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>6804c4bcec5386fe78310a379f91d1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>M</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>e4b6f16b5853110d8ba79f4a39321a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>RadFuncType</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>18750d4d689f13e1ac69f5352b805849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; double &gt;</type>
      <name>exponent</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>db53ecd94b990e98798c723a608168a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; double &gt;</type>
      <name>contraction</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>c10236e5e66ed0c94c37c544419087e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>node</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>08f3124f50fb2195affb38707c86f177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>BasisID</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>c6ba3deb1ca27fbfb81282ff74a78010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static vector&lt; double &gt;</type>
      <name>YlmNorm</name>
      <anchorfile>structBMakeFuncBase.html</anchorfile>
      <anchor>088a888cbeabd6675c92314a21af14bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoostRandom</name>
    <filename>classBoostRandom.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Return_t</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>d78f8a323c7490627207fef69a27bc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::minstd_rand</type>
      <name>base_generator_type</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>6f28e9b1d0bb47481a71dbade2d71bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mt19937</type>
      <name>generator_type</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>84b78b3df703bf80d233a3c9cb34b9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; generator_type, boost::uniform_real&lt; T &gt; &gt;</type>
      <name>uniform_generator_type</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>63cccde391c120c9b3db2c51c3da0f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>d39592b27043afe6c328057a0f8c153a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>4fdaaed2af3a18db1842beb40f54fe55</anchor>
      <arglist>(int iseed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoostRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>f99f1e3222fb3093aace6365a1f7e025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>f897109b4b4d8da535fe54e2432651af</anchor>
      <arglist>(int i, int nstr, int iseed_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>20e43943d50e93d2764cdef086d2253f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uniform_generator_type &amp;</type>
      <name>getGenerator</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>483a74cb0bab009ae4ac58ad0e80d515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>b21f5f23835be65a015fcfc5a300e11e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>9e22295d7cf8fad2b30ff29e3ea49c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>f6e2ed75148bbb5adcf7bc7929dfa741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>0262612eaa53600d3fee2641ce8cb6ba</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>0df2a31891c33527f80e779c30717e3a</anchor>
      <arglist>(std::istream &amp;rin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>b87fb85fd0868ef1fef7fd3af7b9af2b</anchor>
      <arglist>(std::ostream &amp;rout) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>baseSeed</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>dd34e9f0db0ca0fddb416ed34fa529f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>state_array</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>0d67519b2daba897ca7d65693b92564a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myContext</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>40246aaa50140352c26b6426525eb979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nContexts</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>d673fe0efc3076c2923731171f5206b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>state_name</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>8a1853793b5162f3df3813a2fc828a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hsize_t</type>
      <name>state_size</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>35d48a09f20caaafaf08182413512778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>base_generator_type</type>
      <name>base_generator</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>b0a9b5ed2805b25b1e49fb2c927d4e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::uniform_real&lt; T &gt;</type>
      <name>unit_dist</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>1a028a569733c69b026cba92d48bca99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>generator_type *</type>
      <name>generator</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>c1a3b21258586603cbc365990f323094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uniform_generator_type *</type>
      <name>uni</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>e07ec590394ea8d0c2742ff276f67c27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BParser</name>
    <filename>classBParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>BParser</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>60fbe504a893da55f7e1348380d65f13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BParser</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>beb6dca50c10ea578d0f5ba9ba3549b6</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>26403f4067ea78ba710847668408c890</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>c38787942609ab331c745733694bae9a</anchor>
      <arglist>(const string &amp;psi_tag, const string &amp;ion_tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>25f0daf8971afc4ec6319b8d5768d74d</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBasisSetForDet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>e0e6cf2f371d0ab7d50095beaf4fb3d3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBasisSetForJ3</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>e859334d4601f45142bb223179c2dba8</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOccupationForDet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>971b53d4b67d8df88c2b338303b47356</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOccupationForJ3</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>25a4ca93ec7a1abe556c5fa492f7c671</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLambdaForDet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>52389765d8edc6c58978b328896af682</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLambdaForJ3</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>3a8fdde64990c6c96775b91b1df885ea</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createDeterminantSet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>a4a98f0ca7464ec9893c514ddfe4d011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createJ3</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>e6332d9363868a885cb4919b721af72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createBasisSet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>74feae608753984e0dd5ce94feb2e447</anchor>
      <arglist>(map&lt; int, vector&lt; BMakeFuncBase * &gt; * &gt; &amp;bset, vector&lt; int &gt; &amp;basisPerAtom, vector&lt; int &gt; &amp;occ, bool jastrow)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>DetShells</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>1caf3fb71379a88d33054da9b5329827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>J3Shells</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>6e08b29559cf25875e2132a338938b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>J2Index</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>aae6ae67f248e21beabf250d2b9c5d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>DetSize</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>04992f934b80288d4f5a2f51b32161ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>J3Size</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>7b6c23e587b7ab3fa851c6d1348060f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>DetNonZero</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>276d0b46bc2797458573d5a3fa88b651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>J3NonZero</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>468d3ded71ee9090aa7f43edd1adf900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>detBasisPerAtom</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>dc66d716207dee7f385d590f3d423cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>j3BasisPerAtom</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>5b22aa2d00d5df7d74355aab336eed38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, vector&lt; BMakeFuncBase * &gt; * &gt;</type>
      <name>detBasisSet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>aa94a43d5eaab4a7479c6a1ff933add1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, vector&lt; BMakeFuncBase * &gt; * &gt;</type>
      <name>j3BasisSet</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>85000fc3086c4c7dd2717a47ccb16a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>detOcc</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>0cd172b63ee686c6168f5a213cd4226f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>j3Occ</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>7184cfebc1477d7e71d65cf554eecfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; AGPLambda &gt;</type>
      <name>detPairedLambda</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>0c6313c4b5246dc4d8f83b6945122929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; AGPLambda &gt;</type>
      <name>detUnPairedLambda</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>0b3e48f19a440e223046b1c3687a142b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; AGPLambda &gt;</type>
      <name>j3Lambda</name>
      <anchorfile>classBParser.html</anchorfile>
      <anchor>f5970fb2878995e5c0d8d131dac701c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CasinoParser</name>
    <filename>classCasinoParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>CasinoParser</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>170cba3b2dbd00d30a63f49e3b85fad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CasinoParser</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>db5062da0721e97a0b2585f8655045ae</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>0289b6cf672d19af81ed81d4e8640d82</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>c9d2e58be195a3f82d4f2697f58521dc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>9e48bed180e2a790f2d73e0192c7aa91</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNumberOfAtoms</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a9f9281beac8f950d3eea366ad58cc46</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAtomicPositions</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>9c6e403ada195276f55d1959c4fa23e1</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAtomicNumbers</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>ea24aeb6a0ee592b799c51ab6414b720</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValenceCharges</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>e980db0e945b856c9bf9058e1c752b36</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>contractionCorrection</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>878e7a6f803344dd89b9abcee9f142e9</anchor>
      <arglist>(int shell_id, double alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCorrections</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>eeaca3cd4ca5fef42b5ef75350f0d883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>BasisCorrection</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>046f963c41e9089b4c5e218bfdc5b60c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChebyshevFunctor</name>
    <filename>structChebyshevFunctor.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ChebyshevFunctor</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>7b2b94f325688aa02035a99b6f1e3f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>cf6e80ab5f9ebc6a886ce84431532f5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>567dcdde80095e384a6e6b753c0cd1bf</anchor>
      <arglist>(vector&lt; T &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>d97ca26e554872b580897f398c311119</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>620a5a337e86252f3b1f70bafd60f0c4</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>29ec11a0ef9024ed1f995d85e40d3a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>9fff4e9d8e1f86a1edee6439a6951bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>73e3e5649a6244bc2a204b7b79d4b8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>alpha</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>5736d054bbc4da7956ec1c499d35dabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>TT</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>8aef4795e580fa2761d1c4ed14288312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>dTT</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>00c18e4803a40b6f08715d8d4dbb3382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>d2TT</name>
      <anchorfile>structChebyshevFunctor.html</anchorfile>
      <anchor>b4c441173d1c2d6a1ad3ccd3a4d87347</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Clebsch_Gordan</name>
    <filename>classClebsch__Gordan.html</filename>
    <member kind="function">
      <type></type>
      <name>Clebsch_Gordan</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>8e14d3a7d48f244fb744f75450f22f9f</anchor>
      <arglist>(const int lmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Clebsch_Gordan</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>90e43cc61f3d7c30f59189f8cc746c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>52ce8113bd8539fc28ba93b2e1cdaafb</anchor>
      <arglist>(int l1, int l2, int l3, int m1, int m2) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cg</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>4e83b28748451495dcfc6fea9fa2cdbc</anchor>
      <arglist>(int l1, int l2, int l3, int m1, int m2) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>CG_coeff</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>513721e51d7db89e1113ecfd92c66394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Clebsch_Gordan</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>cd206dcce6a23cb388063efcd37acf4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>0c34d3015836fe073589ca737d836edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L1max</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>8c3d997c965f4110935fb2cba662ac4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L2max</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>7f63f1f3381661f07381098a1a0e0dc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComboFunc</name>
    <filename>structComboFunc.html</filename>
    <member kind="function">
      <type></type>
      <name>ComboFunc</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>1136691b3c420744fd4abcb94bbe91e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>f5c10c60176498de57aadce8d9fed63e</anchor>
      <arglist>(double c, TestFunc *fn)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>6f7920b79cd10b3c95ecc847416e97cb</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>d1124516d71531bdbb3ef2a283c057b3</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>5fd5f79db3441adb1c703fa613dca10c</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>0b10fab557c40730b579b909e147c16b</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>718b000eb1f3bf06c4a95300d74b8cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TestFunc * &gt;</type>
      <name>F</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>3d47cf38b18a79e5d9906422b1d6e81a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComboFunctor</name>
    <filename>structComboFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;</type>
      <name>ComponentType</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>64fa58d017b340ceed823ce369d80002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumericTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>b31018e9914035e9fd834f7f0d912424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumericTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>be7e06b82692cc5523e30323ba16a095</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboFunctor</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>f08d1d082f23162d88415c0f3aa2540f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>305799f118342e2fdd741bab24c37a13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>e11615a62f84b6a3bd00444cfae898aa</anchor>
      <arglist>(ComponentType *func, real_type c, const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>9bbf3f56023ed931b073ebc3a0e40052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>25bba975452734af641f14dc30e3bbfb</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>595c81123e35aaae28f3e1ff28e7478a</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>9a4488b854f22866f28886f8d9ce9c0c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>8e66ac5b37b44d7ae5f6dee484b7d019</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; real_type &gt;</type>
      <name>C</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>9da983576c55bf863374c803f8d9dbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ComponentType * &gt;</type>
      <name>Phi</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>649a1ba613cd27625b5de003201444b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>ID</name>
      <anchorfile>structComboFunctor.html</anchorfile>
      <anchor>1b327d46969b3c77503714be411c27a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConstScale</name>
    <filename>structConstScale.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstScale</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>250c01e805c72b8c5adfb74ac6dad2a7</anchor>
      <arglist>(double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstScale</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>2e78e2a98ff188fe57b55ca94fa3d5b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>600ec185e70c01892e4e3da8e4e3b8fb</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>2b7329727c4bf5a640b1af2bab85b1bc</anchor>
      <arglist>(double r, double &amp;vr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>99e9779580e11367089676074d2619ed</anchor>
      <arglist>(double r, double &amp;vr, double &amp;dvr)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>310f1322b334fc5e254040de08202da9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Cosine3D</name>
    <filename>structCosine3D.html</filename>
    <templarg>T</templarg>
    <templarg>PT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>c450c9a795afe34f3b93779017a50968</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT</type>
      <name>pos_type</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>c96187aad657955b19324a0ad86d69da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cosine3D</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>077ec14d9642795fa74e69d9c9ceda5a</anchor>
      <arglist>(value_type kx=0, value_type ky=0, value_type kz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>7e0cb41d942a7256980e82a1098aaa8a</anchor>
      <arglist>(value_type kx, value_type ky, value_type kz)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>81770fdf5e87855f202b4bb54713e1a0</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>PT</type>
      <name>gradient</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>5ba21e555ace24704609047b9fa06c49</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>2ecfaaf6544791b514f7d4264c6264db</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v, PT &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>3d3b7907cc6241e51fb6bdb3b0012aad</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>0ee3142a1205704d87020551d89eb5a3</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kx</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a6c17a7768bfdbdb0db0a8783d6270da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Ky</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>53628d4244a8cee4ca255a92c0650dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kz</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>dcf293efc30d9976466e99d9cb84b22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Knorm2</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a0510f930f25da150cf5da30fa52bb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Val</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>e55430ca3c1dced92673c6a51b7f9112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Lap</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>0f906cf81efe71d40a17975ec65ad3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pos_type</type>
      <name>Grad</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a6d85b0af419dbb2b86625ae80d7351b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CostFunctionBase</name>
    <filename>classCostFunctionBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>CubicBspline</name>
    <filename>structCubicBspline.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
    <base>CubicBsplineGrid</base>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, BC &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>31c5f6b5f67708c75dcb3611d74342f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, BC &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>afcc760f5772dba39f1ce501d7ac788e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, BC &gt;::container_type</type>
      <name>container_type</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>c81d6a84d598fc6909ade105c3872cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBspline</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>ed2c4f81c3966c1c6fdf03f799f952c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>2999877a656fe52db23155a35f9a72c0</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>04b0c711e6a64097d13e49bfbc09809b</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed, T yp1, T ypn)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getValue</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>63306ed38f124240f8f794c6346c8d61</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getDeriv</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>c98350851dd0844d8aa844e88e16573e</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getDeriv2</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>e90223587e803a12f61bcdf7b170bd87</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getDeriv3</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>de6a542417c4205d3fdc9fd26e273b3e</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>77f5fd9000df0454532509dc778b13d4</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>447bc5492c6518417c56d0b1f2d634c5</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>b0ec4fd103a89b222e2674a4f4b0efcb</anchor>
      <arglist>(point_type x, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>27b4a1567e91cd5cd868583e4c8c3fc2</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate0</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>949b1c477412698d746ba4da4a2e3319</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate1</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>af4d7c66e1db92f997e9236516bbab69</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate2</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>0e25373314b14e3f95f2820dc0c1cbd3</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i0</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>071f9fdb69ec118d5fe65e4ae4994ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i1</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>81b989aab52a153acff2b02251be2bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i2</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>76505783e579e7b2b457200edc6c761d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i3</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>9e39460708b8c4ba26e4216877f340ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>OffSet</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>20a91b759e5747cbf2ed238a4f13a941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>A</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>6aae44b51d92a60ab72c102b8fe49405</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dA</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>c3495a71b5c329cd90f9e7621539285a</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2A</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>d94248ae0dbfbaf0c0c8148ff4c0354d</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d3A</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>a1b0c2dc41c98700838c3fa765adecfa</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>structCubicBspline.html</anchorfile>
      <anchor>d33a59c227d78cc2cdd42fede19b888e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicBsplineGrid</name>
    <filename>structCubicBsplineGrid.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="struct">
    <name>CubicBsplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>1b7f9872b8f7c173782f118fcf17c562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>52a9a5de8158becd7b6921ccbef0f7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3b93118a33c28c3bce7831c7dd4f7b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_t</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>8617ae80c84d9b0eeb6bc4f0c653ff8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineGrid</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>1630a8495a7889d4a97c7e8d072b8417</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGridPoint</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5fc08b1f28c1632c348f9ef3c34e3129</anchor>
      <arglist>(point_type x, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>25adcdc81357fec9869b51cb3a3c7b46</anchor>
      <arglist>(point_type start, point_type end, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>8cfc29e64652a31f32c6cb4b91ae6bb2</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5b188992dde9217ae2cad9e19fbbffdc</anchor>
      <arglist>(point_type start, point_type end, value_type startDeriv, value_type endDeriv, const container_type &amp;data, container_type &amp;p)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Npts</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c704c044463be334e7c6c9210bddb4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>f2ba086750f5466f2e3fdbe9e1d5e0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b261b4ad664a55eddc5c0399282145b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>6de8c2fb6de53c8dbeb4e8146282fd9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e99f8f785ae62d8244261e38b6cce18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>cb35009c88586b68ef0f56490725bf0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>35df0c83e819bdb32eec8a7d69673832</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>4a8bd7ba0c782a3c77006add8f5c4ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>tp</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>2089adc9d68b88e0d0d37353d0c40c99</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicBsplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</name>
    <filename>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>33671ea5f278dd304259ea775d993da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>0392c3f2b36b341b8ae80bdc2c1ed339</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>ae617cb4e10ec547cbb91e45c7994345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineGrid</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>27c24f2039c26e241900e4a6829948a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGridPoint</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>fb5a18231e36d93e335e4e5cce9c1ae7</anchor>
      <arglist>(point_type x, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c9fcb53993a1eef51ba43756ea78d8cf</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i0</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3f266eba99e4adaf9a404232a4b5bd67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i1</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>14f5320a656ddf833ab663c64117abbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i2</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>9f03c5ac41c1cdd644380b7415e931a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i3</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>4eebb7f48b8100172819f725f2f67518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>75f449d39b949884b7bddad3835667be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>4dcbfbb4db324f3a8b9fa8a0aac973f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e121a10d89f38f4867faa628ad87e6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>63231a486c14f8f1c40922a9fc2b75e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>04ad6cad885db20c7eb146971f531507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>2de263012391b7c9689a35004440eac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b9066f37323dd9fe0937b626c99295c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>curPoint</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e8296602af464f70157a0d7b1781ba26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>tp</name>
      <anchorfile>structCubicBsplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>754f2bf368b2a2604af41e89dc7e22e6</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CubicSpline</name>
    <filename>structCubicSpline.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
    <member kind="typedef">
      <type>CubicSplineGrid&lt; T, GRIDTYPE, BC &gt;</type>
      <name>GridType</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>aeccee280c56a6b1bb1b4682091e7ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicSplineEngine&lt; T, GRIDTYPE, BC &gt;</type>
      <name>SplineEngineType</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>180b22072930c8d831e60a41d264f1ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>b8ac701b08bef9811078f75997045025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>d6fd3a990f3bc56913bb98e010dd262a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::container_type</type>
      <name>container_type</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>83304fa79894f72738df236f4cce5c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>686b8ab153519f348e968383086f19ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>247e042885675a45a865022e55949899</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed, value_type yp1, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>c0b372e03e67a088a7a622a9581d63a7</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>7a93a27915851028da052fb970c547b0</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>5f83fea8a907ca4d739e4a9ca799cdd1</anchor>
      <arglist>(point_type x, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>686b8ab153519f348e968383086f19ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>d18d70b518e346c0d76bcef3108dddba</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>cf10ab5294128146d5c683751225ecec</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>676403aa2def1565f99407964ca6be3a</anchor>
      <arglist>(T x0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>ccdf1c333fc9bcd4fc981309a1cd6985</anchor>
      <arglist>(T x0, T &amp;yval)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>2393e167f2fd98bda762c1f1008ecc4a</anchor>
      <arglist>(T x0, T &amp;yval, T &amp;yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>0a2038ac76270d29032c296df9face59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>e354b13a1694405a6da7616dbb55ab6f</anchor>
      <arglist>(const int n, T *x, T *y, const T yp1, const T ypn)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>EndIndex</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>105b0df5bf65f5075e1c3ed01defd37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>053f52941af15c6d375685ab4def2eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>dd6d6f7161418d74bc63e6ebfe9d69a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SplineEngineType</type>
      <name>myEngine</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>5f8ca4488dc3a5291a28526022ed3dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>225928cb47f6a13b57a507b5671067e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>auxP</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>b6240b70809e774b818cb7faf2b64b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Npt</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>11dc21c23d3cf2da9196e920f6323c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Yp1</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>03233f1388fd6884769241236bc8b004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Ypn</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>f81fdc5120787eb0c1e4f8da3b77b3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>X</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>96da249a6510e3a104242705460e3cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>Y</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>e89347ececada95904c282f305f1e2f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>Y2</name>
      <anchorfile>structCubicSpline.html</anchorfile>
      <anchor>fe654e4920b817eb3c4f66066bf63fe7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineEngine</name>
    <filename>structCubicSplineEngine.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="struct">
    <name>CubicSplineEngine&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <member kind="typedef">
      <type>CubicSplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>GridType</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>1293a16b7e271e3dcfa47429337c993a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>0e269cb8e36fc9a0fc5edde865ff2afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>6cfb2f36193fe2a09efcd575bde9221b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::container_type</type>
      <name>container_type</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>f82f164fe0b3fc97479fedb7545f7b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineEngine</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5be3d71d88d3182f25cf2ce5483fe623</anchor>
      <arglist>(GridType *agrid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>812adc4242399137d42806e80df834aa</anchor>
      <arglist>(GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>80d92157a6d246d19881053c74fc48bc</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound0</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>1ede9c47444d76163bfc2a4375f5b29c</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>10dbe04a7c2637dff50fc25df5fa85f7</anchor>
      <arglist>(value_type y1, value_type y2, value_type d2y1, value_type d2y2, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3517d6f5b7e51217ddbbe08061695418</anchor>
      <arglist>(value_type y1, value_type y2, value_type d2y1, value_type d2y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3b491b765964adabc4459cbb1d699a22</anchor>
      <arglist>(value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;d2p)</arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b73557d7b3a19b8527b02a263209e45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cL</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>53797a3fc3b155348d54b1fde38aed76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cR</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>48bf3f6b5d02243b8035448ac6a5349b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c25349f31ba5850715bf576c8d2ba82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q2</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>a946a34d0103e9f939f041738ba2859a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c1a1e0197f8c0cb3f4c98b260b8d962d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq2</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>8317c356847347fb7ddf157119094f88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineEngine&lt; T, GRIDTYPE, PBC_CONSTRAINTS &gt;</name>
    <filename>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <member kind="typedef">
      <type>CubicSplineGrid&lt; T, GRIDTYPE, PBC_CONSTRAINTS &gt;</type>
      <name>GridType</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>95dd7a8afedf0159e4c49f3027a9501a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>f32d36654a2381864fbcebebaae5ef3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>066e320bfddb603c9b9b51556641cd39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::container_type</type>
      <name>container_type</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>0d332c10a37454b5eb57ba63b928d10b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineEngine</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>cfa48c5951a40512c7f80fe2d0ffbb35</anchor>
      <arglist>(GridType *agrid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>672d01fd50e35f4c4355b837daceefcd</anchor>
      <arglist>(GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>8cfa3b2c29bafc66c49590d9b3ec9cbf</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerGridBound0</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>58d5211a84d79752e1abf59c187e3087</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e7514eb21574909c88fe8de04693745b</anchor>
      <arglist>(value_type a, value_type b, value_type a1, value_type b1, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>af29235538a8b761fd14e0fce5af7b12</anchor>
      <arglist>(value_type a, value_type b, value_type a1, value_type b1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5c9245bc1652484feefa5a4e039ab869</anchor>
      <arglist>(value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;auxp)</arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>237c13c997646016175d923d0193500c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cL</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>377ced4872b283d62b5513f44f4b00af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>cR</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>85de4c4f3d1b15748bd29252245e9b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>p1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>47abce62fcefa2ac71111275e66a2e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>p2</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>9dc4396ae3555e081ab7a06c2d597072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b179ac10321eeac94a98c3f4fa40a782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>q2</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e09da1e3c7f7a8b90112fa66c7d57270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dp1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>69b05b2092cfa3514f8a52b8561e3331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>63acf8ed2150e7629c6fd7b0cf145994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>dq2</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>7c4236b9b48b045cb742804b7a3e5a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2p1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>697efc9723e1ee4d16e03e4d7391f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2q1</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>dc2eaec93a6b9daf895adb2f3c0274ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>d2q2</name>
      <anchorfile>structCubicSplineEngine_3_01T_00_01GRIDTYPE_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e5b963ce28ff01890778265ff79e7c84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineGrid</name>
    <filename>structCubicSplineGrid.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="struct">
    <name>CubicSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c6e5a9edfeb0cf59854a1a9108fc7422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>49fff96e9e374d930b5c37c0bfa3f2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3ac7e6b36cfd58c528bd64528d28afd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineGrid</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>fea36f191a06ac85bdbb0f518e0a31a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getGridValue</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>bd9bfe3b56b03c5488770261f63ce507</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getDelta</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>cffc9745ea0724808359fc8b35d4a35d</anchor>
      <arglist>(point_type xIn, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkGrid</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>8cde1d8c3db30879fca2add7766d8e15</anchor>
      <arglist>(point_type xIn, int &amp;i, point_type &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5347f4fe26352b06d96d6eacb215ebfb</anchor>
      <arglist>(point_type start, point_type end, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5e7228a4c53b16001d8e8dab5dd4bd1c</anchor>
      <arglist>(point_type start, point_type end, container_type &amp;p, container_type &amp;d2p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5b704bce6744e97ae4d771696f3e9a21</anchor>
      <arglist>(point_type start, point_type end, value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;d2p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>74b1399368e9f8fb67decdb3349a7433</anchor>
      <arglist>(value_type yp1, value_type ypn, container_type &amp;p, container_type &amp;d2p)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>86fb2b66f795278c55e69f2dbc8284cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>41effe52a05f87707107594a481dc366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c00a2d77ccd6a6a82a153fb549115619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>706573abd1fd8c5c166adf5c533a4721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>424d52f76d76022965caaa82225d2343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>a9118b1f72d1748783e410ac35629fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5475f982272534c6d6e8c3c78367032b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>StartDeriv</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>62ef93ed2f0e8e2ff39858077b3bf31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>EndDeriv</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>a8fb08ea67efcfbf161c98e29e61b67e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CubicSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</name>
    <filename>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>ec0dd871cec2640487bcc67e766c5ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>ac91bd2aa9fe55c59b18235c7cb46b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b801566c078ba76109875a79e63654d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineGrid</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>638f16bfd1fb2f79ba3c40388700e1bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getGridValue</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c61fdd6ead4be1149d4bf4c146b99e44</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>getDelta</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>c6feae44be8b9f617eae956c868aa6b2</anchor>
      <arglist>(point_type xIn, int &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b1285ca3dfb47f6ee83b80aa7ebd62fb</anchor>
      <arglist>(point_type start, point_type end, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>24ce8492810bc1748981d463ed1567d3</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, container_type &amp;p, container_type &amp;dp, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>31cdc43b94aceddd4c605321ed9e2134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>beded2becb1b13739f27dda7723ab132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>ab4bbb390135993d40588b7a4c261630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>72695caca98fb2ec4130436827b20373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv2</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>976aa07ad65638f4126292354c6fa18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e442f59b00430210124c1cdf2d8c680b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>structCubicSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>874d549928f07b2bf10047a53550ceef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::deque</name>
    <filename>classstd_1_1deque.html</filename>
  </compound>
  <compound kind="struct">
    <name>DTD_BConds</name>
    <filename>structDTD__BConds.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>SC</templarg>
  </compound>
  <compound kind="struct">
    <name>DTD_BConds&lt; T, 3, 0 &gt;</name>
    <filename>structDTD__BConds_3_01T_00_013_00_010_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structDTD__BConds_3_01T_00_013_00_010_01_4.html</anchorfile>
      <anchor>eb66a63284160755c4b5de66bd86193b</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat, TinyVector&lt; T, 3 &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DTD_BConds&lt; T, 3, 7 &gt;</name>
    <filename>structDTD__BConds_3_01T_00_013_00_017_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structDTD__BConds_3_01T_00_013_00_017_01_4.html</anchorfile>
      <anchor>df83b77207c9c3d31953ec7319a817b7</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat, TinyVector&lt; T, 3 &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ECPTest</name>
    <filename>structECPTest.html</filename>
    <member kind="typedef">
      <type>OneDimGridFactory::RealType</type>
      <name>RealType</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>3ded2c6a09760ad34e392f11c4e45f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFactory::GridType</type>
      <name>GridType</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>fc9ebf1be7ee129cc3edf25965ff22fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianTimesRN&lt; RealType &gt;</type>
      <name>InFuncType</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>b1dfe88265faa0ec8b83dae1f089f2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; RealType &gt;</type>
      <name>OutFuncType</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>3015f442bfce923d9b55435a5724c9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ECPTest</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>f38e114bda1ea581f4d337c4cb793d9f</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSemiLocal</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>aaf605722cfde5d072d94279486bc855</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLocal</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>a1e1e07dd55a1383a44e42975d6bab66</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Name</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>25dc1c6f130f801c99238a552a8c3f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Zeff</name>
      <anchorfile>structECPTest.html</anchorfile>
      <anchor>116213672d232f99923211a8bf885ca9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSum</name>
    <filename>structEwaldSum.html</filename>
    <templarg>PT</templarg>
    <base>EwaldSumTraits&lt; PT::Scalar_t, false, false &gt;</base>
    <member kind="typedef">
      <type>ParticleBase&lt; PT &gt;</type>
      <name>Particle_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>5a7e2aa7b9c2ca471baa03da082a5513</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>2155eeac49baf0a9f7d938ab22baeb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>1033a236d5a061d2cbff8b6f844fab76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>0b06d1053639d5c1d3732985ea70765e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>e2335e7aa08cbf6d850f6388c07282ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>083fee06ffded8f342535f36a4d379b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>394d2bc98199106801516d0adb73d329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>4ce6bcdec79c45ededbe5b3dbad2ea10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclPairListBase&lt; double, 3 &gt;</type>
      <name>PtclPairList_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>5e7b02baf57ccc9acea4ed024315abe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EwaldSum</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>f2deaadf5540dfc1609aa1d8d52bab01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EwaldSum</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>69caa5549e3eca713da62cf8479b21f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>217c387ccc21ef6e17ad712da25af5c2</anchor>
      <arglist>(ParticleLayout_t &amp;lat, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makecells</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>7507d9309c5339d1a817aae5d75bc677</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyG</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>8aeeaf24a1e38aeeb985fca9da3e0ecb</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyR</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>89b591b2a3306dceaa48e9e1c57df1fd</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyR</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>45726e8f5c6dd520deea20cfa796b2c5</anchor>
      <arglist>(const PtclPairList_t &amp;nnlist, int first, int last, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>forcestress</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>de194880ac1f676551acac30a3884e34</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q, ParticlePos_t &amp;f, Tensor_t &amp;stress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>8334bc7a307629acb465fe7ee7af8707</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Eps</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>ce8e3c6c3235a724440a304736f5adcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Tr_over_Tg</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>4c01018666daf1c30bd6f346899480ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>maxG</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>cd353a634122f729b31b38c55557b710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>maxR</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>340f3f6eb85508a679f66dc75730105d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Rmax</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>1b1c07f2db16789efd677c9ac5e1696a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>acclog</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>b3ea107d8c7d00aa6a466041e69cc672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>g2max</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>b10a0a39fd15de347e0842460efc3230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>x2max</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>260c61f2f442295be04392b46a56f8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>sqeps</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>d3960e8d0987cb62682f93fe18c197e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>gamrec</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>932ed5215ccef862d30cc4bef33dcdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>gamdir</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>c398ce7172c8b414882c241c924ba070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>s3</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>32e7590dce1ad48dc97830c0db44e48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>s4</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>e62c3d61509bdae4f550f58fb00caa88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Volume</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>cc2e64e19d6f7019a980112a92b26732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>E0</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>2262b2da715ae9c18b3a372ea2082d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Cg</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>9376253f1638a99b759a2516661cca60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Cr</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>71602d65d1c97b1f92fd12d9488079e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticleIndex_t &gt;</type>
      <name>RShell</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>cda101fad64f5a027a2d520db8eb0230</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits</name>
    <filename>structEwaldSumTraits.html</filename>
    <templarg>T</templarg>
    <templarg>EVUNIT</templarg>
    <templarg>AAUNIT</templarg>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits&lt; T, false, false &gt;</name>
    <filename>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EwaldSumTraits</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>fb94eb31e333d029a9b377745710719b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvE</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>87ec2a0d794a23e5c48b58ea3dc9a45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvF</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>82a78f6ae2acfefd13c0ff52a949127e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits&lt; T, true, true &gt;</name>
    <filename>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EwaldSumTraits</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>5c6308b7f0e2b36d40c8fac23b4e4348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvE</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>8d3a9b9e56380257f96f70b5e6d46448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvF</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>752ef81f2529842dc03980262f1327cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GamesXmlParser</name>
    <filename>classGamesXmlParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GamesXmlParser</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>e857eff2bbd6f12d3f91f25d8731ee60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GamesXmlParser</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>ec52ae7dbe767b3568f2420dbf41d24f</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>960687698782d6c28874c9df98bec2e9</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>aac10fb1b102a47d8ccdbd9fc7b27b43</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>db0202dbed28cd02fd304df302c316f1</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getEigVectors</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>b6fdc4415362cca38bb32bddc9ff6f08</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getControlParameters</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>ba8c4a8dc35f7036f3dde105c7887de4</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianCombo</name>
    <filename>structGaussianCombo.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>c836987f08dfc2933cf77fb99855e8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>651a73b2f06b38610a45d81d9b104dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianCombo</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>6f3526bc8f22e81b4b21794fb899b368</anchor>
      <arglist>(int l=0, bool normalized=false, const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianCombo</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>acacc659f2b9a0c1b23c3341e325654b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>6e26fcebd5be973dfe10eea243c03997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>94fa5e3d5c26392fc23dc44bacac6025</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>272296d7e1e8f5ae994f6c72cc7962dc</anchor>
      <arglist>(value_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>af497911e2fae2ca33770337f5ab97f2</anchor>
      <arglist>(value_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>e51825ffda32cfc08d2cb79884351108</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>57c9b77fade2b12e1caed38a8def1e11</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>c9ab6866211e7b129444bff7826b9a57</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>5feb13d3a979f7a56bd52c111aa716b7</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>56bd5bf7a0c5b0fcbd9a3da038df1189</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DFactorial</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>d631415120233b3aebf903e11f1fdcf7</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>2b3a91bebcbbdd9cbd46cbf2097e077a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>592c2867935d7ff21270ed3475f58cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>dbfc7b0bb26479c7294c50799a0e5b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>60aeb42f12cda5ea05434066fe4db049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>L</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>c7a4137cb40e4a19a0ad0343b58d0375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>NormL</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>b3f5cc5179aacce7adca80f8c40ddc1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>NormPow</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>8929f7f851b2543941ea2bca73d71e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>c9ac5b57a7683e3afbd6f443dbe1391f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>911430ee46708427bdc50755bf6daa5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>07c9cdfeb8e3e0e62e2ee11961fa9edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>0683e43255a69ad7cb0b19bfcd987e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BasicGaussian &gt;</type>
      <name>gset</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>061f601e4db00a79fb881e4a684ede07</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">GaussianCombo::BasicGaussian</class>
  </compound>
  <compound kind="struct">
    <name>GaussianCombo::BasicGaussian</name>
    <filename>structGaussianCombo_1_1BasicGaussian.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>50d422aa086c07d97ed784230923b440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>949da73a23ebbf65b927cf23945aa08e</anchor>
      <arglist>(real_type sig, real_type c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>fe0bc80db223ad962ef78ac216d3d5b1</anchor>
      <arglist>(real_type sig, real_type c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>2da91667d958c5da0cdae73b510d3ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>b7704f48ca1c7eb10cbf9b9cbdb109e6</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>41e5514164630a11c41aa54aaa08a9c2</anchor>
      <arglist>(real_type rr) const </arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>89b30e02edbba5f9e1005e5bffa0c04c</anchor>
      <arglist>(real_type r, real_type rr) const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a490a5fc8b61cd28a3ea52b5b3174914</anchor>
      <arglist>(real_type r, real_type rr, real_type &amp;du, real_type &amp;d2u)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Sigma</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>b343293af4a96dcc86d4cc3a514210de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Coeff</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>2098a1ac224f57090609056c064f3f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>MinusSigma</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>9659213429bd0e280c2fd6edeff5e9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffP</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>6a9bdf09bfbbab4f5c280de3c5bf9a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>CoeffPP</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>cf940bf169d96e84333ee6040a2c069a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GaussianFCHKParser</name>
    <filename>classGaussianFCHKParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GaussianFCHKParser</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>39f4920a6befc62776b2129bce37299a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFCHKParser</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>17443d259aec08d6a8f81759b47ff6d6</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>0ad40d363a8f2ecf11e2b7e07d69623d</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>7b2664c97bca983152cb6d122cf255f9</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>f5173021da8f9ec2c7eac5f3c62e278f</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianTimesRN</name>
    <filename>structGaussianTimesRN.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>9ff115f66ce136c66438b949f0176bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>2f04a3da0d72a789c32329703f9ee167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianTimesRN</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>2082ac88c03cba17c8914290d249b511</anchor>
      <arglist>(const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;, const char *p_name=&quot;power&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianTimesRN</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>bacd32b356bafb9d0348fc65990213bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>63cae25acf97fa64e16b3fe6ba227294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>9a8c0deb320d2c1e96632610b3a133b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>47434dcf0336dee136bcb955e01a301f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>f3a14c0422aaa3f8e373c0454776ffd3</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>e27788fe8373aaf5529044e30ac7ae83</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>f0fea70111e7482ed817c33ec4030b68</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>86ae12c532f03e3ea530d4256dcf42a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>ba9ad29c2e46fb10d962d3a875903803</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>7101e8768a7fe2c80878e90f60b9782b</anchor>
      <arglist>(xmlNodePtr cur, int baseOff=0)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>85165e78227913a3a85febf1ba4b6546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>1ad465f07b52baad5d4b224c0c85fb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>e1b317baaeb5741d77674d72ac5245f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>basePower</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>6e09ac1bb3dd62970ec58d96a3009ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>0397e47e2fb4a70ce355a720dd3b30d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>c8ca39927232ef2fe3f8070dcd94ae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>a46cdc0ef15d9ee985bc01c6df7e9fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>powerName</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>96de72e25b879b8656adba9e09903188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>7f6e98270467d498065923a1a3632c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BasicGaussian &gt;</type>
      <name>gset</name>
      <anchorfile>structGaussianTimesRN.html</anchorfile>
      <anchor>72bf709e03739dea7496976dda7cd07d</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">GaussianTimesRN::BasicGaussian</class>
  </compound>
  <compound kind="struct">
    <name>GaussianTimesRN::BasicGaussian</name>
    <filename>structGaussianTimesRN_1_1BasicGaussian.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>97247608b725ed6ae0444c0240f5b49e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>60f59ac3b0f69ae28d1c2628d3f555ff</anchor>
      <arglist>(T sig, T c, int p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>0dd1afe67e59a5fdd8d84b3b945467bc</anchor>
      <arglist>(T sig, T c, int p=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>c1fab37c7be6e850aecebed5bb2ea221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>ea44dd389d52a4ace22a7a9068217c30</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>1230b443cedfdefb5e1a472a84a6c79c</anchor>
      <arglist>(real_type r, real_type rr)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>f0595bd988349e9ca1124246308fa234</anchor>
      <arglist>(real_type r, real_type rr)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>2cf0e90940516004c232ea5bb9f3bae5</anchor>
      <arglist>(real_type r, real_type rr, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Sigma</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>1ed43a0df27c8e29f2267c0062e24e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Coeff</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>8cd71016c654a866d7aa412fd85bfff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Power</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>b66a1fb6f9f7de497e3d18280f68fc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>MinusSigma</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>248b0b0d32abe8acc417bdaaebbf1167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>CoeffP</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>f3242a84e7a2e62f20bde1f34a4d369b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>CoeffPP</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>a513a0c77d9229b645a1c3d5f8aaa4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>PowerC</name>
      <anchorfile>structGaussianTimesRN_1_1BasicGaussian.html</anchorfile>
      <anchor>2a627019c070c235fe193d701825d93a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GenericSTO</name>
    <filename>structGenericSTO.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>b391432467b65c6303d210ba2a1107bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>7b461dfc2e254c53e2e3122bf12d7977</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>e7442e5371a8c85dbcdcc5fc23420c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>3603036592cf44288adc136928a5c721</anchor>
      <arglist>(int power, real_type z, real_type norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>f511c63a263c208b9a54e3d5ed01512e</anchor>
      <arglist>(int n, int l, real_type z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>fd90f2fac338614fd1f7f74e656994ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>4b478ba4ec9573c232241af1180ce56f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>97440baaf36ef412448b0626ee78e49c</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>9185a60b2d84bab0013894e424a59f75</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>42888115c5d69d9be7ecb4518e47501f</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>0fd71d513f5f0cb5b80aec7a266ba9e2</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>8ca1b23a5529d1deba0b662818910709</anchor>
      <arglist>(real_type r, real_type rinv, value_type &amp;drnl, value_type &amp;d2rnl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>c71aad52c07d9ba17967d7e0b30821df</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>1736d38f6c7bdb2618a058dbfae4a4d6</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>12370d0c71ee0d9933bf1884d7cf5b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>b81b88dc0ebddd8d8edcc3f680ba2509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Power</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>7be8169ca555814a5ef92267a4321a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Z</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>8a4704cfc8aa8ec82558c18dbf41518c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Norm</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>ec8496d3092b399b8417f9112f4e6c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>df8c53176315079531a72173d21e7c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>d5c0ab09743def408567bbcc1205617b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>ca3cb4dad4eb05846bc4034ffdf67ae6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GridTraits</name>
    <filename>structGridTraits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>GridTraits&lt; double &gt;</name>
    <filename>structGridTraits_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>point_type</name>
      <anchorfile>structGridTraits_3_01double_01_4.html</anchorfile>
      <anchor>bff781940f78293c92fdb7287d690c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>structGridTraits_3_01double_01_4.html</anchorfile>
      <anchor>d0d549c962d26af79f27a82b551a4519</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GridTraits&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>structGridTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>point_type</name>
      <anchorfile>structGridTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>109a5b814634fc3ae77358f512de8966</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>structGridTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>511354f9a815b9eb244fc44235fe771a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GTO2Slater</name>
    <filename>structGTO2Slater.html</filename>
    <member kind="typedef">
      <type>GaussianCombo&lt; double &gt;</type>
      <name>GTOType</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>83bdae6833fe39a2091179f106b04107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogGrid&lt; double &gt;</type>
      <name>GridType</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>d674f1ea1a659d86075e749aae869ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTO2Slater</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>a4435ed0bd934e05a33c17d352d7237d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>f697ea1763e595a370c05259ba349999</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>5a112042f5cdd3fbd18fc94a93960423</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimize</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>6f1d0596cdf816817e35681da0e21fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>09989ee437c6241691a6d2716c68c81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>34ce370841bd9f3853bfb353ff4993a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>gridPtr</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>e7cf2e566b71dc414560d8e9d8e06be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, xmlNodePtr &gt;</type>
      <name>sPtr</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>24d5e7a56bf00a6027c271bd461d8eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; PooledData&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>PooledData&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>d076c03d700a787e7d32fb82f14a4920</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>38cd583d0a8549faad21b894051fdaf9</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>dd61c3d18f7f35c23d2ebb564bd5c221</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>ed66fe9044e35df6c223416977a18890</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>63d69c4fcd28ce4b746139feb7268dfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; TriCubicSplineT&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; double &gt;</type>
      <name>Data_t</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>8a42e6bb1ffdda447380b6b31ac6e24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>d4cf0f30094a289911b25562b33833cc</anchor>
      <arglist>(Data_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>8439dcd3d91c03be0d5d7cd6419a043a</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>3251e26db2e5b1c83ab6ecdd8cfcbeae</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>Data_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a88afa972a244cd4621060043fbf5f70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HDFAttribIOBase</name>
    <filename>classHDFAttribIOBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>Libxml2Document</name>
    <filename>structLibxml2Document.html</filename>
    <member kind="function">
      <type></type>
      <name>Libxml2Document</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>b5210b90f9b8bb7d4b9510568e2911a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Libxml2Document</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>3ce5c47c368d3d0cc288f1728a8c5ba6</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Libxml2Document</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>2c4fefc70453ab22a1c136dbb6881331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>18b562555e5906b19cae2c943b03ce3c</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>xmlDocPtr</type>
      <name>getDocument</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>b1940dca520d5129330c051f57436c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>getRoot</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>2ec271c5552f429652c75ad54a3ddd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlXPathContextPtr</type>
      <name>getXPathContext</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>a5e08704ed97f5750a16191726123017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>2b95f8b00e579b43b454e4123191f5f3</anchor>
      <arglist>(const std::string &amp;newxml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>5ef58e4e1697a85d6de5f084f2115489</anchor>
      <arglist>(xmlNodePtr newnode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>96e5d1199f57e462aa1d5e7bc0e9afe9</anchor>
      <arglist>(const std::string &amp;expression, xmlNodePtr newnode)</arglist>
    </member>
    <member kind="variable">
      <type>xmlDocPtr</type>
      <name>m_doc</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>02f2b9bc4d2d42623c52b1dacdd95676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>m_root</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>79cf5d8a99ff06867fc09b0ed0dea8f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlXPathContextPtr</type>
      <name>m_context</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>8e08c843bccc89da4546b8f5ed093b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>InFileRoot</name>
      <anchorfile>structLibxml2Document.html</anchorfile>
      <anchor>ccb5a09126b8d1d1fd8db4c3eacf59d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSpline</name>
    <filename>structLinearSpline.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
    <base>LinearSplineGrid</base>
    <member kind="typedef">
      <type>LinearSplineGrid&lt; T, GRIDTYPE, BC &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>36f7d59199bb2310dc350250ba81da9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearSplineGrid&lt; T, GRIDTYPE, BC &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>694fe7d287df2908a290bf08c31190d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearSplineGrid&lt; T, GRIDTYPE, BC &gt;::container_type</type>
      <name>container_type</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>585ce21026baafd3a07facfc49c71e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearSpline</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>351296e31ca0b8935bc4ef2738251013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>cd6046721571b211506a28b5e9420f94</anchor>
      <arglist>(T start, T end, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>8d47cbebb7182a656788ccfd5f092216</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;datain, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>8139bf339d9164623790e3c2d8b74869</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>f69fd235c9057451b0f363ce06504527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>structLinearSpline.html</anchorfile>
      <anchor>b5c535f21909bda0074b7bfaff52ca7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid</name>
    <filename>structLinearSplineGrid.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <templarg>BC</templarg>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid&lt; T, CUSTOM_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>aa11b983a34916b6af61208597ab2b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e2b7e3d7453c02bba7efd8485c80eb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3c65ec03454f987f7901a61c4558190c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridPoint</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>2dc45c25210000c80336e88da9f51095</anchor>
      <arglist>(point_type xIn, point_type &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>f30bf67bf4d42eb9c2496be869bee85c</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>577fdf5c576651429a69195ceebc81c4</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>d3c812e119cb3764622e1dccf1684cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>d6271a6c97cb6b1360ae5c66953d5b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>14fa650d1b2b99dc3862e7aaad57abde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>e675ec07ac107324251d05743627ee0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>container_type</type>
      <name>X</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01CUSTOM__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>61b155b1d8726a8f7d9c1bc316c44892</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid&lt; T, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</name>
    <filename>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>b6dc2b8c9085401e4247932d92c75678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3fce17121d8e0160e23842a1ab0c6d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>ad328ced611c31ce3f9747f536aba025</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridPoint</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>4dda8520019240965ab9c79d09459605</anchor>
      <arglist>(point_type x, point_type &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>5ce37c024b403461bb6310e038c5847b</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>51e7078132fb5ea6759874b45ac54f98</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, container_type &amp;dp, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>3ac0a05a04afac0a1312d5b1537cc182</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>f7c920a86431d55a51ac6cce39a1c53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>6632b3038fcfbe077c575ea4d6d34b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>bc4576c402cd638860c96ef2762e9de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>080f63dcacf4ef74734cb4b10b73dba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>a4cea7c2db99f1f9af21260b71d542eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01FIRSTDERIV__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>aca964f4d7eae46d0a8209db95d103ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearSplineGrid&lt; T, LINEAR_1DGRID, PBC_CONSTRAINTS &gt;</name>
    <filename>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>afa08cc2da3c9f319af29f72eddb50f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>44c7d3eddd24d1f0968f0f5c1da3f8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>a131018cdad7976f3445d130b63c80d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridPoint</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>6fe8b32e287653f3b77ee2f1e8a4ea97</anchor>
      <arglist>(point_type x, point_type &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>444d1ab47139e595bd55c51f5adf41e5</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>0b9a4e3c7170fb8bdc6f84d4e4480cb0</anchor>
      <arglist>(const container_type &amp;ng, const container_type &amp;data, container_type &amp;p, bool closed)</arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridStart</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>9e1aea0a7bbc7a5d315fbf0c551a4942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridEnd</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>7a6a1f59868ee3dd56f21ea26efbe65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDelta</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>091c888657ee90194f07c5310a67e787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>GridDeltaInv</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>548b5550572481a1f9c66f8a7adf40fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>L</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>0850d12808cb0dce98a4d30f8d1b4757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>structLinearSplineGrid_3_01T_00_01LINEAR__1DGRID_00_01PBC__CONSTRAINTS_01_4.html</anchorfile>
      <anchor>caf4c781b06c80d732596441eb043c27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatGrid1D</name>
    <filename>classMatGrid1D.html</filename>
    <member kind="function">
      <type></type>
      <name>MatGrid1D</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>4144f849dac05662d6e0b4f407c2b433</anchor>
      <arglist>(int nsections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>76dbb43db973431cb85637c4b77b2ba8</anchor>
      <arglist>(const Grid1D &amp;aGrid1D, const std::vector&lt; int &gt; &amp;ix, const std::vector&lt; int &gt; &amp;prior, const std::vector&lt; double &gt; &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prop</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>d7957f2c41ba9a40baf073ff4b930bc6</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nsecs_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>b9702a7e35714774898d7b0c86df711f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix0_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>4c18f9c46298d5ece9516ff648f42fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iaxis</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>6af65101560e9ad46b3f17b2f7f65d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>d_ivals</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>39908b98e1a4febd3607e5716c14f8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>prior_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>e40ebb13d04d873f291f0316dbe872ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>prop_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>6ddb43c07b1a41aa5bbe4ec3f89e0ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>dx_ivals</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>55a7684dfa249a0b62f4ccc69562999a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MCWalkerConfiguration::Walker_t</name>
    <filename>classMCWalkerConfiguration_1_1Walker__t.html</filename>
  </compound>
  <compound kind="class">
    <name>MinimizeFunction</name>
    <filename>classMinimizeFunction.html</filename>
  </compound>
  <compound kind="struct">
    <name>NoBConds</name>
    <filename>structNoBConds.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structNoBConds.html</anchorfile>
      <anchor>eaca7bccddebb9077f6c6b873a17abe1</anchor>
      <arglist>(const CrystalLattice&lt; T, D &gt; &amp;lat, TinyVector&lt; T, D &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq</name>
    <filename>structNormRandomSeq.html</filename>
    <templarg>VT</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>structNormRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>0dbbdf8608662e728c3ef281df624d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e5cb6c1d6fcce43ba1c5e02b3bd80160</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</name>
    <filename>structNormRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>ab5ff6920cd5167993a4c52d44e0e648</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>96be0c10ec284285738ebb5f7a9d73c1</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NumericTraits</name>
    <filename>structNumericTraits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>NumericTraits&lt; double &gt;</name>
    <filename>structNumericTraits_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>structNumericTraits_3_01double_01_4.html</anchorfile>
      <anchor>e8f5b04129ed6c42740a2af0e587a051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>structNumericTraits_3_01double_01_4.html</anchorfile>
      <anchor>989397fb122aaef1dc6b92b2dfca3d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>complex_type</name>
      <anchorfile>structNumericTraits_3_01double_01_4.html</anchorfile>
      <anchor>0cdae037cf41287beab91e86a18b9a87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NumericTraits&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>structNumericTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>structNumericTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>427afbdd04a5e20e0585a0ea4e87d5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>structNumericTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>496ae2164930a036beb4d1cb9bdd8839</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>complex_type</name>
      <anchorfile>structNumericTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>26c8df3ca640e224f57cdfa09da51867</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsAsciiParser</name>
    <filename>structOhmmsAsciiParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>skiplines</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>fd043edd14d397c2d95da523426b1c78</anchor>
      <arglist>(std::istream &amp;is, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>d9be986c6027f8746e1d1758083466de</anchor>
      <arglist>(std::istream &amp;is, T &amp;aval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>ed0a42243047c61605e3109f61de19e8</anchor>
      <arglist>(std::istream &amp;is, T1 &amp;aval, T2 &amp;bval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValues</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>c3c93c10010c1a61ac803741598d4790</anchor>
      <arglist>(std::istream &amp;is, IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>57afe4c411480391238d89a2ab0c1cd0</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;keyword)</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>dbuffer</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>8d9dd1aa09fcf45c395823e1d5c6f175</anchor>
      <arglist>[bufferSize]</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>currentWords</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>84570c59eef3dc4770a56fc3d95a73ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>bufferSize</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>16a773b3dbb2430bc1e70e613ce7ffa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsAttributeSet</name>
    <filename>structOhmmsAttributeSet.html</filename>
    <member kind="typedef">
      <type>std::map&lt; std::string, OhmmsElementBase * &gt;</type>
      <name>Container_t</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>0be6a6f92a4e4c1d3af350a0f069f1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>bbfab7e6941df98f91b3272f6b744482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>93132acda4c5c4ee565ad40fafd37563</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsAttributeSet</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>b51321ac93e5a845e9a68ff62365eb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsAttributeSet</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>f7c3161dd8a8353d8c508981bc3f531f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>f9359d88e6a86715804899aaf25fbcab</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_ALL void</type>
      <name>add</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>db04e789173db669202e9eb653b75605</anchor>
      <arglist>(PDT &amp;aparam, const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_ALL bool</type>
      <name>put</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a3e79a1114cebdd995965b76fb5c0996</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a36c02f5dd427b5c2afecde6b8111f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container_t</type>
      <name>m_param</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>9a297b61e57f5c3569fd90c0476373d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsElementBase</name>
    <filename>classOhmmsElementBase.html</filename>
    <member kind="enumvalue">
      <name>useLIBXML</name>
      <anchor>90953763e60c7cb12af1e735049e7bb86525d4b5be896d1f7cb91b32e2db26e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useLIBXMLPP</name>
      <anchor>90953763e60c7cb12af1e735049e7bb8a10695c48161347b615a28180e9f4bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>usePLAIN</name>
      <anchor>90953763e60c7cb12af1e735049e7bb812631405e985a9911025d7e0bec0ba7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsElementBase</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>98a1b19149dfc96593d61ea4dcd30350</anchor>
      <arglist>(const char *aname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OhmmsElementBase</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>75a031e06e760146596f8132be465ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>40d6f317eed5549ee458561c7fe11b89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>29626a75e5514703ed521ccc4503cf30</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIOMode</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>2eeb26a386ab98398ce8a5571aaaadfd</anchor>
      <arglist>(int imode)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>443b91d593cfe9ca625917cd68423651</anchor>
      <arglist>(std::ostream &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>dab08a7c036bd10f317710b81102a8a6</anchor>
      <arglist>(std::istream &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>4aef76e0f8c88a5c62d76715d579bd8a</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>6551618ebfb9c220f9c9bbf7b7d6c420</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a1692017b5f7aa7b74beefe26aacfbec</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>06bc874fb15c1d4dff9a7d35069fb968</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>begin_node</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>ebb622676378ad761025590279e0f1e0</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_node</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>e287487039b604d79d607afedebfef93</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OhmmsElementBase</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>d37b912a81fea44f28d85f999b8f7113</anchor>
      <arglist>(const OhmmsElementBase &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIOMode</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>6bbe6010061c18af3d7b07a132299904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>068f69f1bd995012b1cd53eef71115ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsInfo</name>
    <filename>classOhmmsInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>825c6468b4036cf3956afba533932dae</anchor>
      <arglist>(int argc, char **argv, int master=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsInfo</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>65c4c983b528623a332a3eb56d6616c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>942984fb07fe94804ac6a1874dd86815</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>6375cf6bca11c7d1a7347fcf8fd7b48f</anchor>
      <arglist>(const char *froot, int master)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>die</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>4ca2d50c6427b84a5fef7efd68607038</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>flush</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>46f74dc873e06a34175ff8af6786be73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static bool</type>
      <name>Writeable</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>3124d71dc712336eb1526d9a050802f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Debug</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>8246fdff01ae406a54acdbbeef8d272a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Warn</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>e47f31f192c5fa6dfc9a37971be6dcd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Error</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>620b4748207b667d6ed55ac6592fd189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Log</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>fa5f0a06135d85f7b6ad1678c6ebde4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsInform</name>
    <filename>classOhmmsInform.html</filename>
    <member kind="enumvalue">
      <name>OVERWRITE</name>
      <anchor>ded7145c8e337de25992dabacdfc87c9650f5e0940033166374977c68fbe6114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPEND</name>
      <anchor>ded7145c8e337de25992dabacdfc87c949b0b0b9abf13349cdc2b9f446f883a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>e0a99d4d39b3564156cafe11be6e3168</anchor>
      <arglist>(bool allcanwrite=true, bool writenode=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>c040d995441345bbef06e19f50c92e49</anchor>
      <arglist>(const char *prompt, bool allcanwrite=true, bool writenode=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>465512cfd06725fd4a8d77ce64c684f5</anchor>
      <arglist>(const char *prompt, const char *fname, int appmode=OVERWRITE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>00f08c5bf86467fd1130f9fff8942cff</anchor>
      <arglist>(const char *prompt, std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>104caf6109ad3f2d967fdbaf5052728c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>80d80fc7ab4328040acfe12891ff6920</anchor>
      <arglist>(const char *fname, int appmode=OVERWRITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>1c29cd980ab2761a1bf381511c362f0c</anchor>
      <arglist>(OhmmsInform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>4df4286412d9e40d63a849f7576022a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getStream</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>9fa6cfc60453b3db30e7424a3576d6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>1c5398f0e9e4f91d38ff19d841904296</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>thisPrompt</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>5680043dac585ca33504ece255782037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream *</type>
      <name>thisStream</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>679d59720fcfc500e93e1317a986df8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OwnStream</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>c0599a3a4cebff095acd5a01a60d8158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>CanWrite</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>ce8d467502356903cf1ea156375d1dcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsIOBase</name>
    <filename>classOhmmsIOBase.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsIOBase</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>23e26e5a33099f938e926cec6497328d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>46d07001f1b120fe1b28a65ce8048f76</anchor>
      <arglist>(const char *, ios_base::openmode iomode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>e27d01304d171945ca280836da35ced1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>90211d104485d0f0e8c9d978101555c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>43207433cfe89c5685e817f84fdb68a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>d97f0c8b7753f2b28f8ed9995afbcf49</anchor>
      <arglist>(int iter)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ios_base::openmode</type>
      <name>Mode</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>98f1e8c70ce9c0bef3d7b2fd18d62d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>5986e6006e5c9614b70bd06e4cef9001</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>OhmmsIOBase</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>94b5c87e3c30617177fbbb46c6ed7a0d</anchor>
      <arglist>(OhmmsIOBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsObject</name>
    <filename>classOhmmsObject.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsObject</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>c54488caf34223ed408f174203475945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsObject</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>08a2492129218c6febcffad69c72fc3a</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OhmmsObject</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>295cfc67711e174088623d2a1b82118e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>8f7db91593be0b71aba26d020c39342e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>229ecf4d0043cd0a09df1f04f5711a5a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elementByteSize</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>d4959d8420902e19108f137dbe2c8b9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>adcefb6e050769826d3d7efd2ca6991d</anchor>
      <arglist>(const std::string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>4ddd3151296f199cbc83da48444462c2</anchor>
      <arglist>(const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>typeName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>dc47990c6c69ccb0ce3ca1641f412083</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>objName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>226622038bfb39cdcc78b17cbfb04453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>TypeName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>c299ec718acaa83a1db0a6b8ac015006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ObjectID</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>67a3d31f57389338fb5fa01a556e1613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ElementByteSize</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>01f2f4b94562f8d4b280fcfb1b1fda1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>ObjectCounter</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>ea6cb2cebdcbfa2732761d3d5214cbf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsParameter</name>
    <filename>classOhmmsParameter.html</filename>
    <templarg>T</templarg>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsParameter</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>5550242583b1d79264405d945fda6c1b</anchor>
      <arglist>(T &amp;a, const char *aname, const char *uname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>d99246be5b945a79cfdc67c4a5d617fa</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>754a00d090635fbd9c869140a0e98a3a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>778de7023e12f2f3afcb1ece0548c926</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>63f4eca81f51ff7ad8611ca97e52e8be</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>58e67dbf96c62d099671aed8d062ed8e</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>3ca5752ebf37339001239185062b7baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>ref_</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>139e6bcb8d05aa8b6555b778461ed76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>unit_</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>c54cc17410e4cf432e0dc718e86b8648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>node_</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>a1f65e3a7e2337268011655a3f2c8bc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsParameter&lt; bool &gt;</name>
    <filename>classOhmmsParameter_3_01bool_01_4.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsParameter</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>574d7761e872214126f0cf9100b6a7d6</anchor>
      <arglist>(bool &amp;a, const char *aname, const char *uname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>17c02a2e27a9f9865cf5a3755f679b8a</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>d532d62871727f005641398c59be8948</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>0bf289d8a4c3d9ed21f0d84ba9e70759</anchor>
      <arglist>(bool x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>158b24c5a7c5ab2cba07b04680632543</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>68c20477176c7bef744c983d034bb625</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>47c76f7eb9490482bec4d1c67bd2d5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool &amp;</type>
      <name>ref_</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>bf5c611b8655c892cb2a7a5a16c550fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>unit_</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>1d3cd44a89ea42a949031799a1366622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>node_</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>7d77891b238294011548c5d084986e84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsXPathObject</name>
    <filename>structOhmmsXPathObject.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsXPathObject</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>3aab5ff1308df7bb3197a1d725b6d6d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsXPathObject</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>c42298fefecd93ba8d48d818ba053639</anchor>
      <arglist>(const char *expression, xmlXPathContextPtr context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsXPathObject</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>9a047bcabe0c09105a3799d1b11091fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>170ac1be9382def5a04c230fe1654b05</anchor>
      <arglist>(const char *expression, xmlXPathContextPtr context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>4cd72fbe9dd4bf5305fe95b0e4b49824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>cb9710587bce9a2cbf4927be92f64094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>operator[]</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>c169aea3f966152743bf752f38542e8a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumObjects</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>7fe08a8f84374053b0053e313f4b2a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlXPathObjectPtr</type>
      <name>result</name>
      <anchorfile>structOhmmsXPathObject.html</anchorfile>
      <anchor>6ca99fa00bff7e60b7461eb818e3f417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OptimizableFunctorBase</name>
    <filename>structOptimizableFunctorBase.html</filename>
    <templarg>T</templarg>
    <base>NumericTraits</base>
    <member kind="typedef">
      <type>NumericTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>e9f2e5402f55d700f47cee6cca85239a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumericTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>34b46b00f0691d659be02bd43764b355</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>ce3c7cb1c97e715f5476401603caf335</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real_type</type>
      <name>f</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>133598a885a902f6174693994a2f35fa</anchor>
      <arglist>(real_type r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real_type</type>
      <name>df</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>89bca82dad7ca10a1369d8e48caa1523</anchor>
      <arglist>(real_type r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>adb81f027d2e95e5fb172d4f0fc73eb4</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addOptimizables</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>d7a88ce056c633e1d671d501122a6c80</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDensity</name>
      <anchorfile>structOptimizableFunctorBase.html</anchorfile>
      <anchor>2fbf10d43e61a830eaac1f0325802680</anchor>
      <arglist>(real_type n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OrbitalBase</name>
    <filename>classOrbitalBase.html</filename>
  </compound>
  <compound kind="struct">
    <name>ParameterSet</name>
    <filename>structParameterSet.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, OhmmsElementBase * &gt;</type>
      <name>Container_t</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>aa355d89fe7ebd47f9067235cd952154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>8391ab4815537929ea2b7fd031fe5837</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>7dc639c8ad7c5c7d783274c071116d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterSet</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>0430a3f4405647b86528c7dc4d752a1d</anchor>
      <arglist>(const char *aname=&quot;parameter&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParameterSet</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>7660dc9a94334836886afe4376c69dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>29fbc0668254bbdb0070c5cd417377e9</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>86ab4cd99e17c7d69b6024317e66751a</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>236b0d270e8c3e229bfa1a6e8ddc9e8e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>00016ea2c126ef494ece1b7f3d2778f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>56cdab06f72ccf853068a0ba8421c045</anchor>
      <arglist>(PDT &amp;aparam, const char *aname, const char *uname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>e52d2bf5913aa08bbb9c885123113609</anchor>
      <arglist>(const std::string &amp;aname, PDT aval)</arglist>
    </member>
    <member kind="variable">
      <type>Container_t</type>
      <name>m_param</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>d6d93385c67f692351e857b59b3c45fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleAttrib</name>
    <filename>classParticleAttrib.html</filename>
  </compound>
  <compound kind="class">
    <name>ParticleAttribOps</name>
    <filename>classParticleAttribOps.html</filename>
  </compound>
  <compound kind="struct">
    <name>ParticleTags</name>
    <filename>structParticleTags.html</filename>
    <member kind="enumvalue">
      <name>PA_IndexType</name>
      <anchor>74f0fc9ffe923b098ec448cb101911ba5f2d19de3637fb93a15b5b1565446d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_ScalarType</name>
      <anchor>74f0fc9ffe923b098ec448cb101911ba93b532988330a633ec46d02cc2e4ecd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_StringType</name>
      <anchor>74f0fc9ffe923b098ec448cb101911ba93052f0a670766a92b3e04ba4dcf0111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_PositionType</name>
      <anchor>74f0fc9ffe923b098ec448cb101911ba5d3c0f5e0e3ce3bb52326c630bc2b87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_TensorType</name>
      <anchor>74f0fc9ffe923b098ec448cb101911ba441a50b8fd3b44ae4e95cc8305880c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>null_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gc863be1ca79f32a24a1c60d8e679bb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>indextype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gc1f0bdbc199db7fdf4e827d876782464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>scalartype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g657a0b26a0aee1db708979cd497fff8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>stringtype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g07cabf58fc65aaf31855b42fda3afd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>postype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gf1b5fe579091ee4a6f713579a8302d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>tensortype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gb5876fa616801bd84212043350500b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>xmoltype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gaea56dac0a8ceab4c198c94452243b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>position_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g779eb89399e955148b459ac171b9d47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>id_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga231bef424a89fde5295a98a3ae1d6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>ionid_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g85572f7f649a3bd7092f719ab283ebd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>trajectory_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g80ce076bc4e3175aa0d690879e461e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>force_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gd14728a1b2bac855e6ccc4d8e82c57a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>velocity_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g87bbc0237bf94d436c3d4c4d83deb219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>energy_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g60e9985a5c241014e41c2f164be5f678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sumbc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g7cc2bc667172a5c540ccb2b5d597d51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>root_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g3b9f996b0dc39268a061ee6fff71807e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>attrib_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g64efa4143e857e1145acca003f911096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>name_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gffb4f9d110daca2d0f2ebeaf0f349b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>datatype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g867c72183586652d122914a364de821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>condition_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g89b93b4ba0bb5e0f33c5ca4f7cd48dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>size_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga07d635d0fb2071531a063784d6e7a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>format_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g668fe55a2e4daf770f8bb371008efcf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>role_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g3593878862c51350f1eb52fdf31616b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PeriodicBConds</name>
    <filename>structPeriodicBConds.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structPeriodicBConds.html</anchorfile>
      <anchor>5217fec2fdf81352e578648621307371</anchor>
      <arglist>(const CrystalLattice&lt; T, D &gt; &amp;lat, TinyVector&lt; T, D &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PooledData</name>
    <filename>classPooledData.html</filename>
    <templarg>T</templarg>
    <base>std::vector</base>
    <member kind="function">
      <type></type>
      <name>PooledData</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>21aa4b6813cf72baa6124c2ac7be4260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PooledData</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>b4902ccae3ee6cc91c99ae5082401730</anchor>
      <arglist>(const PooledData &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>PooledData&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>0d4b3d46a17b2eba0e9f6f4a18132f02</anchor>
      <arglist>(const PooledData&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>9503eb40dd39a642ee962571dc582d87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>40a66b8dfc8f252d48cedb1d09524a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>48cf1e1e270998c0307b9df86fb8d1c1</anchor>
      <arglist>(T1 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>2f31b5350206ce9511369cdba6bad5f0</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>d01bbe873d1e21545133fe94b7f05d7f</anchor>
      <arglist>(complex&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>9420fbbbc99a503d47f3e5e4d98a9a97</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>09f45263fdc9f35960b814942e682fe8</anchor>
      <arglist>(std::complex&lt; T &gt; *first, std::complex&lt; T &gt; *last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>42e740c700cba74327d383d1a9e8f835</anchor>
      <arglist>(T1 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>88bb3ff7bada846238616b662a69c7ea</anchor>
      <arglist>(T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>1642724257cd2045876eb39c1cbf06bc</anchor>
      <arglist>(std::complex&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>ca333d7012a68f59b7e5f5b0d3dcfc3d</anchor>
      <arglist>(_OutputIterator first, _OutputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>d98077b23ef0785398620027defdabf9</anchor>
      <arglist>(std::complex&lt; T &gt; *first, std::complex&lt; T &gt; *last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>617860e3f00ba8332c1ccd0cf1519272</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>6e287fb1b3cfa861be5d595a78804bd3</anchor>
      <arglist>(std::complex&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>c0b0cb23f12cc76e2a1ce265b6a78da9</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>92cf81a57ff7176341651e131cbc7782</anchor>
      <arglist>(std::complex&lt; T &gt; *first, std::complex&lt; T &gt; *last)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>666f6ed823f891991650c090d1993dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>750a9ef9425fdf5fbfc17d63d77afe2b</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>f1cfe3e496cc12ed3e0c347fc06070fe</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>46442dbbd5b5c26b70b8ff12dff00a49</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Current</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a0b6bd1ae5e2cf2b4dd097c71a2ed517</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PtclOnLatticeTraits</name>
    <filename>classPtclOnLatticeTraits.html</filename>
  </compound>
  <compound kind="struct">
    <name>QMCGaussianParserBase</name>
    <filename>structQMCGaussianParserBase.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>340b58fee5df00d9d777ead2ea930fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>bd9cfcf6e66d8e7a4f253179f875ab8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCGaussianParserBase</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>02df0e44fa40ef8a9a23dac444b80fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCGaussianParserBase</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>c1924d4fe162b68c2f8c3bd3b3fb1141</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOccupationNumbers</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>afacfd85c9995837a5de53c033a38af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGridNode</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>4cf165379aac2994016fb744fdc7b93b</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createElectronSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>7a4ac54943c46b76cfe3fdd04debce87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createIonSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>e5f8cd3a9ee609927a630e5fff70e55b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createBasisSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>446877f52bf7bcda1f5d9cb4ca3832e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createCenter</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>b96edb80640a15efb0e769cb7254426a</anchor>
      <arglist>(int iat, int _off)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createShell</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>e5b9a93917b04cf21217ea79791e5bbf</anchor>
      <arglist>(int n, int ig, int off_, xmlNodePtr abasis)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createDeterminantSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>be4d650a1428a9701faf08ee1c56af38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createDeterminantSetWithHDF5</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>4e8df869efbc447193fb08195d0975db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2GridFunctors</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>cf4171c83ade676b1273d64caa2d30f2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>75028d2044940654a78bbea1b1a8d3e9</anchor>
      <arglist>(const std::string &amp;fname)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>ccacafc0f1b71345d05c9238b52fecde</anchor>
      <arglist>(const string &amp;psi_tag, const string &amp;ion_tag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>bb03cc1a6066368e94a2b35a5d5b4089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>BohrUnit</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>bcf6698844204e982eea6258cfa167c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SpinRestricted</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>e96280adf0cd6a6599a3cf49f32a9d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Periodicity</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>0fd00ac33258baf88dfcb248a88541b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseHDF5</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>070fe27b71665558d118de1de8006fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>IonChargeIndex</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>8c9a0d7c0a3bbcf7c3758ac2478adca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ValenceChargeIndex</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>6b8ecbf96048aed682ac1f4f49e0ba1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>AtomicNumberIndex</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>5780f8ded898b6d0e6a316d091cb6ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfAtoms</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>12b8c8bd7dc148b1b2a6ddaa1ad0671a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfEls</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>6e9cd9e7dabe449125b80e72296a88fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SpinMultiplicity</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>88cf885d776b10c41a84a6aee1d14cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfAlpha</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>e28210cf027776bb90813372faca8889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfBeta</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>6744c088de5e53a7dd0550072bbe7abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SizeOfBasisSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>abf7d8b0a17418fc7afba44feb9e86a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Title</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>6834b532408e8a0ab6b692ff339f60ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisType</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>38aa3c6d3baa62670c5fa5d6ac92af2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisName</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>925c0cfc5f92e9235e136cdda5286fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Normalized</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>77da73f8ffbcbfcb38a7b8f802ba5273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>CurrentCenter</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>c27ffbabb727fc6c759fff3430f55dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet</type>
      <name>IonSystem</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>06f66e6b1fd7edaec7e2718e4f9da8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; string &gt;</type>
      <name>GroupName</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>7d5383ec26e2694baf877ac9fa5120dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gShell</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>69ade54b0f22b5489d8684558cef3241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gNumber</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>1dd3b43413dc3603bfa11e80eccad7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gBound</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>cd21ac602f97ec0f0536e466a13d7eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Occ_alpha</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>67de5175043ca7510e2e08a01ee999ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Occ_beta</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>7f5b59e0ab71596c2b784e43c77485c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Qv</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>d9231fe43a3aab14998833296a796704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gExp</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>f3f7ef8ac64d1b2f2e24e65d131865c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gC0</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>3a3223a38b370c880b7ad9763d01662c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gC1</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>4b27e7f34a9bae9f6d1a6330ca0457fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVal_alpha</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>53b07043a62feb6289ff0229bf758547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVal_beta</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>2ff7e96d4deebab2a656765eb517a3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVec</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>584bee029900f0a81b9cada87cf564a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>gridPtr</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>12e76900ac41bea98d8b283811437c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; int, std::string &gt;</type>
      <name>IonName</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>154287c250537569eb30aadf12a58f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>gShellType</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>f8e6183c01c6a71fdcda7f35675b40cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; int &gt;</type>
      <name>gShellID</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>2dd763771b33f5e30b1840742418e669</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMCTraits</name>
    <filename>classQMCTraits.html</filename>
  </compound>
  <compound kind="struct">
    <name>RadialGaussian</name>
    <filename>structRadialGaussian.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RadialGaussian</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>769b177ca2b483e916001c508f749b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialGaussian</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>86dbbc47848235cfa87b41917aa7cc53</anchor>
      <arglist>(int l, T sig, T norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>6018e70c0432dba20fa736013293b505</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>1957e37bf4c4819d6de5c9ca052ed6d1</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>27b4471696721b2cb0b42a87210bf0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Sigma</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>5abaa7d56d567a85c4e80aad592e58ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>ada51e1a0ab240fd200bcecdc9e657ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialOrbitalBase</name>
    <filename>structRadialOrbitalBase.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RadialOrbitalBase</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>845eaa17b7eca7fa23ab23cff27d5531</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RadialOrbitalBase</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>e09cfe4b4cf9d249f53a9d261c6f5748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>f</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>c405e24c6271b4abd89c07d024d95f60</anchor>
      <arglist>(T r) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>df</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>b0603a487854bb080452d0b731a4e7aa</anchor>
      <arglist>(T r) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialOrbitalSet</name>
    <filename>structRadialOrbitalSet.html</filename>
    <templarg>T</templarg>
    <base>RadialOrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>~RadialOrbitalSet</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>897d21bca374003bc050d5271e2be434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRadialOrbital</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>99ebcc4fe40f22deecd8bb6b9e43d3e6</anchor>
      <arglist>(RadialOrbitalBase&lt; T &gt; *arad)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>3cc2fb491b1bf1d7e3b9006329461311</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>a414352cfee5d0351e20ee696baed1d6</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; RadialOrbitalBase&lt; T &gt; * &gt;</type>
      <name>InFunc</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>ce2e60b72e8807836c64f97a7de671e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialSTO</name>
    <filename>structRadialSTO.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>4989258ab2f31f3517373aad47bb7736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialSTO</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>da524feb3c8fea7a39093023c4c4584e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialSTO</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>534728361befe186fd1a377651a20b01</anchor>
      <arglist>(int n, double z, double norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>fec202fbf78579a39765ce97c241b7b4</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>5bd9e977d239b17b177dd7c28040ec97</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>d12a87056f1cf254955ba4f42b8a96f4</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>38021d522dd04194c929994fcf338095</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>3f633c88cb3224049070be13562c45b2</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>194fbbb2ec68c7759225ff9ff385f0e0</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NminusOne</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>d0260e39a5e2e9eb07231da5a0608d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Z</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a55d6ceac026c4b24b9b08a0c178e3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>c25d8393531d0c23c34a1a5f8a441a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Y</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>d1e0c0462a4fc161507a0a18ab247769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dY</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>c45861cc5704dc26b6457604abe3aa85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2Y</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>ba28d911ce9aee121365416e46b172bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSeq</name>
    <filename>structRandomSeq.html</filename>
    <templarg>VT</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="struct">
    <name>RandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>structRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>99a9ab7a5395da90efa6e82c0ecb7198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>06e5b7e1070da0827fadf8f661dfae4b</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</name>
    <filename>structRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e98024923f2330af3806f1a1aba11d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>43b72829c1ae0388b9a694b76269982f</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSequence</name>
    <filename>structRandomSequence.html</filename>
    <templarg>RA</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="struct">
    <name>RandomSequence&lt; vector&lt; double &gt;, RNG &gt;</name>
    <filename>structRandomSequence_3_01vector_3_01double_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structRandomSequence_3_01vector_3_01double_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>99ce597cdb273fc7179b1f685949e0d7</anchor>
      <arglist>(vector&lt; double &gt; &amp;s, RNG &amp;rnd)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSequence&lt; vector&lt; T &gt;, RNG &gt;</name>
    <filename>structRandomSequence_3_01vector_3_01T_01_4_00_01RNG_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>RNG</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structRandomSequence_3_01vector_3_01T_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>bb0add0f4ff0458dd019ffe45ae53974</anchor>
      <arglist>(vector&lt; T &gt; &amp;v, RandomVector&lt; T, RNG &gt; &amp;rnd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos</name>
    <filename>classRandomUniformPos.html</filename>
    <templarg>Vec</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos&lt; TinyVector&lt; double, 2 &gt;, RNG &gt;</name>
    <filename>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 2 &gt;</type>
      <name>Return_t</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>1c859fbc80e9f3b13bfd78e35a9c8902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomUniformPos</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>d4752d29c9eddfefda1d7f4f8fab83ef</anchor>
      <arglist>(RNG &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>07b9d4ff8d8a92ca6ca0c0401d19ed6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RNG &amp;</type>
      <name>d_engine</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>16f707f0bca67c0e529257980f0ab719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>b78c0be3c88646255bf6a7be7441f9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomUniformPos</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>3c9ffec437f9c54f0a14cd315acd85a9</anchor>
      <arglist>(RNG &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>34d5fcb7738c4dd758ac7d0fbd43b654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RNG &amp;</type>
      <name>d_engine</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>bab9208452adf2d265afecdf167cccb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomVector</name>
    <filename>structRandomVector.html</filename>
    <templarg>VT</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="class">
    <name>RandRandom</name>
    <filename>classRandRandom.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Return_t</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>5522a65e0c18364cb75ee07cdddc25cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>5d36aaa3bebf971a7e1029e94bec51f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>abae07b8cddf0015b5e25761276cda41</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>7bdd1a0a19c1f3cc20676efd31c1376b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>23dfd39d1fa9dfb06e800ccea1af4bc8</anchor>
      <arglist>(int i=0, int nstr=1, int iseed=-1)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>868066dd1e1f91dce55d901d4a96eb5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>eda6e489869c2284a33623802a036ff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>938fc7c21803ffae8bc76859ca0c143a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>d2fd0b8445105c7308a9948ae5e297ec</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisStreamID</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>74931e54ed84875cc562a3922585e838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStreams</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>f1fa865077953698edd2298c2ab8c471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisSeed</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>6b0e57a02f936cce9b0d8721ee5af9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const Return_t</type>
      <name>rand_max_inv</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a2bf91b3ca8dd40fed7d1b213bbf631a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RecordNamedProperty</name>
    <filename>structRecordNamedProperty.html</filename>
    <templarg>T</templarg>
    <base>RecordProperty</base>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>6073798c396472d5668959713db78295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>9cb35c446db707182c70d56153818605</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecordNamedProperty</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>51067c6bb9e2e529b31e329bb4f0a786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>ae4be4dbf264213cc2659286bf3812d0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>7c011064ccf264174dacf65405d46f3b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>1dbe286c53429542556543e6d24ed450</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>b3ad8bc438dfa73d44023a246eed5322</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>1b237508394dc21c1d194f7c63407312</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>7bec9bdaf58bc0db6ca8b3e9cbc57f46</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>30c8f14f479566f1c31189815c52f402</anchor>
      <arglist>(const char *fileroot, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>2825e3ee97aa39152fac2b7e9564473b</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>36eb024e6af316ecfad051edc7fe9887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>8df2b59524d43c2a718fe2b6ebc10839</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream *</type>
      <name>OutStream</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>f52747d9338fac385ca6885f945e2456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>Values</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>382710bc2c3e9d3a1a8a39abdc5b9bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Name</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>f1d54dd6837a77211731e71af0263879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RecordProperty</name>
    <filename>structRecordProperty.html</filename>
    <member kind="function">
      <type></type>
      <name>RecordProperty</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>7c121f4612fd1ef8101ad6011dda536c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordProperty</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>3a297063091a619f887400b4c0a1e96f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>920ce174d0cfd33e7c0001f3af67fe1c</anchor>
      <arglist>(const char *fileroot, bool append=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>report</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>eef807f9da7fb7e9d066a25e385cfbcd</anchor>
      <arglist>(int i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>db4e0ce096e41ecd1ba4f9580d955554</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a101ff018594e4b2f7e0b6e7a538886a</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stride</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>bb845967c8e6a513839c61b818c9b18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>FileName</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>c3f4e14329be98ac0fb9a0c5899a877e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecordPropertyList</name>
    <filename>classRecordPropertyList.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; RecordProperty * &gt;</type>
      <name>RecordList_t</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>9e23187a91d8b083bc56f10dcc0bf549</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordPropertyList</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>eea42065934eb776bd3c2a1d365d77a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordPropertyList</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>413fe89aeaa8c93e610b42116410df8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRecord</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>aa8476e8f2eaccc612ac6342939c4387</anchor>
      <arglist>(RecordProperty *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setstride</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>fed7a758659256fed3206d0e12e1cbbd</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>d99291ab4a42497380d6f0802c3f64eb</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a0f214deb7c4e39ea64113c22e53bee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>5f6fe5d2e75548fd588d9c0a4c936f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RecordProperty * &gt;</type>
      <name>Properties</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>46651485f31098170b07951bc21a39c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegCubicSpline</name>
    <filename>classRegCubicSpline.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RegCubicSpline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>8b1e9d80d993ead7663b456e582381c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegCubicSpline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>7b7e95b4d142a27030b410314c8cdc25</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a5c5bf7e13f040bc7cfa9cddacd75644</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a5b8f9a088bc071aa71b754e7a77da27</anchor>
      <arglist>(T x0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>1e9ea98c39a10697b526298f4ac92571</anchor>
      <arglist>(T x0, T &amp;yval)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>4bbe611424643c7a572d800a0db84bea</anchor>
      <arglist>(T x0, T &amp;yval, T &amp;yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>27ae82b7b606e5d157d94715b7619c00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>2515c86e96eddf21939e184e8ee8bb34</anchor>
      <arglist>(const int n, const T x0, const T dx, const T yp1, const T ypn, T *y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Npt</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>31bfc8a60b7e2aae2cb5e460bab96b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Xmin</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>4c498f9fe326ca9d9d7a4da4b5e01b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Xmax</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>74828bf8e857be8abd5c7d0d6c022784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Dx</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>eca5068665d747c2df19a4602ba92105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>DxInv</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>9b6e06243b40ae5b3d490eb75eb59eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Yp1</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>1964ff29ac10b51feec38423943ec99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Ypn</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>e39d3ede27b8c9e212e1af4a50b762f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>h2over6</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>8382bae3e9fb72d9b2935d40947723ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; T &gt;</type>
      <name>Y</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>59bb948d73b4623f5334ae5f44f06582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; T &gt;</type>
      <name>Y2</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>9df3ae0f04b644df86a2aab805616d09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor</name>
    <filename>structSCTFunctor.html</filename>
    <templarg>SCT</templarg>
    <templarg>L</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor.html</anchorfile>
      <anchor>104c2771ab82515caa1b1e4ba3139c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor.html</anchorfile>
      <anchor>b3ac4ccc070fcef50f2863221998569f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor.html</anchorfile>
      <anchor>ccd0e7ddd1ab3ef4e49279b4f2ea35de</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 1 &gt;</name>
    <filename>structSCTFunctor_3_01SCT_00_011_01_4.html</filename>
    <templarg>SCT</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_011_01_4.html</anchorfile>
      <anchor>d98816284b0fe37c6fe5df73f6ef26e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_011_01_4.html</anchorfile>
      <anchor>fe19ca6b6d17470c028c5919219247e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_011_01_4.html</anchorfile>
      <anchor>6527361e7cd10d885437396bd9894296</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 2 &gt;</name>
    <filename>structSCTFunctor_3_01SCT_00_012_01_4.html</filename>
    <templarg>SCT</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_012_01_4.html</anchorfile>
      <anchor>6bf5f5ab15fb0cf67f1aaa6d4ff514f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_012_01_4.html</anchorfile>
      <anchor>1d462cf5d01aaf6bc46c6a1af9379949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_012_01_4.html</anchorfile>
      <anchor>e154a66ce849dc71bdbc86f68736cfdb</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 3 &gt;</name>
    <filename>structSCTFunctor_3_01SCT_00_013_01_4.html</filename>
    <templarg>SCT</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_013_01_4.html</anchorfile>
      <anchor>053f9b1119ca78561e59c9a818f17fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_013_01_4.html</anchorfile>
      <anchor>f4e2061f8ccee742c874a3b8b425a125</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_013_01_4.html</anchorfile>
      <anchor>82f36e20f12479d79bd5c39dce69a835</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sine3D</name>
    <filename>structSine3D.html</filename>
    <templarg>T</templarg>
    <templarg>PT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>6aca4288a67d738cd8261db7b399725b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT</type>
      <name>pos_type</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>9681485561d350a8f5b5f2374b5ffb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sine3D</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>ccd7d7e70b793b5a94159d8412fb8bdb</anchor>
      <arglist>(value_type kx=0, value_type ky=0, value_type kz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>365d0e67f69a53c8f99c96c5e609e2ab</anchor>
      <arglist>(value_type kx, value_type ky, value_type kz)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>180bbab67bfbf6d5f339f0607a65a2c3</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>820fd6c0e58852fd6e2a3bdf6d46bb3c</anchor>
      <arglist>(const PT &amp;r, PT &amp;gr, value_type &amp;lap)</arglist>
    </member>
    <member kind="function">
      <type>PT</type>
      <name>gradient</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>2858857d9598787d5643483c4bd49726</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>1794901d7143bce542ddab4c6a9ec81e</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>2d7ef3ee72f3c019c916421495fa8504</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kx</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>8916d0b4fabcfccd11611bab61fad9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Ky</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a91c68035aff40e0c958f4b9f3968d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kz</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>d2abe68c4b6bc63d3d5aff25a8aecbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Knorm2</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>c4ad530ffb6ab47431afcfde48e78b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Val</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>b44e5a015fc3b0238c612c2ba638c247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Lap</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>7a174ab59be003221300fdd37dda8635</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pos_type</type>
      <name>Grad</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>218553e21fb6bfe9ca5e2eee2bd53178</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SlaterCombo</name>
    <filename>structSlaterCombo.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>8cc41df4d5d6c76fc23f5cd686b9ffd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>c98b3689ffac26e18d0ff1d987c12ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; T &gt;</type>
      <name>Component_t</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>2b6eb5bda3e1ebba7ac681e8c2b83231</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterCombo</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>d4902326d61cc7490a88cf4d5d74a12b</anchor>
      <arglist>(int l=0, bool normalized=true, const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterCombo</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>ba571bf7e7ad045878fc9572bd4c8fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>4ed8df7d67eef913c097dc68836e4b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>0eff69d26f93f893080718a63848c048</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>34dbeca62685f397236d149cbba5eec4</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>f3fcc0fd2aa62ccb3f6180fe602df5f9</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>608af056c0eb3c43263e147ff60b5c34</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>8b28c41bec823dd2cfb9001da25f86cb</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>6513e2bc7b4d164583337dfbcb53f14b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>5e8829c14392bf8a73925155326a0f89</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>596b9a1a7d7ff9def480c30a9c39ad8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>1a833f2ad7c042b05ab9f6dd953862b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>5a3c60a617cb8ffec7ae72981bc9106e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>f495e85758a74e3f0e830129bf19c117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>8a0c676e56b2286c1a80c1e77985193f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>15e25ff58a9481b176f1cc4760235894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Component_t &gt;</type>
      <name>sset</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>5c41e6b5f7e0003cce7c740e43569079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>1199c54853306ce2b541bfb205197d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>73ad9f4c3b2ee7419941da57f4622e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>869fc276acdaf5a879abde6aa679ad45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolveFirstDerivInterp1D</name>
    <filename>structSolveFirstDerivInterp1D.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>SolveFirstDerivInterp1D&lt; double &gt;</name>
    <filename>structSolveFirstDerivInterp1D_3_01double_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSolveFirstDerivInterp1D_3_01double_01_4.html</anchorfile>
      <anchor>0bc957aff391ecd5d2370b71ae960125</anchor>
      <arglist>(const CT &amp;data, CT &amp;p, int N, double *bcLower, double *bcUpper)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolveFirstDerivInterp1D&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>structSolveFirstDerivInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>structSolveFirstDerivInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>7d80f2a41b8a8798d03d6ce87de5e2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>structSolveFirstDerivInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>7fd585278b08760482864a56b97e0f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSolveFirstDerivInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>5ca3824993fb26de2bacc16729bacd98</anchor>
      <arglist>(const CT &amp;data, CT &amp;p, int N, double *bcLower, double *bcUpper)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolvePeriodicInterp1D</name>
    <filename>structSolvePeriodicInterp1D.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>SolvePeriodicInterp1D&lt; double &gt;</name>
    <filename>structSolvePeriodicInterp1D_3_01double_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSolvePeriodicInterp1D_3_01double_01_4.html</anchorfile>
      <anchor>67bf8e05c7ac3bf402f9802b3bcb54f7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;data, std::vector&lt; double &gt; &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSolvePeriodicInterp1D_3_01double_01_4.html</anchorfile>
      <anchor>b6ce9edadfa749ae61f9b43589380a5d</anchor>
      <arglist>(const CT &amp;data, CT &amp;p, int N)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SolvePeriodicInterp1D&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>structSolvePeriodicInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>structSolvePeriodicInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>2ea40b0d7d4d11948127cc98f573990d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>structSolvePeriodicInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>20a09ccbe19d7b9eaf6c7219b127e1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSolvePeriodicInterp1D_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>932a8fb4bde6b20e70f6feff216cd32a</anchor>
      <arglist>(const std::vector&lt; value_type &gt; &amp;data, std::vector&lt; value_type &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpeciesBase</name>
    <filename>classSpeciesBase.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar_t</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>bf8479f10f887222a877e5ffd654e359</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Scalar_t &gt;</type>
      <name>SpeciesAttrib_t</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>d3357eaea2e00ca9594562a35095dc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; SpeciesAttrib_t * &gt;</type>
      <name>AttribList_t</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>9333b39151e3bbd566772eb4496f8d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesBase</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>927c516edc258d10c8893b7bd58aad32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpeciesBase</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>e14cca1ec4fc9238f9ed4c86f7e37df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getTotalNum</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>370d5e01b8181379809b819010a9cf61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNum</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>11b65a9fcfa5b8306bfebe4917763a33</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAttributes</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>e512f52d969c99f84c6a70c1b0073efe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttrib</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>0570ee7b48251900bd96c084f9632678</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>f0fbc2d0ab8d1c6d4a15316002709492</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>25099d984847bbca8bcee981da937e7c</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>d0a0b77aa43a85363b5b56f2fe7fcc9c</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>find</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>bbf63ac9c5476592b34485d2b010df1c</anchor>
      <arglist>(const string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>658225a3cd163a81fae4b9e4e08820cc</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSpeciesID</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>ad43f0a65f40f4e67fc80e1f0e765d66</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>TotalNum</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>4c0e9d01e64b66a293daac046ad2eba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>Name</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>8d34fa6fb18cbf86627c27260d4be268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AttribList_t</type>
      <name>d_attrib</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>d05e237f42c1e0c0fee1160e28f4c93c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpeciesSet</name>
    <filename>classSpeciesSet.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar_t</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>67705a67df8a51289dc142e2e744c2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Scalar_t &gt;</type>
      <name>SpeciesAttrib_t</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>c0f489f2d7661cf06414b44fec381f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SpeciesAttrib_t * &gt;</type>
      <name>AttribList_t</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>885b2bae12df0beb31cc80a0e4f0d80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesSet</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>356093eddfa16b8ff486990050159883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesSet</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>958865f26d04314ae5ac3188e9d392f0</anchor>
      <arglist>(const SpeciesSet &amp;species)</arglist>
    </member>
    <member kind="function">
      <type>SpeciesSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>79d7851ebf82ceca3ee75a48120f4c6b</anchor>
      <arglist>(const SpeciesSet &amp;species)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpeciesSet</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>4ceac8314282765b83db90ecd5d7c05d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>51494e5d20442de7e35ca93536cacfe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNum</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>d6b1336b178f4e8037369ad13d51b9a3</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAttributes</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>15faeb0392caed5df02e1a7871b324c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSpecies</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>0b0d65b34f96f8da50864b3c5ceb0f15</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>2347958959e98188d6e6eb7fb1ae4c8a</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>efce4e36a8b4a87d1dec6e908eda7082</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>1b2902677e9b39b9361830dcbdc3f80d</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>96cc1263e7c192e2a64915f1469da7ef</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findSpecies</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>525de17bf4ec58f15594c49e0eea5314</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>TotalNum</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>4dbf4801f9984d05e11c4bbdb919572b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>speciesName</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>572fa3646999ccfc6ecab323d8d2c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>attribName</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>0ad7e57ae6ebbe24a7047c84496bc023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AttribList_t</type>
      <name>d_attrib</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>b8602c896be03b7d79b8234e5a82a92f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SphericalTensor</name>
    <filename>classSphericalTensor.html</filename>
    <templarg>T</templarg>
    <templarg>Point_t</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>ecf109c2ce7c70a6637ab4f978a2a023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point_t</type>
      <name>pos_type</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>e112f2f695d23f13b05ce5a25cca7db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; T, Point_t &gt;</type>
      <name>This_t</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>0054ed5362be58e19860114aecead824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalTensor</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>d84f8d3820e7d9ec91bca1af592db4a9</anchor>
      <arglist>(const int l_max, bool addsign=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a654cbb0a5c522c4120844dbe175d11b</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>991cb98dbb613da48803d60009ca511e</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateTest</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>f3f80725430236108657ecd32bfe55a0</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>601492be1614db920f6d535f90dd8174</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>cc60db1644652a9d23b221e1bab5d83c</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>82f1e3fb89a12e6da3f3235b8637a733</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>2a6895d2f26695b2b7c1f206d3c0f2ef</anchor>
      <arglist>(int lm) const</arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>7a530b6204325a17d5bb59f2f8d51a14</anchor>
      <arglist>(int lm) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>b616db8d8dfd6f262261e142734c1dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>7e6bebcc461923f6ad2542075cb617b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>ef22046c12c8f92a834b2f13e71f420e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Ylm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>1f5b005fe1272dddd71c94f79ac4e52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>NormFactor</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>2841450d6472f9fa3878528b0e130c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>FactorLM</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>0ee746e3717f116de05a5ada9c514372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>FactorL</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>7e46ca98a251ff3a9b0a4b9a917a7cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Factor2L</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>3dd135c3bfcca69aeee7f2d2dd730842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point_t &gt;</type>
      <name>gradYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>831ca55563888e992f4fc66ed2b863c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SprngRandom</name>
    <filename>classSprngRandom.html</filename>
    <templarg>rg</templarg>
    <member kind="typedef">
      <type>double</type>
      <name>Return_t</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>4c55a54645c8941a196bb6ed9fbc41ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>d3de0001aa9a4e4ec7cfdd1b4c42e2c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>b40566c07c43c0935bebcf98928c6f01</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>59711c87735332113232685884aa6421</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getRandom</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>683d628d94981ec57f7332ea24f81e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>82770aacc362463cfb4d0e00d634ef16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>afd5dba79d9d9df214fc80749906913c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>02e52a4ec5b8df55688d48852eb3f2dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>41f317bfe8ae66919c88b6e0941f60eb</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisStreamID</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>7cce0b7be2202e7dbee325e8b7b5746a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStreams</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>119e6e2aa89d91213069a5a47a698ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisSeed</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>88ec8b03336ada0b210706ff05bfa8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>thisStream</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>600325fa94406b497f2d36fc8bbbd06d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>STONorm</name>
    <filename>structSTONorm.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>STONorm</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>5bf4a25b219fc641f6373ea7ef6d4d79</anchor>
      <arglist>(int nmax=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>50d132c822a99b31ea80c4e9067f845e</anchor>
      <arglist>(int nmax)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>30024c5f8746dda20e514ccba2e29487</anchor>
      <arglist>(int n, T screen)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>Factorial</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>19f1c355bac16650c92dfe7c830013fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StreamIO</name>
    <filename>classStreamIO.html</filename>
    <templarg>T</templarg>
    <base>OhmmsIOBase</base>
    <member kind="function">
      <type></type>
      <name>StreamIO</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>4c20f9badba805b19661af86fff28515</anchor>
      <arglist>(T &amp;a, ios_base::openmode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StreamIO</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>ecf3bbc30846dfb3e1f17b6025ebfd0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>ce5b5a84fd999c1ffcafa9cbcd0ed7d0</anchor>
      <arglist>(const char *fname, ios_mode::openmode mode)</arglist>
    </member>
    <member kind="function">
      <type>inlin void</type>
      <name>setBuffer</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>20fdce50e646fd915c72598171a63c31</anchor>
      <arglist>(iostream *ebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>3706c11cd94359d293c136d2957f7e52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>eeca103b593a9f2977e5327407c1b5fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>33a49345f5f2795ba81273801581dc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>5c18ce72845b671b7b7132050b617ccc</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>ref_</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>e8f626ec2085d89e718968a06a8b86f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iostream *</type>
      <name>m_buffer</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>20305b179f3448452ffc7aeb469fcd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OwnBuffer</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>9f1dfa149c4aa97ffe3f255aaf913a88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SuperCellType</name>
    <filename>structSuperCellType.html</filename>
    <templarg>D</templarg>
  </compound>
  <compound kind="struct">
    <name>SuperCellType&lt; 3 &gt;</name>
    <filename>structSuperCellType_3_013_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>structSuperCellType_3_013_01_4.html</anchorfile>
      <anchor>63d0da427b68ee6863fa23c059689102</anchor>
      <arglist>(const TinyVector&lt; int, 3 &gt; &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SymmetricMatrix</name>
    <filename>classSymmetricMatrix.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>93ed45d43b501bdf906c41c18d6ab20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>493beb9f8a73cbaaa8d410697187434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricMatrix&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>1e6bd1d0fa96f11f584a72ab5ed9cca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>5805d8abdfd689a60070b0d4ac051078</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>d103469833ff00c0dc76b3d307bc8412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>7c172668a3d32dfefc5d7a9b06251b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>5a7a8e962cf1485c16ab1a2954631bae</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>ea63ed811475eb299da930b1a8b45a59</anchor>
      <arglist>(unsigned n, unsigned m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>cb4754ce27d91d9ebf01940a37c0e4de</anchor>
      <arglist>(const SymmetricMatrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>31c7c88f9a94df999ce10c1aead9efea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>2cd56bedaeb05e43fccdfa70528f2147</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>9410b872ba6f767bb012e4959637a1da</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>nrows</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>c37c7584bb8e8552b83c6c7357b7722a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ncols</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>5ff1c44804ca9cb50a3e76863dfe9311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>93b0f855346de9005f1801b1a2318f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>000aed1e579c98d01f836830282ca23f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>ad910360c53aff3911b750d1d64c7440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>1d426039be2ec4f124f973ebaa4dcc36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>6c66a31185bae10df593de74b7825c7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>0205c7005f34a57842767e86f5d5f6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>eeb6e29a1bcd574a21f30b95a2c48f11</anchor>
      <arglist>(unsigned n, unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>0d504cfa3f77499092574a5825be42bc</anchor>
      <arglist>(const SymmetricMatrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>babee2fd436f8863d3e62132bb1c22a7</anchor>
      <arglist>(const SymmetricMatrix&lt; T, C &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>5b714751f594244c32425bad884bd202</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>46597b8a14dfc48bb8fecfee9b268511</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>90e7690936ed1df8737c41375fcdfa1c</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>d429bd6b2d38f969dc3bebbf78db21e7</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>8523cae12ae55df71d6e370336543de3</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>c1ca36b57a12cf63ec6463031e5de7bc</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>D1</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>80479039cb2d97af11cc151233240dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>D2</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>1bf042a31317f01f5cda17431e11f85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>dfe5d7c9165a9fabd235c6121e1053ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TestFunc</name>
    <filename>structTestFunc.html</filename>
    <member kind="function">
      <type></type>
      <name>TestFunc</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>f6f5053d1564522da6d2b17b822699c3</anchor>
      <arglist>(int nk0=1, int nk1=1, int nk2=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>6f560a26d6788b9400b714ab1dfd7d62</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>bf5a22a06c3b82cd802f300aa64f38b8</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>386da9ea3b1f9930b34747c7ce156a1f</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>7ddcffddd98fc512f3f91267150fdb4e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k0</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>3285cd17d228fdb94c8562a1ce456b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k1</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>9a367f2a6842c7b7aa8a8c5d2fabedfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k2</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>02793190dfd6bbfd3769021cc92cb841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d2factor</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>36175a152f0b59442b27175f6d96ddb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TestTransform</name>
    <filename>structTestTransform.html</filename>
    <templarg>FnIn</templarg>
    <templarg>FnOut</templarg>
    <member kind="typedef">
      <type>FnOut::value_type</type>
      <name>value_type</name>
      <anchorfile>structTestTransform.html</anchorfile>
      <anchor>e17d9c7d4b85a8e8f93760a7becec679</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FnOut::point_type</type>
      <name>point_type</name>
      <anchorfile>structTestTransform.html</anchorfile>
      <anchor>399f8f29a0bb629472eb5e063da71155</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>check</name>
      <anchorfile>structTestTransform.html</anchorfile>
      <anchor>1640605273cded87a4d9b1781ac6fe9c</anchor>
      <arglist>(FnIn &amp;af, FnOut &amp;nf, point_type ri, point_type rf, int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TinyMatrixRef</name>
    <filename>classTinyMatrixRef.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>7bd292eaadc60618af03e0f42bbaf36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a2fa78e6ad3e3ad23081e021868954ec</anchor>
      <arglist>(T *datain, int d1, int d2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>0064819b2ca1aae96c8337e8a8351462</anchor>
      <arglist>(TinyMatrix&lt; T, N, M &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>7af466d7f2b850f9b40d507c3551793d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>c80c494bddf3373ed28d03d9b211b528</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>9a1da06a6bc355db564e56f12407fb23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a97d30bb838d7f8ab7db3a9f15f61439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>c4c2980723b378d7f883ff9826a7c98f</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>565c2ba7f1d479043ceee914f55ddabb</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>1f1d6e87c7c86a93002dba81d3007c96</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>63af19a7818c4cedec4b19d69e8f03d5</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>0deaa48cfb1511250473e1b02b5f3192</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>1e737857d4d4e08a354deed0cd15ac83</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>58671dc6df7a9dbc0eab5bf66eaf9a9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>D1</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>373399af9e92fabcf3b69ecae9a9b6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>D2</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>727258e3832ad758a3478be23fd86a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>19a8ef2ba58365373195b88a514b11ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Transform2GridFunctor</name>
    <filename>structTransform2GridFunctor.html</filename>
    <templarg>FnIn</templarg>
    <templarg>FnOut</templarg>
    <base>Transform2GridFunctorBase</base>
    <member kind="typedef">
      <type>FnIn::value_type</type>
      <name>result_t</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>61528a6ec8c3cb8022f403c5f4588a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FnOut::point_type</type>
      <name>point_type</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>d72a0368966ce22703ca9ffffd3799a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform2GridFunctor</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>b7cf6e4ab5f0e4e02fe4669dc3a67d6a</anchor>
      <arglist>(FnIn &amp;in, FnOut &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>b9660f928e4464ea466ff67ab8e44791</anchor>
      <arglist>(point_type ri, point_type rf, int ng, int np=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>a42c332a88a8a6def8bc041ab8ad2a82</anchor>
      <arglist>(point_type rf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>ad7758752094cc57f9106aaeed1695d1</anchor>
      <arglist>(int np=0)</arglist>
    </member>
    <member kind="variable">
      <type>FnIn &amp;</type>
      <name>in_</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>7e62b1e944ed42356b72919b3b89ce62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FnOut &amp;</type>
      <name>out_</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>d21ba521809dd94350bbb4781d8ebd7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Transform2GridFunctorBase</name>
    <filename>structTransform2GridFunctorBase.html</filename>
    <templarg>FnOut</templarg>
    <member kind="typedef">
      <type>FnOut::point_type</type>
      <name>point_type</name>
      <anchorfile>structTransform2GridFunctorBase.html</anchorfile>
      <anchor>e2c42aac657b919aa0978a9981974b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctorBase.html</anchorfile>
      <anchor>daddd23599db53ee125469f6ac73eaa2</anchor>
      <arglist>(point_type ri, point_type rf, int ng, int np=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctorBase.html</anchorfile>
      <anchor>f34327b9d5e8c5a9a8d7d253376609c5</anchor>
      <arglist>(int np=0)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TriDiagSolver</name>
    <filename>structTriDiagSolver.html</filename>
    <templarg>CT</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>solve</name>
      <anchorfile>structTriDiagSolver.html</anchorfile>
      <anchor>941d06585d5762c7763a48f337722c21</anchor>
      <arglist>(const CT &amp;a, const CT &amp;b, const CT &amp;c, const CT &amp;d, CT &amp;p, int n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UOverRN</name>
    <filename>structUOverRN.html</filename>
    <templarg>Rin</templarg>
    <member kind="typedef">
      <type>Rin::value_type</type>
      <name>value_type</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>4338d42d8539210663b1b40107ecb3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rin::point_type</type>
      <name>point_type</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>3d2705725b7b6efad680b034fa43433b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UOverRN</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>b16443b629f35eeb297eb7a0ab1a51c7</anchor>
      <arglist>(int x, Rin &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UOverRN</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>cba2b25f753837f216d7f17badabcf30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>74031981200a05819a74371573b89c33</anchor>
      <arglist>(value_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>6f418a6702a8326dd58dbcabeaf3c3bf</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>945b838c200f2c6ee7d18e756f3fc8ed</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a81016fb8a9f6c82a070dd4ffeef11a1</anchor>
      <arglist>(value_type r, value_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>0fbe8ac2a4181abded06ed9c189af353</anchor>
      <arglist>(value_type r, value_type rinv, value_type &amp;drnl, value_type &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>X</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>57a847bed2203f79a7dfb2740fe8f237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>8c311a92b32221a0c5650a3d31dbcca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a521d9b593a2f0b10c9ca4f75f3787bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>2824582eef724d5d731d596affaffb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rin &amp;</type>
      <name>U</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>1406cda0da976e6fd877b10658db6178</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::vector</name>
    <filename>classstd_1_1vector.html</filename>
  </compound>
  <compound kind="struct">
    <name>VectorRef</name>
    <filename>structVectorRef.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>101d2ddea3026fc9bd194fce2fdf5c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorRef</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>bc46e5a97ee44b946d6eb044a3150825</anchor>
      <arglist>(T *datain)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>1641c39fed18124bf70498f033cb93e3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>3123987100d1825fb70ca2e90783f429</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>dptr</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>5ed409506b1b9c60f98e47f620ce797b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bool</name>
    <filename>classbool.html</filename>
  </compound>
  <compound kind="class">
    <name>int</name>
    <filename>classint.html</filename>
  </compound>
  <compound kind="class">
    <name>map&lt; string, int &gt;</name>
    <filename>classmap_3_01string_00_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>map&lt; string, OhmmsObject * &gt;</name>
    <filename>classmap_3_01string_00_01OhmmsObject_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>TinyVector&lt; IndexType, dims &gt;</name>
    <filename>classTinyVector_3_01IndexType_00_01dims_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>TinyVector&lt; RealType, dims &gt;</name>
    <filename>classTinyVector_3_01RealType_00_01dims_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; OhmmsObject * &gt;</name>
    <filename>classvector_3_01OhmmsObject_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticleIndex_t * &gt;</name>
    <filename>classvector_3_01ParticleIndex__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticlePos_t * &gt;</name>
    <filename>classvector_3_01ParticlePos__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticleScalar_t * &gt;</name>
    <filename>classvector_3_01ParticleScalar__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticleTensor_t * &gt;</name>
    <filename>classvector_3_01ParticleTensor__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="namespace">
    <name>APPNAMESPACE</name>
    <filename>namespaceAPPNAMESPACE.html</filename>
    <class kind="struct">APPNAMESPACE::OTCDot</class>
    <class kind="struct">APPNAMESPACE::OTCDot&lt; T1, T2, 1 &gt;</class>
    <class kind="struct">APPNAMESPACE::OTCDot&lt; T1, T2, 2 &gt;</class>
    <class kind="struct">APPNAMESPACE::OTCDot&lt; T1, T2, 3 &gt;</class>
    <class kind="struct">APPNAMESPACE::PAOps</class>
    <class kind="struct">APPNAMESPACE::PAOps&lt; T, 3 &gt;</class>
    <class kind="struct">APPNAMESPACE::PAOps&lt; T, 2 &gt;</class>
    <class kind="class">APPNAMESPACE::Matrix</class>
    <class kind="struct">APPNAMESPACE::CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::SizeLeaf2</class>
    <class kind="struct">APPNAMESPACE::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">APPNAMESPACE::LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">APPNAMESPACE::LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</class>
    <class kind="class">APPNAMESPACE::Vector</class>
    <class kind="class">APPNAMESPACE::TinyVector</class>
    <class kind="struct">APPNAMESPACE::printTinyVector</class>
    <class kind="struct">APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</class>
    <class kind="struct">APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::FFTAbleVectorBase</class>
    <class kind="class">APPNAMESPACE::FFTAbleVector</class>
    <class kind="class">APPNAMESPACE::FFTWEngine</class>
    <class kind="class">APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; double &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; long double &gt; &gt;</class>
    <class kind="class">APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; float &gt; &gt;</class>
    <member kind="function">
      <type>double</type>
      <name>Dot</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>393299d33df754526e80ccf6bb0f51c2</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; std::complex&lt; double &gt;, D &gt; &gt; &amp;pa, const ParticleAttrib&lt; TinyVector&lt; std::complex&lt; double &gt;, D &gt; &gt; &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sum</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6deb3287ce36744b3ea963eee9f3a37b</anchor>
      <arglist>(const ParticleAttrib&lt; std::complex&lt; double &gt; &gt; &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0308248c93cb36db700c79c051b926c9</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; std::complex&lt; T &gt;, D &gt; &gt; &amp;c, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Copy</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b3ff92deaefd4870227cd28f0a84cb8b</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;c, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dbaef3dbf9898b2ec09e66416881841c</anchor>
      <arglist>(std::ostream &amp;out, const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c4653ac0342909c64224767daa4d6402</anchor>
      <arglist>(std::istream &amp;is, Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9cb741fb099ece3c70651950fbb3e875</anchor>
      <arglist>(Matrix&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ed5aaab271f7a576f8aac71a33894dad</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6083d9e90301b3abf599570d01f5f4ab</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5e9cb54d1481b8aff2cd9435f110c375</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6d7978ec0b73158bdb39cdfc93d08487</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a8b7f567336ac70c1fd848840be90cf7</anchor>
      <arglist>(const T1 &amp;, const Matrix&lt; T2, C2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>19401f40139c133c5911db6f98f994e0</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5d957f74613f3ad0a81a7653f3b2aeb2</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>25f0756f208c6f7ae9f33ebfe51f27a2</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c47f5d8c6db4f1d87ec61d945c99505d</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e26ed423860fba1ae9b6ae198741751a</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>76361c400a4802c3c016c0d61227f711</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ae38989403bce61e74dc0a000fe72f9e</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>debb94c2d675a54e59e3cbabac6dac15</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ba17b622b07e534e2d8ffdd349f76eb3</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3b7e50b4d6853253930c7ef43a1d3cd3</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a6bb14dbffc7ecfef554d3fcfd96963f</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>31c6392c6cb38eb8da642b93de6de713</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c91578532b14d0b9e6f28d58c7c2001c</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>08eea18b8751270f8e811cd35aa27bcf</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b6e3edd0ad8f260efca71e26394cf102</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>517cff9639e909bf289d815da9336b97</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ba0ef06399d785c3626cb29528cdea2f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1019176b7da0ae0c67a42d1c41231f33</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ebd40d7c6f5f2bb9c0b2a802c60979b3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8e621ff0ccfaba2857b6679cfd53fd02</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6e4d3900b4d768054f696b3c5977208a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d6ac0140d16b9503d5db1007e7da4826</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a3159e1871c3338ff50bff1784c887b8</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>da428c4f28be94fbc66a771bbe5b59b5</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9d6068d78df60db35ba3fe288dacda1a</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>240232a0a70fd31c85625e5a6760f586</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5986d4edc9afdbc9f07a390b721ea543</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7d9b95365578873e901e1ccd38eb40b8</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4a374ad7803523be6266461f58bac3c8</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d79931bb710aa0d54812b83fd717d73c</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>591996c08567518c679d52e8290d9a94</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e26f3c2479e38c9fbefd9c4018bd9652</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ee28d26819593394249aa5418e9ca572</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0f56878c184befdc3bf1daf35f85b4a1</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5c215622edd99ce5cd773184d482feb1</anchor>
      <arglist>(const T1 &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>746cc79413c0434efa83f48a1698cf9a</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9bd7e56931ffbf42b4b328006cbd16c1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9191b4f10a9afde40a8b163fa0af932d</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f7d2fbb4ec9b740deaad45290f01df5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4d672e84665015ca86051a54032dc39b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f62c18a542eb1c84967981f80a0520bc</anchor>
      <arglist>(const T1 &amp;, const Expression&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eaa8a5b3bca965e5d423a45ebcbb41d1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c560e625623bf08586fe5676f5924959</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0b12bb53a90e72d65b98b4425dc68c72</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>87b35f8bd41668b069b292215123af17</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9ce5bb9c339bc192f80df324519693ea</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fe540c6bd1bba45bf21364f71c0a6897</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7979fb40274a7a63ec97b7cf6743a00f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4a49d4dd08266c1899deff0e9801d62a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>86b5726b111f91e80d08ea66bef8a8c8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>afb46cd40662ffd9a82a6ec8d0e00541</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a31e5aaaa78db41b2e3ea503af687374</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1c380976e6cdbade3fdcfe3c55c836c2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4f2e75af490416c9c152f10fc31675a3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>538451b96271b7a5021bca9b07013089</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>00fa8df8eb6aa8950e890eb4466249bf</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>32449b90cb1945dcfc0ea8e8107e4efc</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ee01616c33432db4a74b36b191318845</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>900fdf4fb40468b4e246f419b5b776a3</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4edc6917d9f3152847bdf9878a64903f</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dd471d7c3f78bf1c9db149a6a8b531b3</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fa658a9f93ae453111776fd66603b31e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cd1d65cca6443dda2c02d97c24bbe1d9</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6c2740b23fe277c445fb99893c5f0786</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a73dbed7ca1e9c23eaa5b6e4b5950c51</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f7ba9de54ef097d6712abc1a12ec4478</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>29baff869e96b823e3e7fed6040fcc0a</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>164f9e5bcce0785ecc81a1248933d5c6</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f648d1b4af05597440a149cc8417936</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>74a8fff1954be1c92abe942db67a2529</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cfcfee9f16cdfb0d08ec6740f4b2b2f8</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>acos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5f1c1f68e1c38cfffac1aed3cb29dbc2</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>asin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6bb11adb707662aa5efd48b3ae0db5b1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b0960cb55173644507ef4dcda5fd263</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCeil, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ceil</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>761fe4d89c52e1abcb9fdf9d6005e30c</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>066778e488067d7b2f95fb471275a276</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cosh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ad15f4aba630c2d791b11c3305157be6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnExp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>exp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8b58730f83c0b8aa6468965a2711bec6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFabs, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fabs</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7fe841c998193a9724c0125209156b7b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFloor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>floor</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>73cff08a99f5a0f9f60f6002aff7e5fe</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>36c2b8d724337cf9c13721f7eb765f5a</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog10, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log10</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a4b2112ac29208c0e79ac5c560201dce</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>35bd118ea7190584896902d8be2c01cb</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sinh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>663f2ac3fe75b5da91523ce88c47e1ad</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSqrt, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sqrt</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0ff7518f385d01b9fe4f9cad1bc04dd4</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>93cb018e935f53ecf447eaaae232f970</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tanh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b50e5a7b93478163a921f3dfe9d0d73</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fd51d65436fd1df13f9a7946e2c95a39</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7d8c975676c81bdaf7441715bceea7d0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3bf04d0d9bd9a64584d5892ed49f955b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e16acadcda5ea420dfd141795e88acaf</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpNot, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>65222cc1e6ef1895445126b16ae76aa1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ad5ab1f3fdf4fdd82641ca4b89b17a32</anchor>
      <arglist>(const T1 &amp;, const Vector&lt; T2, C2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>52908df4d53714547dbf5001ed2af057</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>172a57168d5024aa47cd05fe774ee5c8</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0eeb35dbd599fa44b6dba23c2186d1d5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7f480fbd6df9db8e679a52957852c5ff</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d2835506f3937aa86cc6abfe1478e690</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d0ca2b79821e07233429a0929627df02</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bfbda6c48c073d2ea3f4ebdf12c9c900</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>493915ad4b99810631588453f95576e1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>64de48c1ce3f3da9659e0dcc38641fde</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d42e8592c3cc4eb8c45bd5f07d4dcf60</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2e0b90cba9f83b736b2b747470bd083e</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>92540f061dae99fa5ee80095933c4b4c</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5a85ddc7140f4eb069bcb0a5126cd1b0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9204bcba753e133bf96c3139b49b1e80</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>acfdadc7f072b0a6252fee353a61e683</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b6021d9ad9b29b1bf5867008e94da38</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2a6ddc1bfe156fdf52f2bd8a99fdc335</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6577668ddfaaf1b8609f6716872b6d19</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>269de3e03efa37fede4ed56b4524e0d7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ff12fc23447a7bf876724669d7a4dcd0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1701719275a18fd0acac964d5f5e9221</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bc4729c91471546f7e09a4bccce9013c</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>45b95f72d39e5ef530b20bce6d35afa9</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9b6502d619d5ddf26ef0c01b036f887f</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d6f3aec8d9c0c26d150d96db01bef5c7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>baa0ac2717e0747e20c781400c361a9d</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>475a198b3e86ad5e71cc5497346f79cd</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>75df286f29e7f2a20f4cdf88239104be</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1e7c6a5c201cfa5e2de35c0ad9e9d9e6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f13d00a60014b11cb33462c09dc023e0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3d12ae83a16a92035782e9db6463d75b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a412c4d52b0151f564723d9ac771d0af</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>76eb6af5b147f6eb2e17024b2fe34d39</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7a0927546156ed9c4ab9865d71838c41</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dc091d62f1cec7192516b44f4185d8ff</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e3426e299b654fc95b1d592f7fd7779f</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>76cf96ad03328e9dec99ee15448fc957</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>478de62c9257e721ca421723cf4633f5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c65028e5ece86b5bcba1e331a7d4daae</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>17692502d7ded8f808bf61ff30a34582</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>32575f56707ef7263b0a934fce5a6aa3</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>231677621a2343484509b5ceebd601b0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7335fc1387fab9e3f8482e127b763b81</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5d595a20c856481240cb2d4b46df742f</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9aea70c0ab92449c1c6513b5cce3c2fe</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5dda9be623abc167f1db2a43b1f125a4</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>13b470abbdda26668f6c336eaa5e9c53</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>99f3d4b5c5c5f1e5e101f38c89d45956</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6b7a8f21bec5480b3646580585dc216a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>2f242b0eb2997c16fcd77552aac4403c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>791944108bd6bc08e408b086d8237183</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c2d184cb780f14669f6f8002b2ea34bd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9ad310afd634790ddcef0c803c1e6665</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7c9a86de3cc6fb7a80665092ea1c9a44</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c70f34d7d7c35e49766320535944e6a7</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e8043e65115341b62ba98d2efbb0ee0f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7de2935264de50badb498be492aa0365</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bedcee9e44b01e0dfc8d78f8cce22cc2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e1b620b426ce90935c020d0cfc3bcc7e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6dac22e044a960dc6835be6666d3237e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6d3f12229016325e80a50f34c41d5512</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c6c027537c5915bb68a63dce0401e4a7</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ad24d936e2dcd009c12cb3e363ad601a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>60d2aa1e2a920636f6cf843e9bd6a37b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c36f8c161318bb2c0e81132342afa304</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e79f3e90671f891c77a4cd4ee9d035e0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a3c5832dd9e93f8d5af7a686d90c8048</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ed75c84c6cd16bbca0d0640fc7cb86c7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7f78f777621a4dc9006ee6fd737c2f54</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>923e7c41471c8be0a5a315633a7fb5cf</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fa1caa2d491247a45436177b9ee05557</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3b10be5638cf73669859e3120a581444</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b994226377bfd5e0c31fbf9ba00358fe</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9fce12ebe161495d8b13393d0631b2fc</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6f973db23002bcf537c66e2e448caef5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c7f96a1685a8501212e32cd3dd79e965</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8c8ebdb20630f4f4a021b643b3c6a249</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eda3e44971b19e66f796772c0406c89b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bcaa0a848be6e4cf408b14b5a793f67b</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>46a0e2ce8aa63d11fc42af1cbbfd0688</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dda578bdb6bc76b8cf33ab59198e3e01</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8975e6a2fe0b8766bc69bd0aac1e9a6e</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7b97a73453259eb41c19b8da5aab5809</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5ca6b7e881e4d568b11033b0bdd18ef9</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e5f91d6c12f6f97f3b426ea59cd65244</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>03df98c72c5a4b4dbc8b23f2b827f5a0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7a9108bf4a5ccbea6b6d807f4d69bff8</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1ea696bd814872e87ac02fe301a816e3</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>276ace4b81b40d1b2c291c8e30713f32</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>930b8246b8c40cbbf14b82c0266b4f64</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>95977d5d8c5719b9e3549dcffe67eada</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f21f71f066b8f8a261995d3bf1c2a774</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a9306a5d5dc6afb74510a718a2245dac</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8f214ff5fda53a0705e7e31197343deb</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6d25e8683b8093ca0f9ef2936e7a1867</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>509157e546b6bb662f7c741b1b20f9fb</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>04372165e45cd347f045851edc89c2ad</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>88340c3e6ba3b77c647088396ce2f529</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f457cebbec07d2181a80b2f8f9bf634e</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>fe5cc9e76201716fdb647a4f0b073b6c</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>35dfb7d9e2c2a2d8f70e5de5e8bef44e</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>599a8251f211025a71557e1ede72d295</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cbfc3d991952463542098aa8dc694793</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>22b89fcecfdc27c0520ed4b8f2133f46</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5177cd5569e481b22aa2eb095f08a84b</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>eda28de75c2452c42a74e3e084e87d5f</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cfe4291a7b0613b719ca8101c8c46966</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1ab01560d83665f6c5197329e706f22d</anchor>
      <arglist>(const T1 &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ce36d685784c025e22058468ab1e8999</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcCos, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>acos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1a3121d42dc957db552e049c699bd0f0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcSin, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>asin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d0f13bf85925dae25d0fb5d8a62747e2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcTan, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a60478f81a57de1a5ff965d4937adf2f</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCeil, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ceil</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a7d1a0ddf7a46970dd456d873e5f4974</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCos, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cos</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9024aa81800fa2a71c1007d9ceba867a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypCos, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cosh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>dd9cd8579597007d6c6a4824f67626ed</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnExp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>exp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8bc5c88cd8f062714f6c75c02bf6d62b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFabs, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fabs</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8b926bdf028408667eefe39ffd209908</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFloor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>floor</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f1f4f73b0e6cc9d165467342f15d9749</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b72bf5f987ee4c2a4892cd2b65f4621a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog10, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log10</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a74bea5de10f09a85980939988bfdbdc</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSin, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sin</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a466a55c13f2bb44681ac1c2f6b81c09</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypSin, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sinh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b942e376eb4dd5eb8365d25d1fa8dea5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSqrt, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sqrt</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9f206a8009b046580117dea135c11a1a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnTan, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tan</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cb5ff81dcc3cfb189f0c6fb4f3140cff</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypTan, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tanh</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>bf4662c68629b1fcf2cf0506ef4bc1b0</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>67efa388bb47dd4e0e01ba89e655427c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7c1787acb2901f0ca0143f3136e6fec8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f8a0b3b2300c56e7bf4d66e59b3feeae</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7efbb43c54936af390e0f255a4550d2a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>82e9f3347fe14570caa6d4baeb5c4e65</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7b116b5a256ad4aa31ff38f8c30fe9af</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1bfe7d4dceb31ada24bad13cb83b4a3c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1988ded6b5521ab932a33f96a58e824b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d269d561a826f4cf0963176c96efb583</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>719cb77d1c57db591588812b249ab419</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f4451cf1ec0bf0d42dcfd94f2e76216c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f417f9068ebe4d008cd615d45dbae643</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>559c058819514c9f17a904156d74373b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>9d9d12e0d0a5bfddd84b707e614697e9</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5c4f8c8db6b4b168e0890f2a91dba082</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7c6e77d3a3d5bef2803958d0e8576b4c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>65a9991b0227a3924fd05da97154f0dd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>77aedbfd68fc2307276487b308194918</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e6abede4a3893917aa13674e96dd4c6b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3b1bc848dcbbd0fabcf5f297fe38f764</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7b51128cd0d313bd8e8726e355d3ab17</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b47d24cb8f239cb177b7dd987059556c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>51de756fe22d81df4be52b35e31f6050</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>96f6c917cfd8c8697b1be74227474ca8</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>af99700b4395a35ab0ad63fd11dfc818</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>a4d123d3205ab37b62047a5060820de5</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4d1bd79f0b60a4f0e682f630cab3a874</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>4edb9629cd3d7224396314c8c4693ebb</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>846ddb9e522cfdf612ca003c40b917e3</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>cea1e23c2fa0879da9af640fe2974164</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f67672ad53754e616586f465c4658fe1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>39b53d327a92395c619dfd1e1fb6027c</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5c093899bb6b17a0c475b9173d61364a</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>25613f5721e95ef87a19b1133c2e0d5e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>6bab523938c607d9fb3cf8996b6e8879</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b89a8a2110bced5635e1e4dedbc04d75</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3619d81473b11fb11db3448771aba337</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>d440e2802ae9ea82ffeb6be67872c2f2</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>abbb1fce611b4ee044f0949d0e9079fc</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>8dcc5e39f5b0255d2367b26ec49d43f7</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>ef160b09cfe62738e88f4eab4a33b839</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>39c5ebdaf0d508a9ecdf186ea0925547</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>c79ead3480e068445fe214461ba7048d</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>0c618f47b2b598d3c86728b40f876417</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>10aaafb57bb39108224ad2198f54cc75</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>f0a7d669088f63f14c128db9d4d151bd</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>40fca1dcf997c82df542a36c322da793</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>53c18d0ed16c87d31c4fa80af49ee0d8</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5841386b817c84292ce9c080f53cb079</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>1686bb75f88ef0e82ec150a97d90edce</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5b67451d0799577739246b3e9dfad93a</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>5fcb7ae689935bf70ff6c3d087444371</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b628938e51c58d7a51a0d6c9c48af0dc</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>de496ce83125862e25b3ce1239ada770</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>3d5cb394c5b9e1d2a4d6554777cf4637</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>dot</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>83371ee4fee8d2ecad002c97656c0b5a</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>e0fc334b563c0bd255bd3d19c6f450ed</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>outerProduct</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>118fe5f0df4586101e66449f66722731</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>7cea1688ca63001b09e61b76c47063a6</anchor>
      <arglist>(std::ostream &amp;out, const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceAPPNAMESPACE.html</anchorfile>
      <anchor>b80ab8bbe321487a53f6c38deff942c0</anchor>
      <arglist>(std::istream &amp;is, TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::OTCDot</name>
    <filename>structAPPNAMESPACE_1_1OTCDot.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot.html</anchorfile>
      <anchor>5b7e484a4c27ee9dfaeb5d0f98ea03c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot.html</anchorfile>
      <anchor>a385a44f4520c24b1d020c62740329f4</anchor>
      <arglist>(const TinyVector&lt; std::complex&lt; T1 &gt;, D &gt; &amp;lhs, const TinyVector&lt; std::complex&lt; T2 &gt;, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::OTCDot&lt; T1, T2, 1 &gt;</name>
    <filename>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_011_01_4.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_011_01_4.html</anchorfile>
      <anchor>cd12e1ae747540837b9d9244f9c1d0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_011_01_4.html</anchorfile>
      <anchor>baa93693ccd569cfd6037b7a61dfd583</anchor>
      <arglist>(const TinyVector&lt; std::complex&lt; T1 &gt;, 3 &gt; &amp;lhs, const TinyVector&lt; std::complex&lt; T2 &gt;, 3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::OTCDot&lt; T1, T2, 2 &gt;</name>
    <filename>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_012_01_4.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_012_01_4.html</anchorfile>
      <anchor>739cc866828b096d259baf9a42712cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_012_01_4.html</anchorfile>
      <anchor>fa93a334fb949f2a50b3371ac40e84f8</anchor>
      <arglist>(const TinyVector&lt; std::complex&lt; T1 &gt;, 3 &gt; &amp;lhs, const TinyVector&lt; std::complex&lt; T2 &gt;, 3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::OTCDot&lt; T1, T2, 3 &gt;</name>
    <filename>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_013_01_4.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <member kind="typedef">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_013_01_4.html</anchorfile>
      <anchor>26504cd1b0ff9a9db19ea2e88b762a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1OTCDot_3_01T1_00_01T2_00_013_01_4.html</anchorfile>
      <anchor>4fbc5fd8283d3cc306d9ba4879aa4329</anchor>
      <arglist>(const TinyVector&lt; std::complex&lt; T1 &gt;, 3 &gt; &amp;lhs, const TinyVector&lt; std::complex&lt; T2 &gt;, 3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::PAOps</name>
    <filename>structAPPNAMESPACE_1_1PAOps.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::PAOps&lt; T, 3 &gt;</name>
    <filename>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>real_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>a316bcab35fcf7840e0a64d115444b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; T &gt;</type>
      <name>complex_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>66c4e28c34acd7d1f82b1fc1ae0709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; T, 3 &gt;</type>
      <name>rpos_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>fdc3ff07dfaece855c9710ce61272921</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; complex&lt; T &gt;, 3 &gt;</type>
      <name>cpos_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>2d0b95412f395e566fa5f661371f98c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scale</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>5f71ad590ee1b427817555eb9ab2a580</anchor>
      <arglist>(T a, const ParticleAttrib&lt; cpos_type &gt; &amp;pa, ParticleAttrib&lt; rpos_type &gt; &amp;pb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scale</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>fea4ac9e9f6bce3e95fd43d8168a4267</anchor>
      <arglist>(T a, const ParticleAttrib&lt; rpos_type &gt; &amp;pa, ParticleAttrib&lt; rpos_type &gt; &amp;pb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>22f481eb3a161c74b174eff0ec3e3213</anchor>
      <arglist>(T a, const ParticleAttrib&lt; cpos_type &gt; &amp;pa, ParticleAttrib&lt; rpos_type &gt; &amp;pb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>7ad6a7b79af578bc4be420634e03a643</anchor>
      <arglist>(T a, const ParticleAttrib&lt; rpos_type &gt; &amp;pa, ParticleAttrib&lt; rpos_type &gt; &amp;pb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>58b505833b7b0f8f6fc2aacea0a0df4e</anchor>
      <arglist>(T a, const ParticleAttrib&lt; cpos_type &gt; &amp;pa, const ParticleAttrib&lt; rpos_type &gt; &amp;pb, ParticleAttrib&lt; rpos_type &gt; &amp;py)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_013_01_4.html</anchorfile>
      <anchor>0414c92c04365d30e8b81f71f5444b9d</anchor>
      <arglist>(T a, const ParticleAttrib&lt; rpos_type &gt; &amp;pa, const ParticleAttrib&lt; rpos_type &gt; &amp;pb, ParticleAttrib&lt; rpos_type &gt; &amp;py)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::PAOps&lt; T, 2 &gt;</name>
    <filename>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>real_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>3448d676ca02783a0657b35034707510</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; T &gt;</type>
      <name>complex_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>d1b41f28854b4dcda50ad46e6fd035d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; T, 2 &gt;</type>
      <name>rpos_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>206b59ad91d5d729039850d484c885fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; complex&lt; T &gt;, 2 &gt;</type>
      <name>cpos_type</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>ad74b726ff618a1ac6e106f676f63f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>ea34fe6e5c44e99e762c1b49e389ce91</anchor>
      <arglist>(T a, const ParticleAttrib&lt; cpos_type &gt; &amp;pa, ParticleAttrib&lt; rpos_type &gt; &amp;pb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>21c7b40b415fc84eedcc10b422c3cd54</anchor>
      <arglist>(T a, const ParticleAttrib&lt; rpos_type &gt; &amp;pa, ParticleAttrib&lt; rpos_type &gt; &amp;pb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>576cc77dcdb264d9e98d7916fd88257b</anchor>
      <arglist>(T a, const ParticleAttrib&lt; cpos_type &gt; &amp;pa, const ParticleAttrib&lt; rpos_type &gt; &amp;pb, ParticleAttrib&lt; rpos_type &gt; &amp;py)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structAPPNAMESPACE_1_1PAOps_3_01T_00_012_01_4.html</anchorfile>
      <anchor>daaff99f7b781f9706090f33071636d9</anchor>
      <arglist>(T a, const ParticleAttrib&lt; rpos_type &gt; &amp;pa, const ParticleAttrib&lt; rpos_type &gt; &amp;pb, ParticleAttrib&lt; rpos_type &gt; &amp;py)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::Matrix</name>
    <filename>classAPPNAMESPACE_1_1Matrix.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>62bfbc5e93096b24454ea2872c81dd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>0f971933ef9e74db2b29e5eeec342b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>8cdeb867d34ac117e6c4b1c62e711ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C::size_type</type>
      <name>size_type</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>0100ec2f5ca48d8d7f1ce3ad872afe76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>a06f1ff10b9185d0eb2c23ae014ad9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>ed8e2228a4ee782a18aa7788fd946ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>9a8fa789f4a976f987940dbca27ac074</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>863ea5483968af7fd90b46640173bd27</anchor>
      <arglist>(size_type n, size_type m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>5b09f185b5388a9c36372000fe89c82c</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Matrix</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>dc7a726aa3d2fbca693e9938755edecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>19c9cdb93eb79356cfbaba310f9c7e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>632ab00859f3a669c86c77f5bc4ebd9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>7bda595ea947db0977a3db7a32e56816</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size1</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>a631c343ffd93a99b95e7e66d3987b60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size2</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>9f09059d5cf05aab5402dd23b8e4c0bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>49f69a81c5d62767abce200a247a1bc6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>extent</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>73a2f7d4533e476d61e72a57f1d76ecd</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>2c2c2e4e885bc8bf73b3edf5ab6f2189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>end</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>b099a8c4cc8779ba04fa320189b4c194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>25b51a0bac2c22fed0446bb395b7e5cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>end</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>518e2d26144938778522f5e3b4582dba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>33bf2c17efd9c0693102a81b76c39052</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>fb0ffccf1c44f2306b85100262bddc33</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>6f74fbd663e227cbca9032b7b683384e</anchor>
      <arglist>(size_type n, size_type m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>d74ba2a3ab58f210d43abb4b165db0ac</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>73d78fb3690f7573c2dc693f32ee8da1</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>3de60aebc64cb4d952518a72075f6109</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>331a613ecb83902ec52b373102720fc6</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>2b845a75c5c514b8a8ef338dc021cd56</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>78f51e3198391f859d105d2e19323efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>90d4fb7730cc0470507fc7847d571454</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>4f969c0c6731d4f0d3134c3ad8412db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>488abc509c4868e671bd170aad10eac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>ee498408f464d1f953a1b35c43d52076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>3aacfba04553318c71c74e7d3e01ee1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>169fa3fc8071d3cf4a6dbcbc49de2cf7</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>b1d898c361c013b6a70d7b37e5e737b6</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>f5603c86b58b0c544529095e46ef9ca3</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>e2bcba8bdcf259ee565cc5d5e1c38792</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>ec9316211d4f9f2b5b76ad39acf24938</anchor>
      <arglist>(size_type i, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>4636dc751694ea15798a1763d6aeff9b</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceRow</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>3cd62b726aae578ac0b580ca0ac72ae4</anchor>
      <arglist>(IT first, size_type i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceColumn</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>6b7a676e8ff129dcd124ce2afafdd683</anchor>
      <arglist>(IT first, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Column</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>e039b08c0ef4f1f912cf82870cbfd246</anchor>
      <arglist>(IT first, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>633e9d5ff57a9df13adb2b8e0cfaa25c</anchor>
      <arglist>(const T1 *sub, size_type d1, size_type d2, size_type i0, size_type j0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>7169f43f9f38d15fec653bbf1d1a9d81</anchor>
      <arglist>(const T1 *sub, size_type d1, size_type d2, size_type i0, size_type j0, const T &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>7c4fc377c37015c1fdcd4f81c3889d00</anchor>
      <arglist>(const SubMat_t &amp;sub, unsigned int i0, unsigned int j0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>678fa6db1f17b217b4f43b449040bf01</anchor>
      <arglist>(const This_t &amp;sub, unsigned int i0, unsigned int j0)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>a64a5daf0ed7cd46d5ef004c9dbbb8a4</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>207e7babf3ae26b3704f2d25f52ec3ca</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>D1</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>eea68a2abcb8a5127327fd232160b668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>D2</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>ede6631980015a9480d7acf9cf2c863f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>TotSize</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>b7889d300f88c0b51e1adeb918ae5e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classAPPNAMESPACE_1_1Matrix.html</anchorfile>
      <anchor>8d5310d1b90cd82bd0d8978f7a63e942</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</name>
    <filename>structAPPNAMESPACE_1_1CreateLeaf_3_01Matrix_3_01T_00_01C_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>Reference&lt; Matrix&lt; T, C &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>structAPPNAMESPACE_1_1CreateLeaf_3_01Matrix_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>54ac42b3d828e27b31443b245e8df017</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>structAPPNAMESPACE_1_1CreateLeaf_3_01Matrix_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>faeea0efc3e95462567139683bf235fd</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::SizeLeaf2</name>
    <filename>classAPPNAMESPACE_1_1SizeLeaf2.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>classAPPNAMESPACE_1_1SizeLeaf2.html</anchorfile>
      <anchor>44d5a3ac083b838d4f9600897fad0040</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf2</name>
      <anchorfile>classAPPNAMESPACE_1_1SizeLeaf2.html</anchorfile>
      <anchor>a12a2477a5e48df7a1928105bd4ab2c0</anchor>
      <arglist>(size_type s, size_type p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf2</name>
      <anchorfile>classAPPNAMESPACE_1_1SizeLeaf2.html</anchorfile>
      <anchor>dea1e9503685125c5d4c94ddb0a3ae27</anchor>
      <arglist>(const SizeLeaf2 &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1SizeLeaf2.html</anchorfile>
      <anchor>f1eb6fc1ff969070a0ba8492fc018ea5</anchor>
      <arglist>(size_type s, size_type p) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>size_m</name>
      <anchorfile>classAPPNAMESPACE_1_1SizeLeaf2.html</anchorfile>
      <anchor>06a2112206859b49c5f0567959d96922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>size_n</name>
      <anchorfile>classAPPNAMESPACE_1_1SizeLeaf2.html</anchorfile>
      <anchor>7831e5501b4012f84c8a5133a835cc3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</name>
    <filename>structAPPNAMESPACE_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf2_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>aa63150d4f3a7b774fbc87bedf1ade08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>120244218271df50ab783b64b8a48998</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeaf2 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</name>
    <filename>structAPPNAMESPACE_1_1LeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01SizeLeaf2_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1LeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>0acff69dcde2ee190d086c5a91a8c090</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1LeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>3b151bbe8cf19454b2455fd2295cccb5</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;v, const SizeLeaf2 &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</name>
    <filename>structAPPNAMESPACE_1_1LeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01EvalLeaf2_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>structAPPNAMESPACE_1_1LeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01EvalLeaf2_01_4.html</anchorfile>
      <anchor>fe4849db7bd5b830a9671bc732f5fc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structAPPNAMESPACE_1_1LeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01EvalLeaf2_01_4.html</anchorfile>
      <anchor>f35ae7c59fba85dab04f76328c02662a</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;mat, const EvalLeaf2 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::Vector</name>
    <filename>classAPPNAMESPACE_1_1Vector.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>e3f59b72f00101bee1d892033c00efa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>100349622ed81e63336c7bca423e6678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>5dd7b482a5731eca65a322cc2137c227</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>3f78e3b66a16e35e2c098d7e75e4500d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>6c61fb91c622b1f8e2b96dc1e8dafbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>5ee4220322d1c21d50d105b22de2d0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>d70b7843470514f3ae39605c4f2c0a6e</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>5d035ad6f8999a89cd24ca481f09e903</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>afe746ae5bbc9c7157355abc9b7fb492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>4f75d753b4a7bffcdc32656a4d060f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>701cbf9752788a6394f7d9fffb0d9735</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>591e3c913ea80d70e494a7951d14a4b5</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>8fd169750fbc972166544017fbd5bd17</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>baefe59659c0ad2e25c9461ca4153cb8</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>8094e1b2929803afc04a0f548d06518b</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>c05c9786a74e2724cbe0ee278bae0ccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>0c6ecca46f0a922f9a97758b829c76e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>315bd28246d3f149f4afdcdc491411c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>222ce2d18e0220b3ae7047409c126874</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>58df0294f7601f74afe18fd6ba1e8709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>a63a83d055bc5d9f93ab1579dbe4cd30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>dbec9b086010336b99ec7ed0a55a5553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>ef2b14cb367cbc7eafed46c91889f75c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>a64e0ac74904ffd638268e7fc6f9174e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>71e4f501abd557c1c3a32b182e9f0117</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>61406a6a21ad44df3f4f729c3336ea71</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>8da69394da5dd63655f0496e4994edd0</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>6ab08a69882b5bbc49ff6491fc824ad6</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>8161a155f872b88841988eaa6894201f</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classAPPNAMESPACE_1_1Vector.html</anchorfile>
      <anchor>2eb28b7b77f7e368ec785e01fe373cc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::TinyVector</name>
    <filename>classAPPNAMESPACE_1_1TinyVector.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="enumvalue">
      <name>Size</name>
      <anchor>f0cd8a79e1d05904673f6796385b2a1184df5f8948c675e5ef427dadb2283ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>2c9ec3f6836aef3e098da24cc2d3b8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>d752108b1befafca5068077d3100f35a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>a3b8ff0ac157b79c473c71acde47756b</anchor>
      <arglist>(DontInitialize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>c661039b70d98c099794a66a31bede16</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>216d33d106da321f96127ca2c2572799</anchor>
      <arglist>(const TinyVector&lt; T1, D1 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>c0dfaf1b9d27925214d76f58c8fbec4b</anchor>
      <arglist>(const T &amp;x00)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>0ba86448aada721132f0db4d0b7048f2</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>5e02b84378bdeb2eb7287ed1292b8b21</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>22c51112484bd0be277d4249c8a46da6</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02, const T &amp;x03)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TinyVector</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>1559b8176b2326086298b17b2ef39495</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>336cdd457234604e2d572f92c1ba8943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>47f8414f3384744886e025829ee6b986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>6b1e5554593b0d9c958834eb41b89d20</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>6577b4933567d40a896bbfc4e564f424</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>7bba60c75f24b924aa3e59b88dba03af</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>2f3ac85dac8637e00d0399438d698ee5</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>36c0bb0d1aba2cd68255c4a1a4d2c3c2</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>b8c5ce4b43dc270cb75a7e9f1d46148e</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>0d7d3326e6f4d8c16fb8dcdf3974484d</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>712de711738e61d72f4313d802e3350a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>begin</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>032f0598ae85e01dc0824f37f7474d2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>end</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>ec1f65e1e4178c7cdbb5dc6ecd5fa1c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>end</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>19d4be0087f36a65205304e43d8c5aad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>d7f4fbd1f1b95833e240eb9941579ceb</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>1d5daa7ef95b77b0ad72dc00ea3c5a04</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>X</name>
      <anchorfile>classAPPNAMESPACE_1_1TinyVector.html</anchorfile>
      <anchor>67b695624fc3ba9dab933d4944fd82e4</anchor>
      <arglist>[Size]</arglist>
    </member>
    <class kind="class">APPNAMESPACE::TinyVector::DontInitialize</class>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::TinyVector::DontInitialize</name>
    <filename>classAPPNAMESPACE_1_1TinyVector_1_1DontInitialize.html</filename>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::printTinyVector</name>
    <filename>structAPPNAMESPACE_1_1printTinyVector.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</name>
    <filename>structAPPNAMESPACE_1_1printTinyVector_3_01TinyVector_3_01T_00_01D_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>structAPPNAMESPACE_1_1printTinyVector_3_01TinyVector_3_01T_00_01D_01_4_01_4.html</anchorfile>
      <anchor>12744e5061747534e8cc9c279d8b87ac</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, D &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</name>
    <filename>structAPPNAMESPACE_1_1printTinyVector_3_01TinyVector_3_01T_00_012_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>structAPPNAMESPACE_1_1printTinyVector_3_01TinyVector_3_01T_00_012_01_4_01_4.html</anchorfile>
      <anchor>5234e410c00fb2f2be2a61330c99aca0</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, 2 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>APPNAMESPACE::printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</name>
    <filename>structAPPNAMESPACE_1_1printTinyVector_3_01TinyVector_3_01T_00_013_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>structAPPNAMESPACE_1_1printTinyVector_3_01TinyVector_3_01T_00_013_01_4_01_4.html</anchorfile>
      <anchor>fc80b1ff421c76273fbbe30beb61c563</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, 3 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::FFTAbleVectorBase</name>
    <filename>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</filename>
    <templarg>precision</templarg>
    <base>APPNAMESPACE::Vector&lt; precision &gt;</base>
    <member kind="function">
      <type></type>
      <name>FFTAbleVectorBase</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>55bb8b22535ddb0f1c6e6bc47d025754</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FFTAbleVectorBase</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>52ebbd5ddf047f136709bee44b91695a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTAbleVectorBase</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>f0f0ecc572da6e6a669b13b9f46e34c9</anchor>
      <arglist>(const FFTAbleVectorBase &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FFTAbleVectorBase *</type>
      <name>clone</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>ad0bd24630e3524bb43fac192f5aa124</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForwardNorm</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>31ff7f6a3a4b876d29594189d55ac809</anchor>
      <arglist>(double fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackwardNorm</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>1d0c69346e4370ecc5eeab2285b90a94</anchor>
      <arglist>(double bn)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformForward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>8e7a12e67f35d6a37210d7ef19e9c007</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformBackward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>29d7109ca2bc3265e8b0c220edc1f61c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumPts</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>14357657797f0587d3833a6f4810a1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ForwardNorm</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>17850e336d0a73f910fd25fb6a6716b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>BackwardNorm</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVectorBase.html</anchorfile>
      <anchor>9a065997a912ef7d9579849a4706fb0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::FFTAbleVector</name>
    <filename>classAPPNAMESPACE_1_1FFTAbleVector.html</filename>
    <templarg>dimensions</templarg>
    <templarg>precision</templarg>
    <templarg>FFTEngine</templarg>
    <base>APPNAMESPACE::FFTAbleVectorBase</base>
    <member kind="function">
      <type></type>
      <name>FFTAbleVector</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>77f7eb9d2cd10d61c32ddb87885cedbf</anchor>
      <arglist>(int sizeDim1, int sizeDim2=0, int sizeDim3=0, int sizeDim4=0, int sizeDim5=0, int sizeDim6=0, int sizeDim7=0, int sizeDim8=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTAbleVector</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>68430fcf7b448d414210798556020612</anchor>
      <arglist>(const TinyVector&lt; int, dimensions &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTAbleVector</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>78cdca3407c36844562e87de98cc7bbb</anchor>
      <arglist>(const FFTAbleVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FFTAbleVector *</type>
      <name>clone</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>ffe00c3ba4045944661f5ecd70729a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>97dbb0d713c572d13368ea9d3ba7cc63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>c76d22bf97746b12cb9238414fa5d044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>FFTAbleVectorBase&lt; precision &gt;</type>
      <name>base</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>f453f2b494c07f10298e4cfaf3e8ddd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>0e9b0112d11c2c8aa0e76dc7ce06e2a7</anchor>
      <arglist>(const TinyVector&lt; int, dimensions &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; int, dimensions &gt;</type>
      <name>SizeDims</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>9ab19c2277d27b2ef063d480c88be930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FFTEngine&lt; dimensions, precision &gt;</type>
      <name>MyEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTAbleVector.html</anchorfile>
      <anchor>a79fe13c85aa4bc9c7236540f5cf5da4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::FFTWEngine</name>
    <filename>classAPPNAMESPACE_1_1FFTWEngine.html</filename>
    <templarg>dimensions</templarg>
    <templarg>precision</templarg>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; double &gt; &gt;</name>
    <filename>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</filename>
    <templarg>dimensions</templarg>
    <member kind="function">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>cad7565bcbb36fb01b0b18cba99ce0e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>04dffa3ba636208969172d4729b2bba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>feeff9716f91019fc8df998cc73cbaae</anchor>
      <arglist>(const int *DimSizes, std::complex&lt; double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>d691286463782bbaa9be87b9d491b1ed</anchor>
      <arglist>(std::complex&lt; double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>786b40b5eda73fcbbb4fe168da705ea8</anchor>
      <arglist>(std::complex&lt; double &gt; *DataArray)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fftw_complex *</type>
      <name>mangle</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>32aed2df661f980a09aa4d9e5ba0cc22</anchor>
      <arglist>(std::complex&lt; double &gt; *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>106b1573e61f8d92aa4f2246eda6433f</anchor>
      <arglist>(const FFTWEngine &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftw_plan</type>
      <name>forwardPlan</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>2d569e226d0551e2877e56e715f6ac30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftw_plan</type>
      <name>backwardPlan</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>acaa91718ff0d65bd9aff2bc231f8002</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; long double &gt; &gt;</name>
    <filename>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</filename>
    <templarg>dimensions</templarg>
    <member kind="function">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>30c915dff30b5071a32a63e9cbd9f356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>62b88aa21d66e0d8a9aa6c18baf9f3e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>b6405e2ff034bf0538970a517576ecbd</anchor>
      <arglist>(const int *DimSizes, std::complex&lt; long double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>22b4ac1582282e5c83c0574ba8a60ee3</anchor>
      <arglist>(std::complex&lt; long double &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>fd2ee5ba9326227ba5d7bf132d3442cf</anchor>
      <arglist>(std::complex&lt; long double &gt; *DataArray)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fftwl_complex *</type>
      <name>mangle</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>67e3acfc2c978dda183e97fcec232f33</anchor>
      <arglist>(std::complex&lt; long double &gt; *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>e8376efee3f56d035d54c86fa357b88c</anchor>
      <arglist>(const FFTWEngine &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwl_plan</type>
      <name>forwardPlan</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>24b727c409078d94ecc31c0648e6c261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwl_plan</type>
      <name>backwardPlan</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01long_01double_01_4_01_4.html</anchorfile>
      <anchor>2abe57029c45ad76b6e9c9d14927bbe6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>APPNAMESPACE::FFTWEngine&lt; dimensions, std::complex&lt; float &gt; &gt;</name>
    <filename>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</filename>
    <templarg>dimensions</templarg>
    <member kind="function">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>2165232a2fe2ee1fed367213dbaaa701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>1b0d58c8956278e20d4d9469979a0352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>c78ded3c58bb9ea992aeea8ad757f860</anchor>
      <arglist>(const int *DimSizes, std::complex&lt; float &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformForward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>bbe02feead4c20f2ec010df8a216777d</anchor>
      <arglist>(std::complex&lt; float &gt; *DataArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformBackward</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>635009cb750a038d7d97db86051a105c</anchor>
      <arglist>(std::complex&lt; float &gt; *DataArray)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>fftwf_complex *</type>
      <name>mangle</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>375c47a734493877fd74178be70043ce</anchor>
      <arglist>(std::complex&lt; float &gt; *p)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FFTWEngine</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>3bdf5cfc38f6469b4ad7cd5ee87d8305</anchor>
      <arglist>(const FFTWEngine &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwf_plan</type>
      <name>forwardPlan</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>2fd69e86f845b659e24a9e4720988580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fftwf_plan</type>
      <name>backwardPlan</name>
      <anchorfile>classAPPNAMESPACE_1_1FFTWEngine_3_01dimensions_00_01std_1_1complex_3_01float_01_4_01_4.html</anchorfile>
      <anchor>4246099f2a53b3c54e537b9c31c89ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>OHMMS</name>
    <filename>namespaceOHMMS.html</filename>
    <class kind="struct">OHMMS::PLayoutFunc</class>
    <class kind="struct">OHMMS::ProjectData</class>
    <class kind="class">OHMMS::RandomNumberControl</class>
    <member kind="function">
      <type>void</type>
      <name>printXML</name>
      <anchorfile>namespaceOHMMS.html</anchorfile>
      <anchor>c0b2cfd97701a515b165376b1b801791</anchor>
      <arglist>(const T &amp;, ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OHMMS::PLayoutFunc</name>
    <filename>structOHMMS_1_1PLayoutFunc.html</filename>
    <base>PtclOnLatticeTraits</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBC</name>
      <anchorfile>structOHMMS_1_1PLayoutFunc.html</anchorfile>
      <anchor>38849ba4d41327f35f4536acee460e17</anchor>
      <arglist>(const ParticleLayout_t &amp;Lattice, const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBC</name>
      <anchorfile>structOHMMS_1_1PLayoutFunc.html</anchorfile>
      <anchor>5ea3eee32e78a3464535b287b8ed501a</anchor>
      <arglist>(const ParticleLayout_t &amp;Lattice, ParticlePos_t &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OHMMS::ProjectData</name>
    <filename>structOHMMS_1_1ProjectData.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>ProjectData</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>4d38d896ffb3abee669e2cbfcc513a3f</anchor>
      <arglist>(const char *aname=&quot;project&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>f872d520da7184c1d2d03d7885238456</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>250d7f1027dbad5d1972f3331e95d5e0</anchor>
      <arglist>(istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>2db938526f2e87381f461b26bda02125</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>fd3d8975df90b4d6232da710c6d9741f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>2cc692f062ca81bde54602acf7c6488d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>c8a412920f9901e91f262378a988291a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>e838350fcbf18aa0df9f0586056b04cc</anchor>
      <arglist>(const string &amp;atitle)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>CurrentMainRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>fcd722729e564eaf37615a630ec94642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>CurrentRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>8b915973c293108ceadac3f8487018b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>NextRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>5cbad40a3d5394367a5a2c42bf741aa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PreviousRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>908c375b2a43f6d3908698ae31e41050</anchor>
      <arglist>(string &amp;oldroot) const</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_title</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>9d37dc216923a78ebc980024d437a97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_user</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>198dcef09fec6c4c454ae70f3a553651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_host</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>2b0342f179010cd40211eaa8e6ec15b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_date</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>5119b60e7c23d2c525af5f95b2e96f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_projectmain</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>feddca008862ccc31418fa55a3633331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_projectroot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>3693982389764ba997eee8cf649a9819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_nextroot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a13fad0dff3ebfe027d23ac1479cd2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_series</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>0831bb368d49cd14e47b1fde53151e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>m_cur</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>d4b9b8e347544d2d913b8977e9380236</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OHMMS::RandomNumberControl</name>
    <filename>classOHMMS_1_1RandomNumberControl.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>RandomNumberControl</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>96168d62949e7681b59c0bc7fc361315</anchor>
      <arglist>(const char *aname=&quot;random&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>b9d85751d607ed04b8c5e011153eaff0</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>8ca9023c3f528d1565fd3d9e8a92067e</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>36c5057532a6e3540eed2ad4dee37f11</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>74d7632da7dccb7f2b44e67d95ba39e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>initialize</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>ea153be9600ec5c3d99bd65b0d01a575</anchor>
      <arglist>(xmlXPathContextPtr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NeverBeenInitialized</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a321ee82a78c70e38ad6f64dc294b894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>myCur</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>29fe985b743b3a30032e6951703e4b5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Pooma</name>
    <filename>namespacePooma.html</filename>
    <class kind="class">Pooma::Clock</class>
  </compound>
  <compound kind="class">
    <name>Pooma::Clock</name>
    <filename>classPooma_1_1Clock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>2ab7be60efacdd482fc51ec1f4f6fcb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>21f024a079e3cad1b3d84ab1ebbec328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cpu_time</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>35330d3e358137a6a5ff3d471104791d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>value</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>357904aa5a843ceeedd8aa04f6fca088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>highSpeed</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>e5e756b0a0a1ef9e76b3051982628d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>start_time</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>d214a98d66937a5d64e6b5db13447275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>stop_time</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>d63516cbf6fc8b854c6cd0b83eee614d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>qmcplusplus</name>
    <filename>namespaceqmcplusplus.html</filename>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeafPA</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</class>
    <class kind="class">qmcplusplus::ParticleAttrib</class>
    <class kind="class">qmcplusplus::ParticleBase</class>
    <class kind="struct">qmcplusplus::AsymmetricDTD</class>
    <class kind="class">qmcplusplus::DistanceTable</class>
    <class kind="struct">qmcplusplus::PairDataType</class>
    <class kind="struct">qmcplusplus::TempDisplacement</class>
    <class kind="class">qmcplusplus::DistanceTableData</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</class>
    <class kind="struct">qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</class>
    <class kind="class">qmcplusplus::HDFWalkerInput0</class>
    <class kind="class">qmcplusplus::HDFWalkerInputCollect</class>
    <class kind="class">qmcplusplus::HDFWalkerInputManager</class>
    <class kind="class">qmcplusplus::HDFWalkerOutput</class>
    <class kind="class">qmcplusplus::MCWalkerConfiguration</class>
    <class kind="class">qmcplusplus::ParticleSet</class>
    <class kind="struct">qmcplusplus::SymmetricDTD</class>
    <class kind="struct">qmcplusplus::Walker</class>
    <class kind="struct">qmcplusplus::Timer</class>
    <class kind="struct">qmcplusplus::HDFAttribIOBase</class>
    <class kind="struct">qmcplusplus::HDFAttribIO</class>
    <class kind="struct">qmcplusplus::CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</class>
    <class kind="class">qmcplusplus::SizeLeaf</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</class>
    <class kind="struct">qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</class>
    <class kind="class">qmcplusplus::Tensor</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; hsize_t &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; int &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; double &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; double, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; TinyVector&lt; int, D &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; string &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; double, 3 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; Array&lt; complex&lt; double &gt;, 3 &gt; &gt;</class>
    <class kind="struct">qmcplusplus::MatrixOperators</class>
    <class kind="class">qmcplusplus::OneDimCubicSplineFirst</class>
    <class kind="class">qmcplusplus::OneDimCubicSplinePBC</class>
    <class kind="class">qmcplusplus::OneDimCubicSpline</class>
    <class kind="struct">qmcplusplus::OneDimGridBase</class>
    <class kind="struct">qmcplusplus::LinearGrid</class>
    <class kind="struct">qmcplusplus::LogGrid</class>
    <class kind="struct">qmcplusplus::LogGridZero</class>
    <class kind="struct">qmcplusplus::NumericalGrid</class>
    <class kind="struct">qmcplusplus::FunctorBase</class>
    <class kind="struct">qmcplusplus::OneDimGridFunctor</class>
    <class kind="class">qmcplusplus::OneDimConstFunctor</class>
    <class kind="class">qmcplusplus::OneDimLinearSpline</class>
    <class kind="struct">qmcplusplus::OneDimNumGridFunctor</class>
    <class kind="struct">qmcplusplus::TricubicBsplineGrid</class>
    <class kind="struct">qmcplusplus::TricubicBsplineTraits</class>
    <class kind="class">qmcplusplus::TricubicBspline</class>
    <class kind="class">qmcplusplus::TricubicBsplineVector</class>
    <class kind="class">qmcplusplus::TricubicBsplineSet</class>
    <class kind="class">qmcplusplus::TriCubicSplineT</class>
    <class kind="struct">qmcplusplus::XYZCubicGrid</class>
    <class kind="class">qmcplusplus::AGPDeterminant</class>
    <class kind="class">qmcplusplus::AGPDeterminantBuilder</class>
    <class kind="struct">qmcplusplus::HePresetHF</class>
    <class kind="struct">qmcplusplus::HePresetHFBuilder</class>
    <class kind="struct">qmcplusplus::ComboSTO</class>
    <class kind="struct">qmcplusplus::HFAtomicSTOSet</class>
    <class kind="class">qmcplusplus::HFAtomicSTOSetBuilder</class>
    <class kind="struct">qmcplusplus::BasisSetBase</class>
    <class kind="struct">qmcplusplus::BasisSetBuilder</class>
    <class kind="class">qmcplusplus::BasisSetFactory</class>
    <class kind="struct">qmcplusplus::ComboOrbital</class>
    <class kind="struct">qmcplusplus::DetSetBuilderWithBasisSet</class>
    <class kind="class">qmcplusplus::DiracDeterminant</class>
    <class kind="struct">qmcplusplus::DummyBasisSet</class>
    <class kind="class">qmcplusplus::ElectronGasComplexOrbitalBuilder</class>
    <class kind="struct">qmcplusplus::RealEGOSet</class>
    <class kind="class">qmcplusplus::ElectronGasOrbitalBuilder</class>
    <class kind="struct">qmcplusplus::HEGGrid</class>
    <class kind="struct">qmcplusplus::HEGGrid&lt; T, 3 &gt;</class>
    <class kind="class">qmcplusplus::DiracDeterminantBase</class>
    <class kind="class">qmcplusplus::DiracDeterminantT</class>
    <class kind="class">qmcplusplus::SlaterDet</class>
    <class kind="class">qmcplusplus::SlaterDetBuilder</class>
    <class kind="struct">qmcplusplus::GroupedOrbitalSet</class>
    <class kind="struct">qmcplusplus::AnyConstraints</class>
    <class kind="class">qmcplusplus::CBSOBuilder</class>
    <class kind="class">qmcplusplus::CubicBsplineGroup</class>
    <class kind="struct">qmcplusplus::JAABuilder</class>
    <class kind="struct">qmcplusplus::JABBuilder</class>
    <class kind="class">qmcplusplus::JastrowBasisBuilder</class>
    <class kind="class">qmcplusplus::JastrowBuilder</class>
    <class kind="class">qmcplusplus::LRTwoBodyJastrow</class>
    <class kind="struct">qmcplusplus::ModPadeFunctor</class>
    <class kind="struct">qmcplusplus::NoCuspFunctor</class>
    <class kind="struct">qmcplusplus::CutoffFunctor</class>
    <class kind="struct">qmcplusplus::NumericalJastrow</class>
    <class kind="class">qmcplusplus::OneBodyJastrow</class>
    <class kind="struct">qmcplusplus::PadeConstraints</class>
    <class kind="struct">qmcplusplus::ScaledPadeConstraints</class>
    <class kind="struct">qmcplusplus::PadeFunctor</class>
    <class kind="struct">qmcplusplus::Pade2ndOrderFunctor</class>
    <class kind="struct">qmcplusplus::ScaledPadeFunctor</class>
    <class kind="class">qmcplusplus::PolarizedJastrow</class>
    <class kind="struct">qmcplusplus::RPAConstraints</class>
    <class kind="struct">qmcplusplus::RPAPBCConstraints</class>
    <class kind="struct">qmcplusplus::ShortRangePartAdapter</class>
    <class kind="struct">qmcplusplus::RPAJastrow</class>
    <class kind="struct">qmcplusplus::CubicBsplineSingle</class>
    <class kind="struct">qmcplusplus::CubicSplineBasisSet</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminal</class>
    <class kind="class">qmcplusplus::ThreeBodyGeminalBuilder</class>
    <class kind="class">qmcplusplus::ThreeBodyPade</class>
    <class kind="class">qmcplusplus::ThreeBodyPadeBuilder</class>
    <class kind="struct">qmcplusplus::TruncatedPadeFunctor</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</class>
    <class kind="class">qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</class>
    <class kind="class">qmcplusplus::TwoBodyJastrowOrbital</class>
    <class kind="struct">qmcplusplus::WMFunctor</class>
    <class kind="class">qmcplusplus::LCOrbitals</class>
    <class kind="class">qmcplusplus::LCOrbitalSet</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, true &gt;</class>
    <class kind="class">qmcplusplus::LCOrbitalSet&lt; BS, false &gt;</class>
    <class kind="struct">qmcplusplus::LocalizedBasisSet</class>
    <class kind="class">qmcplusplus::MixedSPOSet</class>
    <class kind="struct">qmcplusplus::Any2GridBuilder</class>
    <class kind="struct">qmcplusplus::AtomicBasisBuilder</class>
    <class kind="class">qmcplusplus::GridMolecularOrbitals</class>
    <class kind="struct">qmcplusplus::GTO2GridBuilder</class>
    <class kind="class">qmcplusplus::GTOBuilder</class>
    <class kind="class">qmcplusplus::GTOMolecularOrbitals</class>
    <class kind="class">qmcplusplus::MolecularBasisBuilder</class>
    <class kind="class">qmcplusplus::MolecularOrbitalBasis</class>
    <class kind="struct">qmcplusplus::MolecularOrbitalBuilder</class>
    <class kind="struct">qmcplusplus::PadeOrbital</class>
    <class kind="class">qmcplusplus::NGOBuilder</class>
    <class kind="class">qmcplusplus::NumericalMolecularOrbitals</class>
    <class kind="struct">qmcplusplus::NumericalRGFBuilder</class>
    <class kind="struct">qmcplusplus::RGFBuilderBase</class>
    <class kind="struct">qmcplusplus::STO2GridBuilder</class>
    <class kind="class">qmcplusplus::STOBuilder</class>
    <class kind="class">qmcplusplus::STOMolecularOrbitals</class>
    <class kind="class">qmcplusplus::MultiSlaterDeterminant</class>
    <class kind="class">qmcplusplus::NumericalOrbitalSetBuilder</class>
    <class kind="class">qmcplusplus::OrbitalBuilderBase</class>
    <class kind="struct">qmcplusplus::OrbitalConstraintsBase</class>
    <class kind="struct">qmcplusplus::DummyGrid</class>
    <class kind="struct">qmcplusplus::OrbitalSetTraits</class>
    <class kind="struct">qmcplusplus::OrbitalTraits</class>
    <class kind="struct">qmcplusplus::OrbitalTraits&lt; double &gt;</class>
    <class kind="class">qmcplusplus::PWBasis</class>
    <class kind="class">qmcplusplus::PWOrbitalBuilder</class>
    <class kind="class">qmcplusplus::PWOrbitalSet</class>
    <class kind="struct">qmcplusplus::PWParameterSet</class>
    <class kind="struct">qmcplusplus::SingleParticleOrbitalSet</class>
    <class kind="class">qmcplusplus::SlaterDeterminant</class>
    <class kind="struct">qmcplusplus::SphericalBasisSet</class>
    <class kind="struct">qmcplusplus::SphericalOrbitalSet</class>
    <class kind="class">qmcplusplus::Spline3DBuilder</class>
    <class kind="class">qmcplusplus::SplineSetBuilder</class>
    <class kind="class">qmcplusplus::SPOSetBase</class>
    <class kind="class">qmcplusplus::TrialWaveFunction</class>
    <class kind="class">qmcplusplus::TricubicBsplineSetBuilder</class>
    <class kind="class">qmcplusplus::TriCubicSplineBuilder</class>
    <class kind="struct">qmcplusplus::WaveFunctionFactory</class>
    <class kind="struct">qmcplusplus::BareKineticEnergy</class>
    <class kind="struct">qmcplusplus::ConservedEnergy</class>
    <class kind="struct">qmcplusplus::CoulombPBCAA</class>
    <class kind="struct">qmcplusplus::CoulombPBCAB</class>
    <class kind="struct">qmcplusplus::CoulombPBCAATemp</class>
    <class kind="struct">qmcplusplus::CoulombPBCABTemp</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAB</class>
    <class kind="struct">qmcplusplus::CoulombPotentialAA</class>
    <class kind="struct">qmcplusplus::ECPComponentBuilder</class>
    <class kind="struct">qmcplusplus::ECPotentialBuilder</class>
    <class kind="struct">qmcplusplus::EffMKineticEnergy</class>
    <class kind="struct">qmcplusplus::FSAtomPseudoPot</class>
    <class kind="struct">qmcplusplus::HamiltonianFactory</class>
    <class kind="struct">qmcplusplus::HarmonicPotential</class>
    <class kind="struct">qmcplusplus::IonIonPotential</class>
    <class kind="struct">qmcplusplus::LocalCorePolPotential</class>
    <class kind="struct">qmcplusplus::LocalECPotential</class>
    <class kind="struct">qmcplusplus::LocalPPotential</class>
    <class kind="class">qmcplusplus::ModInsKineticEnergy</class>
    <class kind="class">qmcplusplus::PtclChoiceBase</class>
    <class kind="class">qmcplusplus::RandomChoice</class>
    <class kind="class">qmcplusplus::RandomChoicePerWalker</class>
    <class kind="class">qmcplusplus::StaticChoice</class>
    <class kind="class">qmcplusplus::MomDistBase</class>
    <class kind="class">qmcplusplus::FFTMomentumDist</class>
    <class kind="class">qmcplusplus::ThreeDimMomDist</class>
    <class kind="class">qmcplusplus::OneDimMomDist</class>
    <class kind="class">qmcplusplus::AveragedOneDimMomDist</class>
    <class kind="class">qmcplusplus::DirectMomDist</class>
    <class kind="class">qmcplusplus::RandomMomDist</class>
    <class kind="struct">qmcplusplus::NonLocalECPComponent</class>
    <class kind="struct">qmcplusplus::NonLocalECPotential</class>
    <class kind="struct">qmcplusplus::NonLocalPPotential</class>
    <class kind="struct">qmcplusplus::NonLocalTOperator</class>
    <class kind="struct">qmcplusplus::PolarizationPotential</class>
    <class kind="class">qmcplusplus::QMCHamiltonian</class>
    <class kind="struct">qmcplusplus::NonLocalData</class>
    <class kind="struct">qmcplusplus::QMCHamiltonianBase</class>
    <class kind="struct">qmcplusplus::Spline3DPotential</class>
    <class kind="struct">qmcplusplus::TriCubicSplinePotential</class>
    <class kind="class">qmcplusplus::HDFWalkerMerger</class>
    <class kind="struct">qmcplusplus::DMCEnergyEstimator</class>
    <class kind="class">qmcplusplus::LocalEnergyEstimator</class>
    <class kind="class">qmcplusplus::LocalEnergyOnlyEstimator</class>
    <class kind="struct">qmcplusplus::MultipleEnergyEstimator</class>
    <class kind="class">qmcplusplus::PolarizationEstimator</class>
    <class kind="struct">qmcplusplus::RQMCEstimator</class>
    <class kind="struct">qmcplusplus::ScalarEstimatorBase</class>
    <class kind="class">qmcplusplus::ScalarEstimatorManager</class>
    <class kind="class">qmcplusplus::CloneManager</class>
    <class kind="class">qmcplusplus::DMC</class>
    <class kind="struct">qmcplusplus::DMCFactory</class>
    <class kind="class">qmcplusplus::DMCMoveAll</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdate</class>
    <class kind="class">qmcplusplus::DMCNonLocalUpdatePbyP</class>
    <class kind="class">qmcplusplus::DMCOMP</class>
    <class kind="class">qmcplusplus::DMCPbyP</class>
    <class kind="class">qmcplusplus::DMCPbyPOMP</class>
    <class kind="class">qmcplusplus::DMCUpdateAllWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdateAllWithKill</class>
    <class kind="class">qmcplusplus::DMCUpdateBase</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithRejection</class>
    <class kind="class">qmcplusplus::DMCUpdatePbyPWithKill</class>
    <class kind="class">qmcplusplus::DMCWOS</class>
    <class kind="struct">qmcplusplus::WalkerControlMPI</class>
    <class kind="struct">qmcplusplus::WalkerReconfiguration</class>
    <class kind="struct">qmcplusplus::WalkerReconfigurationMPI</class>
    <class kind="class">qmcplusplus::DummyQMC</class>
    <class kind="class">qmcplusplus::GSLOptimize</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; PooledData&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::Bead</class>
    <class kind="struct">qmcplusplus::MultiChain</class>
    <class kind="class">qmcplusplus::HDFMultiChainOutput</class>
    <class kind="class">qmcplusplus::HDFMultiChainInput</class>
    <class kind="struct">qmcplusplus::PolymerChain</class>
    <class kind="class">qmcplusplus::PolymerEstimator</class>
    <class kind="class">qmcplusplus::QMCCostFunction</class>
    <class kind="class">qmcplusplus::QMCDriver</class>
    <class kind="class">qmcplusplus::QMCOptimize</class>
    <class kind="class">qmcplusplus::QMCUpdateBase</class>
    <class kind="class">qmcplusplus::ReptationMC</class>
    <class kind="class">qmcplusplus::RQMCMultiple</class>
    <class kind="class">qmcplusplus::RQMCMultiWarp</class>
    <class kind="class">qmcplusplus::SimpleFixedNodeBranch</class>
    <class kind="struct">qmcplusplus::SinglePtclWarp</class>
    <class kind="struct">qmcplusplus::SpaceWarp</class>
    <class kind="class">qmcplusplus::VMC</class>
    <class kind="struct">qmcplusplus::VMCFactory</class>
    <class kind="class">qmcplusplus::VMCMoveAll</class>
    <class kind="class">qmcplusplus::VMCMultiple</class>
    <class kind="class">qmcplusplus::VMCMultipleWarp</class>
    <class kind="class">qmcplusplus::VMCParticleByParticle</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiple</class>
    <class kind="class">qmcplusplus::VMCPbyPMultiWarp</class>
    <class kind="class">qmcplusplus::VMCSingle</class>
    <class kind="class">qmcplusplus::VMCSingleOMP</class>
    <class kind="class">qmcplusplus::VMCUpdateAll</class>
    <class kind="class">qmcplusplus::VMCUpdateAllWithDrift</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyP</class>
    <class kind="class">qmcplusplus::VMCUpdatePbyPWithDrift</class>
    <class kind="struct">qmcplusplus::WalkerControlBase</class>
    <class kind="class">qmcplusplus::WaveFunctionTester</class>
    <class kind="class">qmcplusplus::HamiltonianPool</class>
    <class kind="struct">qmcplusplus::LoneElectron</class>
    <class kind="class">qmcplusplus::InitMolecularSystem</class>
    <class kind="struct">qmcplusplus::BasisGroupType</class>
    <class kind="class">qmcplusplus::MO2Grid3D</class>
    <class kind="class">qmcplusplus::ParticleSetPool</class>
    <class kind="class">qmcplusplus::QMCAppBase</class>
    <class kind="struct">qmcplusplus::QMCDriverFactory</class>
    <class kind="class">qmcplusplus::QMCInterface</class>
    <class kind="class">qmcplusplus::QMCMain</class>
    <class kind="class">qmcplusplus::WaveFunctionPool</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; int, D &gt; &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::OrbitalTraits&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">qmcplusplus::HDFAttribIO&lt; std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</class>
    <member kind="typedef">
      <type>RandRandom</type>
      <name>RandomGenerator_t</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>51b76f7e3eedeadbb3b39f79e540323b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; int, 4 &gt;</type>
      <name>QuantumNumberType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>860a4dc608081201f3640f3ef53adbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase *</type>
      <name>SPOSetBasePtr</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d4680676138e960c2c7e3157082a33ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2e7f64d7a975a9fa5accf6d3892316b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::IndexType</type>
      <name>IndexType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8f4dea079a62b4bcaec1312901280b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::PosType</type>
      <name>PosType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f1afe90cd6fca48c20ad2b9f6aaaee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::IndexType</type>
      <name>IndexType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8f4dea079a62b4bcaec1312901280b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::PosType</type>
      <name>PosType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f1afe90cd6fca48c20ad2b9f6aaaee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::RealType</type>
      <name>RealType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2e7f64d7a975a9fa5accf6d3892316b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::ValueType</type>
      <name>ValueType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5e5620ee3bca4f45e33fa3cb508134a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCTraits::ComplexType</type>
      <name>ComplexType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>6dbf77d79fedbaa4fc2487a228e16b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, HamiltonianFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3aa759b860226e361d07cfd7b12fca7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef630142ddfe126d6eb24aac3b03728932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGN</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef5b93f763209b6cd8f66e596cfd68a405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMBRELLAWEIGHT</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef2c12f7c356d9765ebfc5fa2009e81409</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALENERGY</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef10331b2664739bf5ee5d915d99453a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALPOTENTIAL</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6efd67da3d4c873cbcae7d2ade8cfe6d329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMPROPERTIES</name>
      <anchor>dd5ac3df784cb00f510a848b3d50e6ef28edeaee2b0ee2461b72517771d35344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_n</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959d8068d2cb884b47873780e108f093673c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_l</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959db0596726fa3a4f406e3fd9b208cb0b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_m</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959d9861701506e2b9b037307616a5097534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_s</name>
      <anchor>e1709d74afbc49abaa4440d46e5d959d06bfb7c7a8582f244f4b3daa7d9bbfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>93b01868a342885183e05e610c3ee34d</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>aac7ceec29b0c234bbb9d5605ee39b84</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>fdaa209d594c96bf2d63f6fe881f3920</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3875e65485b08c90471e84b45c49029d</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>70ebe2255a44c8bd7e94e51f95ed7823</anchor>
      <arglist>(const T1 &amp;, const ParticleAttrib&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a0d136ed797ab06a35d1e854b6ab6efe</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e5debf9ae8db7883fe9b870336333efa</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c79fa51f0ff26813927a420f40a985eb</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a862f0ffae9c00c2deaf40fe9dd6de64</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>15d9622a91547c429f03870ecfb1d826</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f004957c420ac1b16386c0c7394c50bc</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4c4c9ae514898f51b055b7d082cdca0a</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9709757e0f971b2f91d0c671c883b948</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>980648a7ae4145ac6d5cd9128c0d9e7c</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>26dc2a28890f2572e84beaf512015279</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7c9abb2b696113a5147f30861490344e</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>57821a01d7c6d9a7873a7c6c583d3588</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>eb66277dc2980e856e492e091e0b12fb</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7e02159ac9c2265bf3edf4be777daf7f</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b14e083c50862d28434917fe1a2f1c2c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8305b317ecd62fee7721455e37040448</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2c8ed34c0765bd06455d0d74ce893d47</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e5658181678ea3f01b12893fc6e8f365</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>914b95b2e823cc7a4dc5fd70aec55a8b</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c05a272b5d5f7aacc9d50b332d05d8f1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>542533bd73afeb81871e9ca02ddec46c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5a59fd3f40d8d361ec158bb1c7dd20e3</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e91c3a2a2858b4befaf5b34c532787fa</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>af17ddd4e3ed68a945f3d18456f7a7fd</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d8a8af20e600725ebe48edfa729d9a95</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0804091b42e097ef8c07bfbb5b26a5a5</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a08202660f8c6a8e345470af063f2cfc</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ac46554986baa21eeec3756da873e4f1</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>763a51d841e58b83c66bf641ccd691db</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>803a7be987c3eed6875c04dcdd64a06c</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>88c6e9e76c90835aae190e32ffe44733</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c9f37aa7e606667a0dcd1288a5e651ea</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0c49c481b955b7d92bf33cfd3d9a745e</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d0566647f5323ae71a54a088fcb3de86</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7f9113e52e5b96d47369de4ba2a0dae6</anchor>
      <arglist>(const T1 &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ddc3feda2a5a2293b4fd1c18556749c2</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9df490265375b125b608baeeb4529bad</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c9600039fe5daba748a420084fc1c6ed</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dea1e4680ccc7943658af8da941cd762</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2e7784ff5399d0a9316d065d9fa558f2</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>70ae699eab88939f64f7fb91e7cdeb65</anchor>
      <arglist>(const T1 &amp;, const Expression&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>12c6a91f5a7671ff866910b64420f3d6</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4dad585a4db2338b52d7cb9ea461518a</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>02fdf5f46c25ad0a168eac9f3adea308</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>51134f7eba708e9aa2f8304ae2408eb6</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0782b0fb57edb500cd8734dc41ee806c</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9914771db9863a0bb3be07d1e21aab24</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>80ba2677e2bfa261d86323b3a3612b3e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7eb9ce77f5dc81d289c63aa0d3fe4ddd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c8c3e74da618540823b4c2c0ec017ac6</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7aca9620f548ae58096183e21334dafd</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>91d152b80655a21e554227b0b2f4929e</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9cd7594d0ab6d7494a1fdf94d34fe333</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a8159514f0a4bbaa404302d6351122e1</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dd0c97ecff3f5fb0e81a4fecbd162e2d</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;l, const T2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAdd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4c4ae53c91bb2b700567a0c9a231472e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpSubtract, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c9e4527452e4f31d51e314c8a30a04ca</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a8f9844af9cdeb6ed10ff8c56df6c1a9</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8ca8c5a1ec5c3d79ec4879bd747d7909</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ba0e1ea7f6ec0b60e32890e76c81033e</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3c489ce63d3e9aaea8cd44f795fe86af</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; T1 &gt;::Leaf_t, typename CreateLeaf&lt; Expression&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1838c8e6713718c9bcc1fbc6dc4a188d</anchor>
      <arglist>(const T1 &amp;l, const Expression&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Expression&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>946cd1897a16c84013dc71b3ef24b453</anchor>
      <arglist>(const Expression&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>45dcfe19aea98ff6d49953538775a42f</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>74d1cbe820fb23c5a601f3fd19363e53</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>53332662a5d67e9e2715a93361c778bb</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8d94dcf98d9822911f8853441b91763c</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3456845d0c0d64fa47c15ab64ebbef7d</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>da6b8f90408f397d7b9c33cdd492fc6e</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>84c2a3f0d9c572125a305d29476c0045</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9a08c41e559a4bda7790a899e50d66cc</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>714de010a8118c95a72b859ec0af7785</anchor>
      <arglist>(ParticleAttrib&lt; T &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ec00b3397ee25e01963358c29ffd0586</anchor>
      <arglist>(std::ostream &amp;out, const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PartitionGrid</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d7697c2472ea78da2003798f9b4442b3</anchor>
      <arglist>(PL &amp;lattice, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2a0215b2a293bbeed02c508611c72c7d</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCellOMP</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f2bf412a4a31b23bb98e58fbc2638cdc</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ce4d9b9ad5958c4058f746bda1707c3e</anchor>
      <arglist>(PT &amp;inout_, GIV &amp;uc_grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4dbe74cb87bd15b7586a37de97dbae72</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9cd016f030895e7d7ad0fc602ed6bdce</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>555ef7beb1b5a30a76ecb794a9a06a8a</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrapAroundBox</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8d55013e5634bda527a70b69d69a83c8</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>84beef2b52def70413de960c563f24f1</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &amp;pa, const ParticleAttrib&lt; TinyVector&lt; double, D &gt; &gt; &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Sum</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f90a7c1e5437d1b42f23c9e93002edac</anchor>
      <arglist>(const ParticleAttrib&lt; double &gt; &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>63088a51dc77b87b69ca36af1dd810d5</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignGaussRand</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>933763b3704893af5b8da5dca83ce73c</anchor>
      <arglist>(T *restrict a, unsigned n, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignUniformRand</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>fddfe8fc099267eb394aae9e9f9984f1</anchor>
      <arglist>(T *restrict a, unsigned n, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c68d008106afb96324008ccf2e9d34ea</anchor>
      <arglist>(Matrix&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d64301e083c4deac82872378c35a0508</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a0b0a9c482c0ff66c0c10bfb73d8b075</anchor>
      <arglist>(ParticleAttrib&lt; double &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>cfb7f31f454ee5b0277ca8670469cf0e</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3617ae57f0247ddc1e4e85ec15778d43</anchor>
      <arglist>(ParticleAttrib&lt; double &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSphereRandom</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ce5382fcf6f87fd5d476631b3e14c975</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandomWithEngine</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1c1ec6b22d72271f89b92d038c1332e6</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a, RG &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>914374782a662f74aedf9932fdd27fdb</anchor>
      <arglist>(ostream &amp;out, const Walker&lt; T, PA &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_iter</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>06067ed3e3a467edb7bdd5d000871184</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_first_address</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>498e16cb0805ac912f352d09dd9c74c1</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get_last_address</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>d6d1b08e67ea52d0ad408455a5d53c16</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e8848320562d09636332ade7a827464e</anchor>
      <arglist>(Vector&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a54063afde5dc06970a754132d74ce92</anchor>
      <arglist>(std::ostream &amp;out, const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8becc18ea64fde6d239d32d8265ecc21</anchor>
      <arglist>(std::istream &amp;is, Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>12d4d37dafa389c725c01d0bbc224c71</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt;</type>
      <name>transpose</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>6ce2d3d81e74beaa3b96589f8c1c13ad</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1f3e53498acd6eb599b24a445aeb8894</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;a, const Tensor&lt; T, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>traceAtB</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8a35343ab76427db616d040ca48538f1</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;a, const Tensor&lt; T, D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>47e5769af409e2fe0d516636707dc20b</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>cf5566eb1a9301687a3d752a9aee975c</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>a716f4321f73c8f080c7d2a29276a029</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7ae3649cef537dc469bb720da2ae613f</anchor>
      <arglist>(std::ostream &amp;out, const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3e811fb31a6eb6eaea32abc39a811cb0</anchor>
      <arglist>(std::istream &amp;is, Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4beca2de012935b3450ab6045dcad639</anchor>
      <arglist>(const int &amp;n, const int &amp;m, double *restrict a, const int &amp;n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>7c1690d51dd10c5fd8d8e6b3692f76b5</anchor>
      <arglist>(const int &amp;n, const int &amp;m, std::complex&lt; double &gt; *restrict a, const int &amp;n0, int *restrict piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>85150e27830f0df6c921b671befc0c35</anchor>
      <arglist>(const int &amp;n, double *restrict a, const int &amp;n0, int *restrict piv, double *restrict work, const int &amp;n1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c24b84e1e1390b06c3dea77fffd1c783</anchor>
      <arglist>(const int &amp;n, std::complex&lt; double &gt; *restrict a, const int &amp;n0, int *restrict piv, std::complex&lt; double &gt; *restrict work, const int &amp;n1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Invert</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8cb6360cd2e9529da26358a05bf9dcd5</anchor>
      <arglist>(T *restrict x, int n, int m, T *restrict work, int *restrict pivot)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Invert</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>6cef963e6be749b52e117fa4d95319e0</anchor>
      <arglist>(T *restrict x, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invert_matrix</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2d98dd9be7f606a2f2006734d0d2593d</anchor>
      <arglist>(MatrixA &amp;M, bool getdet=true)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatio</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b50df23f91a58e5ff39bc931da8943ef</anchor>
      <arglist>(const MatA &amp;Minv, Iter newrow, int rowchanged)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatioTranspose</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>4e7c4e19c00fa2d89885dc7801351f6a</anchor>
      <arglist>(const MatA &amp;Minv, Iter newcol, int colchanged)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>detRatio</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>561780ebdf9bf39e33258c6dd071c64b</anchor>
      <arglist>(T *restrict Minv, Iter2 newrow, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DetUpdate</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dc5e780be70c53c7fa5006a1c8b07a23</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newrow, VecT &amp;rvec, VecT &amp;rvecinv, int rowchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DetUpdateTranspose</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>912ce53290db4064beeb0edbb77c28a9</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newcol, VecT &amp;rvec, VecT &amp;rvecinv, int colchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>dd9fb3d7778a1e2a789c3fc594782fae</anchor>
      <arglist>(const T *a, const TinyVector&lt; T, D &gt; *b, int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>f8356667d87a810dff0194252bcbe2d0</anchor>
      <arglist>(const T *restrict a, const T *restrict b, int n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>64e15e2b3576cadd123220d101d4f5a8</anchor>
      <arglist>(std::ostream &amp;out, const OneDimGridBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>bae1d80779ba4aa26ee91c828d22de51</anchor>
      <arglist>(std::ostream &amp;out, const ComboSTO&lt; T, POS &gt; &amp;asto)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1096df5de6472d72205270e27bd47750</anchor>
      <arglist>(Matrix&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>real</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e397e99e10925d0eef2e8e8d116a8a2c</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>real</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e21ea86db32d356ef104467d817f353e</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>real</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9f605e1368eae5a29e54c218289b8303</anchor>
      <arglist>(const TinyVector&lt; std::complex&lt; double &gt;, 3 &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateLogAndPhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5b94f6483ade760dde6a87d09f7a77fb</anchor>
      <arglist>(const T psi, T &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluateLogAndPhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>1788a09e2c6f28abd8bba98b7c636d16</anchor>
      <arglist>(const std::complex&lt; T &gt; &amp;psi, T &amp;phase)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>df40cfc93ddf6162a0815b4c79720495</anchor>
      <arglist>(const double psi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluatePhase</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3180479fb8388a2d94e96f22ebf44587</anchor>
      <arglist>(const std::complex&lt; double &gt; &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen3DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>e796eaaaa1b98c38377e9ea139b4e2c3</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen1DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>53bb61a2fd25c69208e96d6cef2521ca</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDegenLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>5fa2da1679684e25fad004eb56d4f477</anchor>
      <arglist>(RealType cut, ParticleSet &amp;ptclSet, Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Degeneracies, Vector&lt; IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genFreeParticleDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ecffd7bf6ad35ed976ca1c13cf6f53f6</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDebugDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>764282058d0f396c7eedb5570392300d</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSimpleModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>72cc166d89f54058cac1a97d1a1b8233</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp, RealType GapSize, RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPennModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2234922cce1f2f6a620c2a894718fcf4</anchor>
      <arglist>(const Vector&lt; PosType &gt; &amp;LocLattice, Vector&lt; RealType &gt; &amp;Disp, RealType GapSize, RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen3DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>0fd96d041ac5d7f76fa562d4e40b8095</anchor>
      <arglist>(QMCTraits::RealType cut, ParticleSet &amp;ptclSet, Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Degeneracies, Vector&lt; QMCTraits::IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gen1DLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b7e9fb4275b1a461b617e4326d636919</anchor>
      <arglist>(QMCTraits::RealType cut, ParticleSet &amp;ptclSet, Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Degeneracies, Vector&lt; QMCTraits::IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDegenLattice</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3e4d66bd35e366b1328f173c617c8eab</anchor>
      <arglist>(QMCTraits::RealType cut, ParticleSet &amp;ptclSet, Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Degeneracies, Vector&lt; QMCTraits::IndexType &gt; &amp;DimSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genFreeParticleDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>3f30bd4c32ff59824c65e80b225cb63e</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genDebugDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>16e06329b4f8787c20b393e60520db65</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genSimpleModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>064706e41ad1e437d7445ebee7ddfc1f</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp, QMCTraits::RealType GapSize, QMCTraits::RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>genPennModelDispersion</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>9f1b80ed1d9ed03bf31a3759230a969c</anchor>
      <arglist>(const Vector&lt; QMCTraits::PosType &gt; &amp;LocLattice, Vector&lt; QMCTraits::RealType &gt; &amp;Disp, QMCTraits::RealType GapSize, QMCTraits::RealType FermiMomentum)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LegendrePll</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>203c4dfc8e344a719c6cda1e89c81480</anchor>
      <arglist>(int l, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>LegendrePlm</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>2322f2bb52ffb12dacbbc3f2de216c61</anchor>
      <arglist>(int l, int m, double x)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>Ylm</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>52ab36f47db4b10c7752f544017283b6</anchor>
      <arglist>(int l, int m, TinyVector&lt; double, 3 &gt; r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>determineNumOfElectrons</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>ae8cd7b74758d1270a228f51fe91ecb5</anchor>
      <arglist>(ParticleSet &amp;el, xmlXPathContextPtr acontext)</arglist>
    </member>
    <member kind="function">
      <type>WalkerControlBase *</type>
      <name>CreateWalkerController</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>428bcd23d095416ec6db3b3df1ba451f</anchor>
      <arglist>(bool reconfig, int &amp;swapmode, int nideal, int nmax, int nmin, WalkerControlBase *wc, Communicate *comm)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>decc9a9177f6b137c455125dc2ef4918</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDriftScale</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>27c33d4804ae08b5f2e81ac51bd68387</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>bac3ce97dec5206749b4c1bac3e6b3ee</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>b504cf60c58666a5486a71dd4a73b2b6</anchor>
      <arglist>(T tau, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8ef0c032cc0bbf4eb479ba77a52f623b</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaledDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>c6073d16389f3bf9f71943873d069123</anchor>
      <arglist>(T tau, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;qf, ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;drift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>980f4585f10544146f5dca9cf237391d</anchor>
      <arglist>(T s, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;ga, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignDrift</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>36447f0cbcb0b9b9192540c9737543cb</anchor>
      <arglist>(T s, const ParticleAttrib&lt; TinyVector&lt; complex&lt; T &gt;, D &gt; &gt; &amp;ga, ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Write2XYZ</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>8abf140dbe4cdb87e818240db7828b46</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t</type>
      <name>Random</name>
      <anchorfile>namespaceqmcplusplus.html</anchorfile>
      <anchor>14c33e7b3737488688dc4193fa59fccd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</name>
    <filename>structqmcplusplus_1_1CreateLeaf_3_01ParticleAttrib_3_01T_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>Reference&lt; ParticleAttrib&lt; T &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>structqmcplusplus_1_1CreateLeaf_3_01ParticleAttrib_3_01T_01_4_01_4.html</anchorfile>
      <anchor>3c12b5c03a8df4b39009491f8651e21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>structqmcplusplus_1_1CreateLeaf_3_01ParticleAttrib_3_01T_01_4_01_4.html</anchorfile>
      <anchor>601bb5c1d4f94d48dc922101128ecc06</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SizeLeafPA</name>
    <filename>classqmcplusplus_1_1SizeLeafPA.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeLeafPA</name>
      <anchorfile>classqmcplusplus_1_1SizeLeafPA.html</anchorfile>
      <anchor>3d164ee390374e9f43f55d95b55e5c2c</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeafPA</name>
      <anchorfile>classqmcplusplus_1_1SizeLeafPA.html</anchorfile>
      <anchor>957bf4241227d782e679c3cbe1b6875b</anchor>
      <arglist>(const SizeLeafPA &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1SizeLeafPA.html</anchorfile>
      <anchor>bb4e691ef525ea2b7cc3221401f5e765</anchor>
      <arglist>(int s) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_m</name>
      <anchorfile>classqmcplusplus_1_1SizeLeafPA.html</anchorfile>
      <anchor>57adad2fe2d492f043e7b2555999cc2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</name>
    <filename>structqmcplusplus_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeafPA_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>af7df27622933e827c71efef746adb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>5814dc6966ef02d66f54ba267a5cac63</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeafPA &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</name>
    <filename>structqmcplusplus_1_1LeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01SizeLeafPA_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>d37b38911b3c1b979f3b9f7ca282a317</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>af8e188716cb993615983e729ac5ea3f</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;v, const SizeLeafPA &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</name>
    <filename>structqmcplusplus_1_1LeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01EvalLeaf1_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>4119bafa5eace628ddd6b6ea76e3be9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>7579612551f6cb4ffde52037fd03ff5f</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;vec, const EvalLeaf1 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleAttrib</name>
    <filename>classqmcplusplus_1_1ParticleAttrib.html</filename>
    <templarg>T</templarg>
    <base>OhmmsObject</base>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>26e3c277a71b487ba5d57932872ee477</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; T &gt;</type>
      <name>Container_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>187aa653e7d3720abe5b7d0d2a6b317c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>addffe3547fcbb4b0d96c85ccfa8f72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>a5da1c44db09e279362c9cf40d72585a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; T &gt;</type>
      <name>This_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>92715c942ca58f3ecfc67d598488f25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>b1f5b8798f7485c4c87adce04583af42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>g58517a32d569b41e164c9fe9a8388303</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>g3b7bb5a84821e65a17c2abaf41e4160e</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ged6f676bba6494b7c5541837158fe901</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>g37bba2d680d89b6677a08b0edc70a2a0</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParticleAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>9f71f070cfbf7ad159aa70be52db97b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>2f02f99cefde2d7cd2a882546b4c93ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>54e42771c0861395687413da23fa29d4</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>456291a65caa45e41e1961e7388c3a22</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>f25e2ac45a2f93f8365a33bf67474ca5</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>405dacb7a6b52bff1ab8f2635f7fbbc6</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>a0bb184351d65afeeae9c094ad4597db</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>61bd387fda7347115bef229ba2f37a05</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>06e5a955224235ba0c1b4c1c8c8487cc</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>6652f5fece1840fcd6d92f688c99c6f2</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>f24d5b66eefc37c00bffc9a88701d129</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>085203f09c532bf0aa36562ca897c826</anchor>
      <arglist>(std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>715fbe306908a040cb7b8d055f90444f</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>300bfd4c660a46799406c451d1b2ac5c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>2ef5eaa14a8838a4f92f5a1815ba10bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin_node</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>85e96484e39cb859f7cdff852b30fd4a</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_node</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>1cb662eeafd21da0ee36fe3e9dd7562a</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGhosts</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>221e7385396e8db586dbcdfef83299de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>ae4ed116984dfb7535add245f8129988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGhosts</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>5f14ad91d5a9eacbde1100c47d4e945e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGhosts</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>853081f06b09d3f927db0460544fd1d1</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>010a691cd786909eedb9af65c12c5c9a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUnit</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>8fb3ee3a68bcf000546f0a98f0f44a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>a9b4a9e6f38b1fa235ada7c266731567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>c4f1312e5864963d77e8e79cbcb3196d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>955d8436ac268ea940b6a57f0eb9c2fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>8bc7b2e2ca42e52e24b172fdc0609c44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>first_address</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>b7ea17f71b8de8cdc10774fd878f5b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>first_address</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>a807eb54e3ce42e74fa9c2fa27f1e86e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>last_address</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>1187c7e7e1843c413e2c6bb020bcf50a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>last_address</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>8b6ad0ea4a05499a6e73348f75286381</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>InUnit</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>4fccba23a2c81f04748027b2fec4bbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nLocal</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>e93f0b30a58a871f34e4a580052abd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nGhosts</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>b4ec6dcaaecbbe0ce679c4ca06b1d621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classqmcplusplus_1_1ParticleAttrib.html</anchorfile>
      <anchor>5edaacd4a0d741c81dbe0d0819d2f263</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleBase</name>
    <filename>classqmcplusplus_1_1ParticleBase.html</filename>
    <templarg>PT</templarg>
    <base>ParticleTags</base>
    <member kind="typedef">
      <type>PT::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>dea1dd1d844bdffb3aafb0d922f1a7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Index_t</type>
      <name>Index_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>52c0c90b7f474e293d7fc2ba15697b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>867ec96b4c63086b40db4676cb82ae2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>ddd729bf4d94a7cc98bf44ec14d52bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>bf7dcf878c7f91a26964b94146d2504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>f32a19057e14dc1a4db5e4f8ce96cee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, OhmmsObject * &gt;::iterator</type>
      <name>PAListIterator</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>b6651987d5da15d90afdea969460b043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleIndex_t</type>
      <name>ParticleIndex_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>3c39783d8430a6c43b705caa9d160c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>e98185602c96d8489ce76377b02fa1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>2fc39d10ecd7e02afa3432afa289ecfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleTensor_t</type>
      <name>ParticleTensor_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>4949a91ab9d11b17b362f6f36627514b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>1ac0f54603c8ffff9dff376a6fb2f475</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>9ff1b41c3c43c27c7bd741d8b043b91e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>c3929c22e17ab202e5d0abaa3d53db75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>2d72d47dd8be8d45dc9a2e338f8e8bf8</anchor>
      <arglist>(const ParticleBase&lt; PT &gt; &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleBase</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>c1e3eb0a5ae9e773a2564da5f3162e74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAttribType</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>b7ca2445a1b9f533ace5aec81c6abb21</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>39ec8b167e5d5778eff6cbe3c98431c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>first_attrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>7f8431e6c4dc6ea809e5487a7c80124a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>last_attrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>16027edf445881d9ed98109ba9f3c745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>1e8b7eecb18f6fb664003a4bd8bd7798</anchor>
      <arglist>(const std::string &amp;attrib_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>e0fe50e963d1ca17c9a4a934a18034b1</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>5c3f682883a87b906c8faef6ae11b2b9</anchor>
      <arglist>(ParticleIndex_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>a3817319b5da33f9fd7023485457042c</anchor>
      <arglist>(ParticleScalar_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>4dbda72edfb83603210409086fb4e943</anchor>
      <arglist>(ParticlePos_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>f225db914eceed8418b853db15712b98</anchor>
      <arglist>(ParticleTensor_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>392efe324cb6659639027477f963adc7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>eff7aa74b990efd90698796754f088b6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>062cb5cc6ed45924b4153b3fc89eab36</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>c2b421c19b2cd7908fff4ca9005aa335</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>5d938755967b183d46611068a16b1cc0</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>3c0004e6936445ed4780f1690d36db5a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>7cc2b814e20ad2401ecd8208d3cc11ad</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>fa97167d62f0ead99a8b4ed89e080d92</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>c81c354993ce69dab21b72e297dcbf55</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>341715cc7fd48b455194511dd80616b2</anchor>
      <arglist>(const vector&lt; int &gt; &amp;agroup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>361acce83ed57a71325e19f4ae750b62</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>154fba95ecc7186c5fdc94f15528cd79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>fb125381419b0959c98719b662a2ced9</anchor>
      <arglist>(const ParticleBase&lt; PT &gt; &amp;ptclin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNum</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>536a2dc6be86b0ee7c2d705b745d625b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>182f70608cd2e58fc5f8abf8e4aa85ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groups</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>b99bd8f93fadd37a86444cb8ea823efe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>8defe436ef99b87ba77f428838f7d995</anchor>
      <arglist>(int igroup) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>77bbcfb6e34377c70713130f3a70a9e2</anchor>
      <arglist>(int igroup) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>b53d9255b0d40dbf822f7409cb93aa93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>da9628bd60d052635b5ecf2857f87a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCounter</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>de0436e9ddb1e9adb979e6eddcd797a5</anchor>
      <arglist>(int i=0)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>c724b4300bcf55ecdf9f44143ee23aa1</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>a100eb92e991ceca8e8700053cedb3b1</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>907eeec1377c161b69376da84c261814</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>d4e95363db43cab19c196676b21bad1e</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>daf64cec714e3309e969c821da464e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>ID</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>3fa160e32125abf74c32143b6919e2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>GroupID</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>dddd1850a88a6a6b2d7d203315b26880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>R</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>a510bcf7050045627ffa2d472e29d28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>curR</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>e3b45c1f1fe4de6afe5972c57eb5d545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initBase</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>88b61db03934e9a1fecb45edcf76f25f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>626d87ea5d615dc84f65a1e1bfb593bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LocalNum</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>51155a9201db5575d156792669038831</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>GlobalNum</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>4f2c2b0d4e1c31bb2dcc109d83e61f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleIndex_t</type>
      <name>SubPtcl</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>0dfd35da87170a16cdd3ae58bc02ea6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>AttribTypeMap</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>e373c6a0943a081e72c2680db768b4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>Name2Index</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>75bc6e698ddc091f2f2e253b596a147e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, OhmmsObject * &gt;</type>
      <name>AttribList</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>082e05dabcb006fbf023b08922f8534d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleIndex_t * &gt;</type>
      <name>INDEX</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>8eb56ad5f2f4cfff9c554e3044e170d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleScalar_t * &gt;</type>
      <name>VAL</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>94994c9c83bceee75088a57adabf29d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>POS</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>9b11c85c275afd8bf9a615ee5368ba07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleTensor_t * &gt;</type>
      <name>TENZOR</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>95c6475482f19ec09d6f04467aaca450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; OhmmsObject * &gt;</type>
      <name>myAttribList</name>
      <anchorfile>classqmcplusplus_1_1ParticleBase.html</anchorfile>
      <anchor>81bfa66d62868a29c663b3a36fbe16c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AsymmetricDTD</name>
    <filename>structqmcplusplus_1_1AsymmetricDTD.html</filename>
    <templarg>BC</templarg>
    <base>qmcplusplus::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>AsymmetricDTD</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>9583917dc12b91b240b3e788e9562dc4</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>196acb6b6b94376055f90ef4aed02e34</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>9c9c7085ce973164e9f9789758f44a6c</anchor>
      <arglist>(int n1, int n2, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>b32ea1ea0bc6b12e8f6c7f5f88141743</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>c5fbaafb211ae87ca67da9b1bfca6481</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveOnSphere</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>cb3c7fad0c085679c3085bf52ab8b0fc</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>1e78195df2aef52426c83669327d7353</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>Target</name>
      <anchorfile>structqmcplusplus_1_1AsymmetricDTD.html</anchorfile>
      <anchor>37ec77451abb27784987be69b9164aa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DistanceTable</name>
    <filename>classqmcplusplus_1_1DistanceTable.html</filename>
    <member kind="enumvalue">
      <name>SUPERCELL_OPEN</name>
      <anchor>ac8ca7b47267f8dd6e1a107cea5c2074ba06fd1d1c0a15cdd7f2929d7a2e8efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPERCELL_WIRE</name>
      <anchor>ac8ca7b47267f8dd6e1a107cea5c20745508747be13048ff316596906c6067bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPERCELL_SLAB</name>
      <anchor>ac8ca7b47267f8dd6e1a107cea5c2074d277b5f4c5312ef616d21c4e3e560c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUPERCELL_BULK</name>
      <anchor>ac8ca7b47267f8dd6e1a107cea5c207448bc0a933113888d30610479c956bc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>ab915473cb39492ddb50d2c91642dd4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::Scalar_t</type>
      <name>RealType</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>33203ad1246686d65f3772b24fe191ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::SingleParticlePos_t</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>95cd9264eae29a456cfef4fb18a79511</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceTableData *</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>40700e944f1f94640f9ea9ede64aad20</anchor>
      <arglist>(ParticleSet &amp;s, const char *aname=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceTableData *</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>59b30b97eadec793b1c90bebcb8026bd</anchor>
      <arglist>(const ParticleSet &amp;s, ParticleSet &amp;t, const char *aname=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ParticleLayout_t *</type>
      <name>getSimulationCell</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>f0d6550147d0ef9d1d2bd3ee625137cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createSimulationCell</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>8cf270e2942b88f9b061a38b25f14dab</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>3f01e8240c194a3aae8b321fd26c22ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>61e4c2490ac41c70486ac8d455d4aebb</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeTable</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>8628641f25dc39cbcae073d69cf51327</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DistanceTable</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>c0e473200c98c3b3d7443b82d7ae1fbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static map&lt; string, DistanceTableData * &gt;</type>
      <name>TableMap</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>823fbd3a01c75dcf246b34b51bb2f218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static ParticleLayout_t *</type>
      <name>SimulationCell</name>
      <anchorfile>classqmcplusplus_1_1DistanceTable.html</anchorfile>
      <anchor>eacfc2b48064ce479599eaa086637575</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PairDataType</name>
    <filename>structqmcplusplus_1_1PairDataType.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function">
      <type></type>
      <name>PairDataType</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>43837513d7f0efe976f9d4bebca727e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairDataType</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>000da478e88dd0984c6b16ad0151a2f0</anchor>
      <arglist>(const PairDataType&lt; T, D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>PairDataType&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>ff995489afc4eb93862f846b040eedcc</anchor>
      <arglist>(const PairDataType&lt; T, D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>7da21f512078b13ff4269d0de93922be</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;displ, T sep2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>bbb97e9696285f614fa4b178523617fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>0f655980dd73f0dc7de25b3678d38f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rr</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>674a2bb00da7bd8a00e2d636011e61a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>59be8edb645399fd51540e6bd7a0adef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>dr</name>
      <anchorfile>structqmcplusplus_1_1PairDataType.html</anchorfile>
      <anchor>65e0f32310d370c669c9bc1d84a84320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TempDisplacement</name>
    <filename>structqmcplusplus_1_1TempDisplacement.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>TempDisplacement</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>c84296f75d57e8e7d558e745da1d4804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>c3cdeda20c7905e5c58a3b5eb765a318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r1</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>27150defd1c6058bb8b59e2b2410f794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv1</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>5de9f9ae815264568d6a61fb1f5a483c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r0</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>7331cd19b7cb8a6032776d60484885eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv0</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>cf2e13faaf46c38190a7bcb6d6f174b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, N &gt;</type>
      <name>dr0</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>1e16abad3238213c8f3604b8fd0c5d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, N &gt;</type>
      <name>dr1</name>
      <anchorfile>structqmcplusplus_1_1TempDisplacement.html</anchorfile>
      <anchor>a9a76146b41cfca65a9e77d913e33e04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DistanceTableData</name>
    <filename>classqmcplusplus_1_1DistanceTableData.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>WalkerIndex</name>
      <anchor>caa76a57a42a6dbe138bc206b39cbd79d06e6aad77d9f43f1dcc1b6aec3d575c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SourceIndex</name>
      <anchor>caa76a57a42a6dbe138bc206b39cbd7980182ff40097cbcf5f6a1018d81fd4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VisitorIndex</name>
      <anchor>caa76a57a42a6dbe138bc206b39cbd79fee2eb0fc6de8e69399772f17dae10a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PairIndex</name>
      <anchor>caa76a57a42a6dbe138bc206b39cbd797aa94746799734232edb91983cd019ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>IndexVectorType</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>267c29c223c0255a9ba7b9374245ee17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TempDisplacement&lt; RealType, 3 &gt;</type>
      <name>TempDistType</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>30f51e7e311abc3beb2349666ac699ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>860f2dab92ce2ab5453b23acc317fd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceTableData</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>9b5831805805ec5d63953b62afd64fd4</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceTableData</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>ff1a7621c74111d6d74b5df752c9f02e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>5a525adaf445bc534b90a2984adbcd18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>7af43be35104f1216717f9fd7fb68af0</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleSet &amp;</type>
      <name>origin</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>9ec2245653bea9b84a9ebf42c1f698ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>centers</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>bb4437119bdc21e867401aa3a3ce785b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>4b83d05ef8928abfe5002a0e8a080bd3</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getTotNadj</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>f6aca7e52b837f7272e3d48a8dd2a85d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>nadj</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>2f062a5432789138643bed0d1063a4ab</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>iadj</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>e6dad406dea8c23205c39d0ebe0f40ff</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>loc</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>2b26cde3f000c21fdbee5b42d27e1f54</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>a0659789b92568a55df4482541560a4f</anchor>
      <arglist>(const ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>b445f38a8a67893001b38970aa71990a</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveOnSphere</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>f86f48db413c87f4be2f3af97ebf515b</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>cae3d8083146b6f5d8a4f49fc254caf4</anchor>
      <arglist>(IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>681521d3dc047cc6d6bbbf023038f036</anchor>
      <arglist>(int walkers)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>9c76209535cef7c53e3813fea9a1a332</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>0f275665021c48c10f581e42ae37c5f1</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>197c6a14a9bcafda7baa6d6812892968</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>e6f43e990fd8f7f5dc8cfbebec72d2cb</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>688e0c9fccffb1d8141ac324ce1da2b3</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>dr</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>b5f03ecb553b1893c363fed530642def</anchor>
      <arglist>(int iw, int iat) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>r</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>9e6e0d19b543707a7be11a53a6213115</anchor>
      <arglist>(int iw, int iat) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>rinv</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>d95268ed934b8169782ad27a757253ed</anchor>
      <arglist>(int iw, int iat) const</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>dr</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>e7325a3c0fc6c5a365666449967360cd</anchor>
      <arglist>(int j) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>r</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>79a34a3597cf2dd5bcf2aa2460d20762</anchor>
      <arglist>(int j) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>rinv</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>ec241fd0642f5252a723ad261d898434</anchor>
      <arglist>(int j) const</arglist>
    </member>
    <member kind="variable">
      <type>std::bitset&lt; 4 &gt;</type>
      <name>Status</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>e8a90c1aa7b05a7ee26d8638090f85df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>activePtcl</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>e2a25eb7393c8e584d7e2462b6aa1575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; IndexType, 3 &gt;</type>
      <name>N</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>fa48cc0dc1edecae34866a826a9b68b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Name</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>7f25d6ee06ac937ed69e313421b88d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>M</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>4fd4fe7a36452cecfdff83fabd027f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>J</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>218307d60236c55cb9dde1d68c21e4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>PairID</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>9672e6068d08fcac51611dda8ab0bf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>IJ</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>5356ee3a4fc48e26651ef8f7571873ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TempDistType &gt;</type>
      <name>Temp</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>3a1f73dbae948688e4c3a9b181419333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>319381b8cfc30b625a4c2513769880ef</anchor>
      <arglist>(int npairs, int nw=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ParticleSet &amp;</type>
      <name>Origin</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>98104803e07dd29e445c02acdb4b4dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>npairs_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>c4782fa7661eeaa473d6c846d2ad961b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dr2_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>34f5beaaeb76b788fc640849f99c0b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>r2_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>7525b1cb5636b69126219dc2aa35d523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>rinv2_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>213dc3b72d6c5af5f8f52d9750e8aac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealType &gt;</type>
      <name>r_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>383ce42e0e45537d07c55eba3507bab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealType &gt;</type>
      <name>rinv_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>2eac204a7eff800184022a8cdb88ea2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; PosType &gt;</type>
      <name>dr_m</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>fbcbcaa427e721e7548d03dba4b0c35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DistanceTableData</name>
      <anchorfile>classqmcplusplus_1_1DistanceTableData.html</anchorfile>
      <anchor>b37ac3f0907e969fee70381031f0f361</anchor>
      <arglist>(const DistanceTableData &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit</name>
    <filename>structqmcplusplus_1_1ConvertPosUnit.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</name>
    <filename>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</anchorfile>
      <anchor>fc19fbc87c9c466702073b24cdba0b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</anchorfile>
      <anchor>8ed6cd6e146f0e683c69689d2bdd5d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</anchorfile>
      <anchor>c1b3c1ae43eb23efe0bec5aecfcb4d57</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</anchorfile>
      <anchor>022360e40b841d017d62fb4e4e256f52</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</anchorfile>
      <anchor>728860b64bc2d7990fa8ef6647dc2b5b</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_c7e320b1dfd7f0e0fd228f6c229c36b9.html</anchorfile>
      <anchor>b8e277e21ef086901c5ab998362b65d6</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</name>
    <filename>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</anchorfile>
      <anchor>ef9698dd1d3b3839480e1ab3d15e32ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</anchorfile>
      <anchor>4d610d3440f7e32d1d87e9878af3a6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</anchorfile>
      <anchor>7ec30c0fdbbb151e7e75e0eae9b5e96f</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</anchorfile>
      <anchor>726caa3013c4306445cf8fedb960d2ed</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</anchorfile>
      <anchor>2b9de3fded744be604061502aba2dafe</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_334f60f3aefab9a8ae7b8cb45fc7b691.html</anchorfile>
      <anchor>4401c6d1b38fbd9c931ab6e71d2ccaa0</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds</name>
    <filename>structqmcplusplus_1_1ApplyBConds.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</name>
    <filename>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>3039af3647869a0c39f1b3ab18c0a3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>530e90769d6b85dc056d674a172b2bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>9411139248c892878b0d443f6f6bb756</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>9e24a08d517cabfb1b31013701342bde</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>4536fef13de66d2dbc1af2404c32d58d</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>cf1c30a787dddda1764278fac05849ba</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>14eadddc41680f3a05c7f6320692be07</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>e2fb4e2d7a3342ced0abdff72adf7a9d</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>149c6ed14b9ace1d167f34642718eed5</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>a0f8ef361113659baf803e19cf6f810a</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>a9faca7c8d918455826e9eb96345daaf</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>d3bd9ce721035da9a8e59d07fd6e9e85</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T4eb90774579dfb2c5dd10df9dfc69899.html</anchorfile>
      <anchor>a248f1ad7390749d29114d994c02de6d</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</name>
    <filename>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>721dbf0d438fe802623e12ad4513aab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>72aaa59ef2c5f1818a12a53b35827b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>d6226aa68bb3bbf51cc81cfcc279ba6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>b0ca0103272b2424cc427161c4f64d62</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>402e38e809ebb705c8ef5b70baa49074</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>e0c8fdd1cd93ee01b4d5813cd6c1cd66</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>0453fed6e103c7b8cc1e5a085b123f04</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>2735703c6baa75b88c8c927580a8033e</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>c0541cbcd98e2635d847f7ba1a801f0e</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>3a7457c0537083d6cedc095b09379662</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>b17424c1f515b07f0392542112177eb4</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>301e2b4a9ffc8b68f7577006af8b2ea5</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>structqmcplusplus_1_1ApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01T41cb400871ac899e1ac19234e01d6dc3.html</anchorfile>
      <anchor>397a48b73c1ac864b7aeb85a65271e40</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>fab9f5f655d1112a8ab2a533a68fa8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>53c3884fb368c54d8a9aacf376bae5df</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>794b29f007c0ef827e810f17af8e850c</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>95f86b47a1f5c93c62f2582b14764a41</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>5f6b1f38197be90af75d64bf9b132be6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>8b9ddb9db2374aeb1cb3dc02e623d223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>22fff6d30ac7ba95f38dcb63bfe984ed</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>1f8a2d3a5774ab8af997056ab08f7680</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>7c357001db823be80b35eee5e3d36117</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>37d7b0355ea46fa8e09bc1539db7a820</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>8bde4d6cdc703b9bc57b15d5af2e26f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; SingleParticlePos_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>78e97227982c96970f86a41c196e4454</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>4dc406d50d7516417263def3ac730618</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>89180a982eedfc9354c1a9ef5eee9a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>8780849ada1e3df0f87957b1c7495aba</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>11db116fdc2d4fb791b1cef83b684ea9</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>24ffb9acabd97ca6937c5855153f83cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInput0</name>
    <filename>classqmcplusplus_1_1HDFWalkerInput0.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInput0</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>dc5cc2c55efbe25ab851cba5b5188a51</anchor>
      <arglist>(const string &amp;fname, int ipart=0, int nparts=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInput0</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>b77f05ae373205d0fff64291a560d864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>0effb949ea050b41289438264eb6078d</anchor>
      <arglist>(MCWalkerConfiguration &amp;, int ic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>20522684a0a284c027fc175a0f8b444c</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, int blocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>1df45d60d484e429bde8163a02d27f6c</anchor>
      <arglist>(CT &amp;anything)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRandomState</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>d2f113df6a1dc66b899bca2d1442ca9f</anchor>
      <arglist>(bool restart)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstSet</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>7a63e6234d03647ea4dcc45e7123d293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LastSet</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>00eb1bbb2ae2d32b91a47a8275f16f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>ecdf8abce51dedc6c7265bc5d41329cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSets</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>8b276de670a7ed4e87ef5da43bc3bd77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_file</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>f00254e8a147faebdcd15a7f75868162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_config</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInput0.html</anchorfile>
      <anchor>8e6ed0f2cf9c2c6aa2fe32ce47d1db99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInputCollect</name>
    <filename>classqmcplusplus_1_1HDFWalkerInputCollect.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInputCollect</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>d05c1a7d6f83c0afdb24890c0f5785be</anchor>
      <arglist>(const std::string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInputCollect</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>ef07826c9944be431f04f7fda6151100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>2e959ad60713df191ef86f72d24e3009</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>f50478646c408d03b25ae8986b64fc12</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int rollback=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putSingle</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>addee8c732f5d11ac69ca781ff0b53c3</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rewind</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>1c01ca9700ae85d158adacfa9cf00782</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int rollback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>f03d2e2364274ae5bcd573e8b1abd09d</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, int firstConf, int lastConf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readRandomState</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>c1050110a1c78bc0068df5b02adb5662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>d2b9d144b686c1bc36d69f796b11c293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>distribute</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>7125efdf5aca70b0eacef1843df18e42</anchor>
      <arglist>(hsize_t nw)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>fileID</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>9089813305cd2b13900eaefa36c6c3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>prevNContexts</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>3fa03ba830eaf4402adb88a8647f0f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curNContexts</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>b2e452327f6fa612e0c79575ffec415c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>CollectMode</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>1f3a44f7476c6282056d8db5973035bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>RewindMode</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>155a8ad0bb1c974f86ca66874c30a382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; hsize_t &gt;</type>
      <name>OffSet</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputCollect.html</anchorfile>
      <anchor>8847cdbba3b7046ae8173e14980f4dcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerInputManager</name>
    <filename>classqmcplusplus_1_1HDFWalkerInputManager.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInputManager</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>eb311edf725c88c1c37356f663ea5982</anchor>
      <arglist>(MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInputManager</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>b07a5d735618e6f2e43b7925cc4f1142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>a2e74cc0e017e32d6447c3db80cb9a35</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>abdd530bed70f18b992545fde31c32a7</anchor>
      <arglist>(std::vector&lt; xmlNodePtr &gt; mset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLastFile</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>d5380acdfe151933334f37c913b68706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>a0c31543fc228a15fc2bfb6bde69e4d7</anchor>
      <arglist>(const std::string &amp;h5root, int blocks)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration &amp;</type>
      <name>Wref</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>c3ad67009e8b19b207f319258e728e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>CurrentFileRoot</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerInputManager.html</anchorfile>
      <anchor>b41d4bec5c9bb41208cf13d359283ec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerOutput</name>
    <filename>classqmcplusplus_1_1HDFWalkerOutput.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerOutput</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>595b8c57633b7edfdcbc7e5388fc05f3</anchor>
      <arglist>(const string &amp;fname, bool append=false, int count=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerOutput</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>6979dd0c103abc1be960269e892142c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>919dbef2fd5bdcab9ff21904ff05c258</anchor>
      <arglist>(MCWalkerConfiguration &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>06154f9903e6e822033e0bac2dc41ce8</anchor>
      <arglist>(CT &amp;anything)</arglist>
    </member>
    <member kind="function">
      <type>hid_t</type>
      <name>getFileID</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>14ca3f203552d359ab1feef1c37e1f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hid_t</type>
      <name>getConfigID</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>0d77e309d7e4dd48a7a2c3da06bfe08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>AppendMode</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>cb998cfbd20e4803191087c34b6ef02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>a622ec1d22e65c1d5d8d2abf7f8e4b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_file</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>681b59a3fa5cbe334c2966f45d3b6d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_config</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>a4c3136ae232c4e4601281d25fa8cc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_random</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>1e3561652c50c980b6e887a9d2fe9ff8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MCWalkerConfiguration</name>
    <filename>classqmcplusplus_1_1MCWalkerConfiguration.html</filename>
    <base>qmcplusplus::ParticleSet</base>
    <member kind="enumvalue">
      <name>Update_All</name>
      <anchor>01e0122908656c38b582790660ab9574ecebd10f0e810fa4b35441163f18f39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Update_Walker</name>
      <anchor>01e0122908656c38b582790660ab95748641ab05a4e8baaad394316a0b3a30bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Update_Particle</name>
      <anchor>01e0122908656c38b582790660ab9574cad96bb7049927d3bcc27eab9df80177</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::PropertyContainer_t</type>
      <name>PropertyContainer_t</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>ef708d13054c62d44f5136695d6961a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>WalkerList_t</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a83640dd84b7c212beca2dd32edae101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WalkerList_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>806d2ceeaa4d00b2c832f5e100cda6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WalkerList_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>e36999be18f45382dc17c5aacde234a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCWalkerConfiguration</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>303d3218d149839e3acd5c3fb37b1bd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCWalkerConfiguration</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>351c5f79f7bc8942af3a88578f0f7ac7</anchor>
      <arglist>(const MCWalkerConfiguration &amp;mcw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MCWalkerConfiguration</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>4b7f5dc62c3a1c2c5a25599474dd8307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createWalkers</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>face7bcb4c5b950a16e0d782ba036510</anchor>
      <arglist>(int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>destroyWalkers</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>7aa926febba410a9969ce15ed13ef856</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyWalkers</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>35ad5cfc38ab19347df767ef4d6a3588</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyWalkerRefs</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>7eb9d2b9a7be450ac8ae3e22415377e8</anchor>
      <arglist>(Walker_t *head, Walker_t *tail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>f3eef66432b1f1db99e1d8aec945e813</anchor>
      <arglist>(int numWalkers, int numPtcls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>eb088eac83b0813c1d7d30081bffaac1</anchor>
      <arglist>(iterator it, RealType tauinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getActiveWalkers</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>61c818eec665a988390a5acc16b775a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParticleNum</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>dc15f2f4219f93be6b64cc69312cee1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>3ce1540ecab907b0ccf535910cb3d95f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>6b4b5f2f568874ba07e17248be4bf0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>bdaf0fbf4069656d68bbb05105fa4c33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>467b294ff4a74cfaac772662925b7928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>acd3e1d673d379e83b5726fdc014df95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>3016abffb9ea304bf36860121e3f03cb</anchor>
      <arglist>(iterator it, INPUT_ITER first, INPUT_ITER last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>d8a011ffd46d579fef805a024b69d601</anchor>
      <arglist>(Walker_t *awalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>1ca18a69203ce18438d6b5fbb4fe2738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker_t *</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>c6db31eaf7ebd4649af16dcd7cfd928d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Walker_t *</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>251a922fc1928ad2f8895d558241f18c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalEnergy</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>7d423b29b2946cf3816243c39a4b70c8</anchor>
      <arglist>(RealType e)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLocalEnergy</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>30d27abc3f80e3964a3c86100b213d7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MultiChain *</type>
      <name>getPolymer</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>7f330e3f56861d42cc9bca720fef61a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolymer</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>34928bd58ddfe722d0fe5b5bd1a5ab8d</anchor>
      <arglist>(MultiChain *chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>b927f34947c5129ba3043499d1a242b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadWalker</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>de96ee4597962c0aef0c3c04a60a983d</anchor>
      <arglist>(Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAuxDataSet</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>081f59e0ceb3993eb7890151e583f3e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createAuxDataSet</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>ebc26676f8867a19fae79e565f786468</anchor>
      <arglist>(int nfield=256)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWalkerProperty</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>821efb6ab9f7f5d0d943cfa798625a9f</anchor>
      <arglist>(int ncopy=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>OwnWalkers</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>f28c99f0e674af91e8936f9ed957d693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReadyForPbyP</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>7ee1f6ed9a6442e2addc04a8936015c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>UpdateMode</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a0661ea45c06feb2cc01da8c0e05089f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>LocalEnergy</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>b7e08c75af0af6cc8f02758d5185a877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WalkerList_t</type>
      <name>WalkerList</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>59aaaebce1c520403b7619a2d06aab67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultiChain *</type>
      <name>Polymer</name>
      <anchorfile>classqmcplusplus_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>e79ba7a49baa02635a5c51f5f50a3962</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleSet</name>
    <filename>classqmcplusplus_1_1ParticleSet.html</filename>
    <base>QMCTraits</base>
    <base>OhmmsElementBase</base>
    <base>qmcplusplus::ParticleBase&lt; PtclOnLatticeTraits &gt;</base>
    <member kind="typedef">
      <type>Walker&lt; RealType, ParticlePos_t &gt;</type>
      <name>Walker_t</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>8cbc040d78a189e2526e4dc884be5b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>6bd44c297c0cb0fd264899c8c730aae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>763d0cb9e2575760e12808f3abb994af</anchor>
      <arglist>(const ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>0600025ad6ac90260e60c9f0edddbf2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>fac23d19c8255b1114936d98b7a5b93c</anchor>
      <arglist>(ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>5788218c3ed89a67225658ca892130a9</anchor>
      <arglist>(istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f00e6f4294d77cc716e08c09e81409d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>862e5b9ff21c12e95c23127d640d61c8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTable</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>5eb41af1aca4a51eeba948aceb2ad591</anchor>
      <arglist>(DistanceTableData *d_table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>cde1285804247c05cfe5728b0a317ff4</anchor>
      <arglist>(int iflag=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>22c9471dd4e05144fd5d7325b5296312</anchor>
      <arglist>(const ParticlePos_t &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSK</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>0e230cbadc2757589f0bff18e9cebafc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpeciesSet &amp;</type>
      <name>getSpeciesSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>67f10366421b5051e7f94dd40c661d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpeciesSet &amp;</type>
      <name>getSpeciesSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f8f168ba63c8045ec63ce870393e49c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tag</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>27389906422c3632d1e2cb375e1b2e22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parent</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>1a0fcff5781ccb24f1ca81f2dd1281c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>makeMove</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>ec87364a95f05b86b5f14ddd3ce5d517</anchor>
      <arglist>(Index_t iat, const SingleParticlePos_t &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeMoveOnSphere</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>4b07f61e780bd4f08fb41ac6a0c70b28</anchor>
      <arglist>(Index_t iat, const SingleParticlePos_t &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f1f06706d727544ff317ec6352ed50b5</anchor>
      <arglist>(Index_t iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rejectMove</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>30436481cd18ae9681fceaf1447699cb</anchor>
      <arglist>(Index_t iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initPropertyList</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>55f7a757d812aef92461a299df398ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addProperty</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f3bff24a49926d96fc6935ebbdb52321</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDistanceTables</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>774ba85db38d44815b66ac16fe49f434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeSphere</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>6d26f554a5deabf26ba1c38158d6de34</anchor>
      <arglist>(int nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>322656b932d4adefa8455367ab09259b</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>2979210aab9baa0fd9276b84fd8d54b6</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>dca5eb604a08421d0494e67bd369ef61</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>ebe862957c86e05c7421d639a2e1d8d6</anchor>
      <arglist>(ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>b309366ff0ed3435d571b162b4d8595e</anchor>
      <arglist>(ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>328fa275c2b8242a5243083f2c1d1f4a</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f3ff529c0a7d1762cd5a0a6e8e9fbecd</anchor>
      <arglist>(ParticlePos_t &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>7a66d21a129cc0bcba105fa593e0e146</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>e07c4cc71ef5af4b47ee64e3559b6352</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f7e6ed1421d0487d8426a6a4b62f8752</anchor>
      <arglist>(Walker_t &amp;awalker, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>f1aeb8d12fa764f1c11871fad07fb1e8</anchor>
      <arglist>(Walker_t &amp;awalker, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>3d057de4de56311208503fdaded849c3</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>109c0851746c34ab8dd8a6e3c49a1978</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>399f1aeee52b0b61437681971aa55266</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>ee5fc4f56ddc8a13620d64b966e80100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>a05b295dbe04277b8e9ac93477906288</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpeciesSet</type>
      <name>mySpecies</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>6d6c379f99ce4bd33cbde4f6098b2ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StructFact *</type>
      <name>SK</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>8073cd32932029f022d957c93732704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>Sphere</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>81cd4f225291449149cb0d8f56198ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>e1a30c6f960ee2e381019800f805c00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>ObjectTag</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>177383be150e52eb4f4d3eed8f5dc68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>ParentTag</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>173f00d2ed981ff781c12a24ec5ee6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>activePtcl</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>518655568631a3ed4439a9058c0673ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SingleParticlePos_t</type>
      <name>activePos</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>1e1e279115f68813e450f880f61d8daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; DistanceTableData * &gt;</type>
      <name>DistTables</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>10c9ef87232373973720d79f3b81ebd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>PropertyList</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>c7c4accc407e970b83699e0d345ea8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Index_t</type>
      <name>PtclObjectCounter</name>
      <anchorfile>classqmcplusplus_1_1ParticleSet.html</anchorfile>
      <anchor>e9208aec8305cd6fb12b36193bfbd7ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SymmetricDTD</name>
    <filename>structqmcplusplus_1_1SymmetricDTD.html</filename>
    <templarg>BC</templarg>
    <base>qmcplusplus::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>SymmetricDTD</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>a6013807aea46f47dee19b1e8d341506</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>3287ed39235a7a404e6d2fd85db32575</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>a1340a52287233bfa05a5e163522582a</anchor>
      <arglist>(int m, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>3c715515df087baee93a8f8f98df9d54</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>fa3e092bd341bc8116248380e77d0745</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveOnSphere</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>079c1efaa5eb23ed1d8fa5e4e26a8b92</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;displ, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structqmcplusplus_1_1SymmetricDTD.html</anchorfile>
      <anchor>bd34ad0c5616cacc27d520603a401e1b</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Walker</name>
    <filename>structqmcplusplus_1_1Walker.html</filename>
    <templarg>T</templarg>
    <templarg>PA</templarg>
    <templarg>GA</templarg>
    <member kind="typedef">
      <type>Matrix&lt; T &gt;</type>
      <name>PropertyContainer_t</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>fe1e16a0295d3b5779bf81efac44f33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; T &gt;</type>
      <name>Buffer_t</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>1c8b394ed0450ec658914b52942b419d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>3eb35aebcdf27219ad6e0847f2238cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>adbec8191c9707b273ece8a24f505d3b</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>03dd72490f63bc35bf043d0580d3f2b1</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Walker</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>01abe798c19a3078dbd8ef86edf54d0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker &amp;</type>
      <name>operator=</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>45b74203944965d0deccb7da6e068bf3</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>cfa18a95a38667e08dd4fba4fc978d28</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>381f967b3c0fdf5803d141f6225e080b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>21d5e142cd103bac7e7497414dad0b73</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopy</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>f8effe84514dedc5e3846d6c25416988</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>cfa6e06902dc943bb414b47cb590bf3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>09c785b3ef5536bcea99e51ce5dc5aa9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>7f543724060235fe383b5c8968ec2282</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>955070df2c19535124ec4f79df24aaea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProperty</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>ca4de0a744ae3815f166917350c8da34</anchor>
      <arglist>(T logpsi, T sigN, T ene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willDie</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>bec4d480818003c9186d7065d53df1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>314edf7bfb02bebf4a0bc93c26069814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeProperty</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>64b597b2051cfff5d19e53c4736758e0</anchor>
      <arglist>(int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>5188d4ac5a09a7851b55864e82bd9918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>putMessage</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>fa85ca4bc5c5c02f8f6b055f5e9c0d48</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Msg &amp;</type>
      <name>getMessage</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>07c976c32e231aae00d5a4bccff7031a</anchor>
      <arglist>(Msg &amp;m)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>0529fff0c73b2ebf44e98b6912f81b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Age</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>f2bd5e3fb753880c00e65f787dae920a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Weight</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>3e0665f87adde38281fc40514c48d83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Multiplicity</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>4fc55ba0d0fd671cbccde5385596901a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PropertyContainer_t</type>
      <name>Properties</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>eb8b000a610ad33a4cdf2d79922619c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PA</type>
      <name>R</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>8a07f716708376127e7e1bc5a1e4de4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GA</type>
      <name>Drift</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>16db3938a8a36f72079fa1cbc1e9bbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Buffer_t</type>
      <name>DataSet</name>
      <anchorfile>structqmcplusplus_1_1Walker.html</anchorfile>
      <anchor>9f6b514fb2cd0177d226a1b6ea803b3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Timer</name>
    <filename>structqmcplusplus_1_1Timer.html</filename>
    <base protection="private">Pooma::Clock</base>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>structqmcplusplus_1_1Timer.html</anchorfile>
      <anchor>d2d91044471f9700528883856a465f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>structqmcplusplus_1_1Timer.html</anchorfile>
      <anchor>e08cc444639675e0e905e0e692a81d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>structqmcplusplus_1_1Timer.html</anchorfile>
      <anchor>5bbfe30126564d5510725115ac3eea05</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIOBase</name>
    <filename>structqmcplusplus_1_1HDFAttribIOBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIOBase.html</anchorfile>
      <anchor>e730d5aa83af238c17a81d425ed34452</anchor>
      <arglist>(hid_t, const char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIOBase.html</anchorfile>
      <anchor>bfebf0b22ecd5e290439290cb41e0c47</anchor>
      <arglist>(hid_t, const char *)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO</name>
    <filename>structqmcplusplus_1_1HDFAttribIO.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO.html</anchorfile>
      <anchor>4721519562c1a134b1630ce3c4bfa2c9</anchor>
      <arglist>(hid_t, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO.html</anchorfile>
      <anchor>79ef47d4dc015c36b2095b262b3f22a0</anchor>
      <arglist>(hid_t, const char *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</name>
    <filename>structqmcplusplus_1_1CreateLeaf_3_01Vector_3_01T_00_01C_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>Reference&lt; Vector&lt; T, C &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>structqmcplusplus_1_1CreateLeaf_3_01Vector_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>07a86ec00b41af040066dedcac7eb935</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>structqmcplusplus_1_1CreateLeaf_3_01Vector_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>113def81b685558063998dfb4ad70bbd</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SizeLeaf</name>
    <filename>classqmcplusplus_1_1SizeLeaf.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeLeaf</name>
      <anchorfile>classqmcplusplus_1_1SizeLeaf.html</anchorfile>
      <anchor>5f2cb4d5a8e8921bf5008b5fcfe06e2a</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf</name>
      <anchorfile>classqmcplusplus_1_1SizeLeaf.html</anchorfile>
      <anchor>97a49230dee3d027188185b81937a3da</anchor>
      <arglist>(const SizeLeaf &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1SizeLeaf.html</anchorfile>
      <anchor>ad4681cfd3bbfb00fe4b4fb93bbae7f9</anchor>
      <arglist>(int s) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_m</name>
      <anchorfile>classqmcplusplus_1_1SizeLeaf.html</anchorfile>
      <anchor>edbb1a37564787f26109442d2b62fdd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</name>
    <filename>structqmcplusplus_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>5b2c2030129516c146a8db6ee434498e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>c04624300b6127336900d476305e87f9</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeaf &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</name>
    <filename>structqmcplusplus_1_1LeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01SizeLeaf_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>3cfb5a272eef369bc94ba02b9889046d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>b11ac014809d2b3fc75237ccba04045f</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;v, const SizeLeaf &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</name>
    <filename>structqmcplusplus_1_1LeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01EvalLeaf1_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>2929554b9b35e6ea25b4537e1748162c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1LeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>a85e1eba1f99827a8638c2c2a40e34a5</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;vec, const EvalLeaf1 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Tensor</name>
    <filename>classqmcplusplus_1_1Tensor.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="enumvalue">
      <name>ElemDim</name>
      <anchor>2c515fb7c32c389d97435cac4cf2611918eb31d248fc7be9671d3f1345ab7cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Size</name>
      <anchor>ff84ceb322217fc5731a3a685e0fa2ba2b6830e37c0e0e22b4325e7e3612aa67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>a44590c13913a839682d999df8e854d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>f2fc7e75a808477e56f1093e8c00d3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>3d09219c8a26ba58ac0f5a75a98246a0</anchor>
      <arglist>(DontInitialize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>32f0c1f63796fd18fe88ae278992ea1c</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>ee3c0d9ff043c59301350ded154cf990</anchor>
      <arglist>(const T &amp;x00)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>52f2aa53d5c473874fbe812a7dbeec1f</anchor>
      <arglist>(const T &amp;x00, const T &amp;x10, const T &amp;x01, const T &amp;x11)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>ef242c7bf11e0d91f182aaa558504862</anchor>
      <arglist>(const T &amp;x00, const T &amp;x10, const T &amp;x20, const T &amp;x01, const T &amp;x11, const T &amp;x21, const T &amp;x02, const T &amp;x12, const T &amp;x22)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>5e3bcbd6cb0051e2abfc48b544cc2a8b</anchor>
      <arglist>(const SymTensor&lt; T, D &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>fb09278994858d2483d58d5043d5c262</anchor>
      <arglist>(const AntiSymTensor&lt; T, D &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tensor</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>182a83484f36b5ccdca41a9d947e2464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>1bb9ecdf91551797e2baac99077c3658</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>a0aa1b05ed87777d26bdacd4294a76d3</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>82f429e4659fdf77005b13ac5f17b6bc</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>18fecc743a291412cdd346d70d170f62</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>41b9077c91185c30f809d2b294c565aa</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>e3694fc4e27597e9b2772ed776e5c2b1</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>2b0dae6a99773b8ecded90f651b3597e</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>a402717c8e1e6a5c72c96182c1cf0a48</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>6a25167af08167ce309a0fd2620a1cfd</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>37463eedacb692fee18d06e35f9d65c5</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>a8167c828e5b97870c35a8c56e6548a0</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diagonal</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>972c4ce2bb4bce3eb2694206df79ed08</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>4307ad62aee2576fd482d6f16ae8682f</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>760443f491bc426b558319aefc3a00ab</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>2f4233559a764ba45bcccd18229d56a7</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>845ea26496ec7090c8f450cdf9255861</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>91e36524b0238bc8286b1ae0acd978e5</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>f5e4702d1f16718b880e931529042ef7</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>5a92d58275b4505f5d97b9780c44a5d0</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>ef98eb0707fc8a1702a234820f6fe885</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>getRow</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>cd1cb5841a12730f2fcb36c7c42dd7c8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>getColumn</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>db5f2f84f1a6237d0f5d2a5952cdd4d4</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>X</name>
      <anchorfile>classqmcplusplus_1_1Tensor.html</anchorfile>
      <anchor>5861b0bee3a9a49c97ec7b0561ef6168</anchor>
      <arglist>[Size]</arglist>
    </member>
    <class kind="class">qmcplusplus::Tensor::DontInitialize</class>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Tensor::DontInitialize</name>
    <filename>classqmcplusplus_1_1Tensor_1_1DontInitialize.html</filename>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; hsize_t &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01hsize__t_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>97fe115dc95b2490cc05101a1613d692</anchor>
      <arglist>(hsize_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>f10f029b0d3b741e066aa6ba1d6a3096</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>c11c26e3ea671b2f60bbb02cb2014153</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>8196b01c38af3cfd14a60e2428d6015d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; int &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01int_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01int_01_4.html</anchorfile>
      <anchor>150b046abfe50123b47735d85701bf52</anchor>
      <arglist>(int &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01int_01_4.html</anchorfile>
      <anchor>13f1515bcf7aa7f8844b23323e1ff032</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01int_01_4.html</anchorfile>
      <anchor>37d5d1b41fefe964b7aa0d2ecf49201e</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>int &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01int_01_4.html</anchorfile>
      <anchor>398b7ba58394d0b18c4d055d20796f00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; double &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01double_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01double_01_4.html</anchorfile>
      <anchor>f5f09127852048d01e64c674f3d9e0ed</anchor>
      <arglist>(double &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01double_01_4.html</anchorfile>
      <anchor>0519573b4e29556e76e1c79b516c31e1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01double_01_4.html</anchorfile>
      <anchor>0b20a4e15d0fcb7496319a49024209a5</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>double &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01double_01_4.html</anchorfile>
      <anchor>605d9d6e4519f82d31e187bc98bc6a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; TinyVector&lt; double, D &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01double_00_01D_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>data_type</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01double_00_01D_01_4_01_4.html</anchorfile>
      <anchor>40fd78cd6a2b49c49f82316ad8604f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01double_00_01D_01_4_01_4.html</anchorfile>
      <anchor>a9e2434718ca56e1950aa0c7b8715e85</anchor>
      <arglist>(data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01double_00_01D_01_4_01_4.html</anchorfile>
      <anchor>bc26b59d2e098b866b1876e2eff2455e</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01double_00_01D_01_4_01_4.html</anchorfile>
      <anchor>ea7fb0b6503555630fbd0995db66dd79</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01double_00_01D_01_4_01_4.html</anchorfile>
      <anchor>7694e786374cf9ea18134b682cbdbb26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; TinyVector&lt; int, D &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01int_00_01D_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; int, D &gt;</type>
      <name>data_type</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01int_00_01D_01_4_01_4.html</anchorfile>
      <anchor>2fc0f7a14eb77c8a19b901c5738ed470</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01int_00_01D_01_4_01_4.html</anchorfile>
      <anchor>80e3eacb26fff8458270fe06cd8025da</anchor>
      <arglist>(data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01int_00_01D_01_4_01_4.html</anchorfile>
      <anchor>2a4ea7e2ff9a67fc93db514c838ef676</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01int_00_01D_01_4_01_4.html</anchorfile>
      <anchor>60c8e7ce17a1b173e0fdf1cab1fd625b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01TinyVector_3_01int_00_01D_01_4_01_4.html</anchorfile>
      <anchor>c36a848af0f9d1b25dbf39a14bc468f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; double &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>fef716b66512c30d3df5d742e749045a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>47efacbc57c4eb30f7c910f295308b45</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>8abe3b8f482daa3706c51ac5c7e355d3</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>911045e5610b50f017b5229d5a5d9b96</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>ab2213e34e5ce657439a00842812cfaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; int &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>90db5f0cda1e59662470e075585cf968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>8533b879ef089a581a7db7f9fa6767f2</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>6b897172b2b396ff3563662a76cce2b4</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>bf445632df0a17949d8a58f15ebc7243</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>2fb1451105f517ffd6d63aab57ad4ce6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; TinyVector&lt; double, D &gt; &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>f5ca2ea3992cadf2df1e929c9b383a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>19ad85c626c199c6763176c67950aa3b</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>42829e1e2fd90f129b7571d9ba9b58d3</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>40677c1e357556991c95923aea8c43d8</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>4fcc16768563733d0e83d85212537dfc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Matrix&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>d6db2ee6923431fff6727ceb76377e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>6f18ce5ae4bdf7c0278c3ec096973786</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>04c1f5f146d441919ec489dd8110da4f</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>fae0fb9f6bc8f83f54ae1251144d2bd0</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>83c9f12a3fa2c8bf18272c297476cf3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Component_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>de5c0650e04fd649da2041d802355add</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Component_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>510e8eff6c65f52a19cff4b2b4ffe18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>b6eb7a828a187aee1efb2c08b7fc547c</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>c05e6c74b5bc371001ada198f4787b67</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>be102e4931461d8b075518fa09b39d43</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>378af926c1f5913a0b2b0ee0bcefa6b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; string &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>string</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>4bba3de9c1073c4791f7b399053c9c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>2b125766f3265eee97134412714bd504</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>807c9d452634f3f3db483a0621d06570</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>51ab3a827a0d611a858be9e5a6e3dd6f</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>01b464b69f86272b7ec98ce1d7561028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>str80</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>ac2bbc53a290c4d342036ba5016f7f4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Array&lt; double, 3 &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01double_00_013_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Array&lt; double, 3 &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01double_00_013_01_4_01_4.html</anchorfile>
      <anchor>1a71b8122a14a0a01104c91f837a2386</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01double_00_013_01_4_01_4.html</anchorfile>
      <anchor>c212cef58c2241df81931eb6d4b4de1a</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01double_00_013_01_4_01_4.html</anchorfile>
      <anchor>d49eebe4de6e6f7f44717479e7765af8</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01double_00_013_01_4_01_4.html</anchorfile>
      <anchor>d8736a9e3721e8b60358e0962cd65533</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01double_00_013_01_4_01_4.html</anchorfile>
      <anchor>315f6324212d4836158c605856262cf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; Array&lt; complex&lt; double &gt;, 3 &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01complex_3_01double_01_4_00_013_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Array&lt; complex&lt; double &gt;, 3 &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01complex_3_01double_01_4_00_013_01_4_01_4.html</anchorfile>
      <anchor>35fba02ba832982622be661304d7f5aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01complex_3_01double_01_4_00_013_01_4_01_4.html</anchorfile>
      <anchor>cb60652b800a57f3e1e8360fb560b96a</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01complex_3_01double_01_4_00_013_01_4_01_4.html</anchorfile>
      <anchor>b4e2ac849333ea4c6661965cc2d05524</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01complex_3_01double_01_4_00_013_01_4_01_4.html</anchorfile>
      <anchor>ef0bdde98a5146d2671ce57c312274ba</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01Array_3_01complex_3_01double_01_4_00_013_01_4_01_4.html</anchorfile>
      <anchor>fbf804b02b0852b794cc75ab50d366d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MatrixOperators</name>
    <filename>structqmcplusplus_1_1MatrixOperators.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>12affc2a29037ea4865370e56c02a1da</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Matrix&lt; double &gt; &amp;B, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>efe991a6aa22489f1f6f79f22c38b313</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;B, Matrix&lt; std::complex&lt; double &gt; &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>0ab997fe5d88b8f34243b6213bf32732</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;B, Matrix&lt; double &gt; &amp;C)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>2eb21c970b132deec7145a58a66e20b1</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Vector&lt; double &gt; &amp;x, double *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>bdebc09131793d715cf0e6d940655324</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const double *restrict xptr, double *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>440a00b6a1b2dad1de2fb6e5d716d04a</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const TinyVector&lt; double, D &gt; *xvPtr, TinyVector&lt; double, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>c2f7937677c157fa19982211931159cd</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Vector&lt; TinyVector&lt; double, D &gt; &gt; &amp;x, TinyVector&lt; double, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>8b567a922c0c2da1bff57e5d3acb6d93</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Vector&lt; TinyVector&lt; std::complex&lt; double &gt;, D &gt; &gt; &amp;x, TinyVector&lt; std::complex&lt; double &gt;, D &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>c24d3acce1740cd4e1a0572ce3cee720</anchor>
      <arglist>(const Matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const Vector&lt; std::complex&lt; double &gt; &gt; &amp;x, std::complex&lt; double &gt; *restrict yptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>product</name>
      <anchorfile>structqmcplusplus_1_1MatrixOperators.html</anchorfile>
      <anchor>6bf6dde2a6356894ac5dcfbd77190303</anchor>
      <arglist>(const Matrix&lt; double &gt; &amp;A, const Vector&lt; std::complex&lt; double &gt; &gt; &amp;x, double *restrict yptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimCubicSplineFirst</name>
    <filename>classqmcplusplus_1_1OneDimCubicSplineFirst.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>8fd31b0781df605c2095ce4acc18c3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>08e69ca186edc5e9869f0072d20b7f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>c96cbe194c09a8298c5048be4ab3af48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>b69ae177cb0ffbff67e8b419d27fcbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>3a46a1dfc4d75c454fc507ed77fb83b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplineFirst</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>ee17542917882a8a83e7381a10dea4d2</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplineFirst</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>58cf42bfe1094c123eed374b0238030c</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv, bool pbc=true)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>d926dd47eeebbc4ee651969ffcc1f525</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>e949f60ee859d619e9f074362a8d3d33</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>28789e63909ef2d1ef582f21c10afdd9</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>1b9b3d281f44fc979573da704717a59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>95a14ed6d1ae935006860ec77b9d7e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>863f8d69c4d7446b9fe084b413c3d5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>a09f894db127b3ec2dfdc7e31e6d5856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>3868858a59a24c4f99c4a78e797b1b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplineFirst.html</anchorfile>
      <anchor>1ff0c80ac9709f9b58f35c271422c07f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimCubicSplinePBC</name>
    <filename>classqmcplusplus_1_1OneDimCubicSplinePBC.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>eb78ad57b79ac14432cb27a972fa3ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>ba966fdc522c137a7db439fd8836cd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>a22f4cea01f780090464310e27659ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>4b91e0f777ce1f25b909e549669ea3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>255de29b0fe123f59cb74e8af6c8130f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplinePBC</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>d0a52fbec7b09196eef3ca3895e3425a</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplinePBC</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>ad16a4e29c94a6c3af2b417d88835662</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>8783f5abc079f2027c6cfc85aa4fdb7d</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>f145fb7cff5994517c872565e26b5bf2</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>e9a7819f89ff71d4e8d25b9496309c95</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>b69cc8e58c8e817adc0e88526846c3f7</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>a7a5bf52c0e2bef6daf7bca75df50d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>7d978afa0765138dea9fbe6977a867a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>abeea74b83f7b948cd9730dfd280f13d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>f495e49b8b6f88c5ea64f38894f8aaea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Difference</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>0f16993a501520ed9d50cf41cebf8961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Length</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>52790256249c6a87ecb94c3c5a88324c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>Linv</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSplinePBC.html</anchorfile>
      <anchor>82e633aa5a2f5a0d3b4c1943e4d45b05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimCubicSpline</name>
    <filename>classqmcplusplus_1_1OneDimCubicSpline.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>c1d6780211033e0bf1c4ca8a5c8c9c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>985ab62a8992f13370b51cc773a920e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>4a24463b5b424765e211ec25db8981a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>8a590035557c12d27763b3783ca97a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>5672e7e006b9765d783e068ad518491a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>4e85f8e7ec446c617f98e93948ca30ca</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>f050967232a5f41df5ad2b32b1368476</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>367495ae04517001b7158bd5a3776873</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>fa6d5bc2f46f77dfded309f6d375a4ce</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>a3c3eb3f869408c8b6d1dbf3684d3fa1</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>8513af9bcc6c5edef978a078bfb4001a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y2</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>c84f3d404c4a4af17b49e0138a1ac3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>257c1653346537da1b23a00b702e1a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>4c534534fef9fbe0b9d8beec6016e525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>first_deriv</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>369f6b36ece0bea04f8080844bac71db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>last_deriv</name>
      <anchorfile>classqmcplusplus_1_1OneDimCubicSpline.html</anchorfile>
      <anchor>5639f47dcf13259f4a5ef630dba1d027</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OneDimGridBase</name>
    <filename>structqmcplusplus_1_1OneDimGridBase.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>2f09aa06dece8de6fac0bfc54733fa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CT</type>
      <name>Array_t</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>bb84c50ab1daf87f77bd171955b6c19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridBase</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>4a5b60275d94dc74cee9664dd6969e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGridTag</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>8b4e31a23406b1962165830c89a61ece</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>currentIndex</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>9bb1348f0d42f17cea679e4b97897769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>0591219219b4c7f8f4dbbabf05492516</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>c464bea193bb22793093c6da58df6380</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>701161751323971c7ce866dd86de4fb2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>c38bde35e165ba59044bead0d8371f66</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>9d0d996fb2528f1735f729090e4bd2eb</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>37daf78fa1748eca22e470c7c274e929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>428ceefdeebbf51454b40827e88e733f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dh</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>b94256939f18462894922b468d162abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>r</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>354f5b59e102d70bcb56a456f5d20596</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dr</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>e8e8adbb94de00623e1b717f9a7669b2</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>e04d04396525836b6ff7dc705e2626c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmin</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>e55d39993c98fcc5d64711b89874c133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmax</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>b106012f4e6bcac5a534f0c0120ee79c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFirstOrder</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>ac7bb057ef55d61c7b3e35b404e97bba</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateFirst</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>4b5ce826fba5e54197cbb23738fafd22</anchor>
      <arglist>(T1 a, T1 b, T1 a1, T1 b1)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateFirst</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>2610bcfec2142a992070f7d70121a80a</anchor>
      <arglist>(T1 a, T1 b, T1 a1, T1 b1, T1 &amp;du, T1 &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSecondOrder</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>61dc473f3112d22ab3ecf78e26ce9da3</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateSecond</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>c62581fdffea4b0f6bfb0020c5633ec5</anchor>
      <arglist>(T1 y1, T1 y2, T1 d2y1, T1 d2y2)</arglist>
    </member>
    <member kind="function">
      <type>T1</type>
      <name>cubicInterpolateSecond</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>b2c1e7a991bdeee8ec0a53f448b63bd5</anchor>
      <arglist>(T1 y1, T1 y2, T1 d2y1, T1 d2y2, T &amp;du, T &amp;d2u)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>efbc27bea6bfcad3a87a049b1b4f0441</anchor>
      <arglist>(T r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>5004d19001559fe39208468dfca02833</anchor>
      <arglist>(T ri, T rf, int n)=0</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Loc</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>b1d1eaa353d82e16e8d293c9c9ade444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>GridTag</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>0c074fc6ff0b5c3f39e134f22b1926c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_points</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>363b687b992657a7c8181e8ce2d76cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>lower_bound</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>09a5b89b1e010e87762417fc4b437a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>upper_bound</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>d87e44636ba3609af63978f7d12ef4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Delta</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>93b1b3ef4c04165f60e5db308ecaea71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dL</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>9df40f711881c480bfc145aa5e28582b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dLinv</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>9253d7a9eddc9a03bbe867551d026db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>cL</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>a667d0011b67b90253f5d190a4b2a611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>cR</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>cdc51778995edfa50a706003d521b8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>p1</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>8a4933071b412828e3f0e0df09b34663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>p2</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>5f189d6eb349ec34277761feecad217e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>q1</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>5979a04cedcc36f5e6cecec9b21ab6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>q2</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>5c87b19c1009202600921713f13dabc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dp1</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>82983ff67a1ce0cc83ef29b2708ee2ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dq1</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>ab2467c12ce27930d6bd9bf7f06bcf74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dq2</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>78ac1185059f7c4d7057898e1017fa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2p1</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>5277aa67c3b01667335c3135147c9176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2q1</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>e5defdbd40a5cb346c47ad04d34fe5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2q2</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>264a4edf76bb94893b24af218e1a1195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array_t</type>
      <name>X</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridBase.html</anchorfile>
      <anchor>c52704a7ecf05a8ee57c63d84ad3cfcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LinearGrid</name>
    <filename>structqmcplusplus_1_1LinearGrid.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1LinearGrid.html</anchorfile>
      <anchor>fef1d7cf9d6afa6597dc678a34154f3c</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1LinearGrid.html</anchorfile>
      <anchor>8e3fefce910003a89ed17a1821ca95be</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>DeltaInv</name>
      <anchorfile>structqmcplusplus_1_1LinearGrid.html</anchorfile>
      <anchor>fe80f540a01c1254ce134327b291830b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LogGrid</name>
    <filename>structqmcplusplus_1_1LogGrid.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1LogGrid.html</anchorfile>
      <anchor>c305753ed7faedb77428794a6764a8d5</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1LogGrid.html</anchorfile>
      <anchor>4040671b199dc831603540b43ac219cb</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverLogDelta</name>
      <anchorfile>structqmcplusplus_1_1LogGrid.html</anchorfile>
      <anchor>3fbc1f15e699cf92bba4c317c1265cc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LogGridZero</name>
    <filename>structqmcplusplus_1_1LogGridZero.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1LogGridZero.html</anchorfile>
      <anchor>ed2ed19d7d9ee96033c3a52aa152bb05</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1LogGridZero.html</anchorfile>
      <anchor>73bad58487d85dc8811d8edf27d79043</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverA</name>
      <anchorfile>structqmcplusplus_1_1LogGridZero.html</anchorfile>
      <anchor>70483786184e82a7abdb77b92794c3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverB</name>
      <anchorfile>structqmcplusplus_1_1LogGridZero.html</anchorfile>
      <anchor>69cdccea4d0e07132b8b238e179b786c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumericalGrid</name>
    <filename>structqmcplusplus_1_1NumericalGrid.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>qmcplusplus::OneDimGridBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalGrid</name>
      <anchorfile>structqmcplusplus_1_1NumericalGrid.html</anchorfile>
      <anchor>dac4a6ffe0ccd469309b39a1cb254e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalGrid</name>
      <anchorfile>structqmcplusplus_1_1NumericalGrid.html</anchorfile>
      <anchor>0dad6985de8e9fd3e2459f49639c931f</anchor>
      <arglist>(const VA &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>structqmcplusplus_1_1NumericalGrid.html</anchorfile>
      <anchor>ed69f0f9987ff003bdc7f0f80e20ee60</anchor>
      <arglist>(IT g_first, IT g_last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structqmcplusplus_1_1NumericalGrid.html</anchorfile>
      <anchor>ddadce9990e40a2109ec0a33f381f1c1</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1NumericalGrid.html</anchorfile>
      <anchor>2718078c074e58a78e522fbadae9f8bb</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1NumericalGrid.html</anchorfile>
      <anchor>c3d4f372c8ed0a8932fe560bbf91b3b0</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::FunctorBase</name>
    <filename>structqmcplusplus_1_1FunctorBase.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OneDimGridFunctor</name>
    <filename>structqmcplusplus_1_1OneDimGridFunctor.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <member kind="typedef">
      <type>Td</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>e03db3e0fc61a1f78adffa267fc57d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tg</type>
      <name>point_type</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>bd9e31698de7689ac1c6811cecabc5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CTd</type>
      <name>data_type</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>40ff8f1f3d71ddc9e04470264eed3c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; Tg, CTg &gt;</type>
      <name>grid_type</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>38606499c5a9735a04d24079c7de318b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>this_type</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>6cec8500fb9d09178eb08afbc892f6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridFunctor</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>d4ba6abd968b173683a799b81902748a</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OneDimGridFunctor</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>898f4326dbfb8fdebc6e1ab86b5525df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridFunctor</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>96a896dba522dcea09755005ee87f0d0</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>f08ca2544e3d94c55c77b9e73b78a567</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>72347e4143322b2569d12373de3a2012</anchor>
      <arglist>(const T1 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumOfNodes</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>16f3b7c9b1bfc04614e56db8bc07b2d6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOfNodes</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>642281883a47c32213de52f6321f547f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>data</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>3b54c885b99266601b7a848bc16c0a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>7799832d12d350a2c4554e067d9a1e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>76afada3dd46016fb8f4bab98fd33c9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>52955d2b20612a45cf571b0c5bd34586</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>5dfc636b733f21144a56200e226dc2e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>6164a7f9de0d1f1f1b2e05b931c00ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>ebabea3df92547ed8349702a25a08adf</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>a8ca786606b3364ceae68d3b5cba6ba6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>f8caf071bb41175cff270fce8115403d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>data</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>0acfd0b20672b4accc394e76dec95b77</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>dh</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>f46a11824deb46fc463f1ac8c5836c7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>r</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>0c5573534873999b6c5e55883a7a45f2</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>dr</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>20e8dca34591bf305420ee986fb5b3f4</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>e0997341b544c3e4bb69f264cdb4b738</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>79be4b60dbbc5a11fd8be864bcaac966</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>7cd2bae06bd27137cbe5546b167f18ff</anchor>
      <arglist>(point_type r, point_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateAll</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>7096f9cac4c356b13debabf97dfc87b1</anchor>
      <arglist>(point_type r, point_type rinv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>72c4b436a79468683443c5bac5b91cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>splint</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>5c1dd95ed9a482d2f91b09b6c542a9ef</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>splint</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>42e970461ff99cf7a0550a01c165cd14</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>spline</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>97d874e9d732ada3eef0a36351dad5e5</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>spline</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>477c602499e84bf822923846a3a41263</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>c9751501a1b68b860f61fa7473a2d393</anchor>
      <arglist>(point_type r, point_type rinv, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>f37e39a91963dec31a0f198068fb0e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>grid_type *</type>
      <name>m_grid</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>5cbc2e2ce1c210e90491780d1294d452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>2bb2e99c589a6cccba77aa62d71d1cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>a4ace39edeccbceab1daa477e847fc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>a6ef0907cd0574d1507b5f95179f8eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>a8c23ae7a8b106d5a1fa5c9c7de60e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumNodes</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>aa75b79de4e41fe330540af990459957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type * &gt;</type>
      <name>FirstAddress</name>
      <anchorfile>structqmcplusplus_1_1OneDimGridFunctor.html</anchorfile>
      <anchor>599f3e067c23cd7b2a3670daa0d8e259</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimConstFunctor</name>
    <filename>classqmcplusplus_1_1OneDimConstFunctor.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>dd6600c3c3c528fd15fb3b21cfa0553f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>de8c9f899b957d16df1eba8cb136614a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>76c41151064df215fb2aaaca094a928d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>2244f3046287b0bbbbec506aaca910d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>fe6eddbf3795dc5b7f6f4cd3e74339fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimConstFunctor</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>efaa507a1e89d003bca89f96acc374f4</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>6b199491ad6d939468bc25dc1075afbf</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>edc37f8e46d012d737ffd9dd2e835a48</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>836e6386ee8a048cb514b468fb6247ec</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>ab85f72a24fd71396833705b89dcda9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Td</type>
      <name>ConstValue</name>
      <anchorfile>classqmcplusplus_1_1OneDimConstFunctor.html</anchorfile>
      <anchor>818d9ce551f231bbffce36b1090225ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimLinearSpline</name>
    <filename>classqmcplusplus_1_1OneDimLinearSpline.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>qmcplusplus::OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>016617c6dd6cbab4bf0a2b2195b6b4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>76ca909f5da6781ba61ca1686037539f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>dae780eac2c1f4f80f074b19a5f1f14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>a127d68a8d58d86384dd15ed5c26cfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>59ae07cf9edfe0e726358056b9ffe634</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimLinearSpline</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>3ca2cb09868c21c19b0e0593d23870ff</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimLinearSpline</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>80be4b46ae6805b0c3d4b696b1127b94</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv, bool pbc=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimLinearSpline</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>d226865d2e755d72fe183f0d35112d94</anchor>
      <arglist>(const OneDimLinearSpline&lt; Td, Tg, CTd, CTg &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>6314d7f8080f86b3e573b7f15f8073eb</anchor>
      <arglist>(IT d_first, IT d_last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>496c347c4f7ce61680885671ccd58e13</anchor>
      <arglist>(IT1 g_first, IT1 g_last, IT2 d_first, IT2 d_last)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>rmax</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>a3b82fcfb6ed66a735c86bc035e39e74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>6fc54c69750e44653021fabfdd472397</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splintNG</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>96df57f6c3a37fdf3ff8af5afd963714</anchor>
      <arglist>(point_type r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>a1acc8739c9f1d5b2ff27019be456872</anchor>
      <arglist>(point_type r, int &amp;k, point_type &amp;rfrac)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>b5422414c234450c724c2b4c36ad43b6</anchor>
      <arglist>(int k, point_type rfrac)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>e5d442c2630dccdeb36876d351155628</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>1327348044b1bc91f3c74f9c5c4361bc</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>2e7b3eaa9742c4b9f1710999ce8d0ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>55b27825c4c5e31cafda875cb7e645cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>6747f3f727bdfdb5cfafc7cdcbddcc44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>ConstValue</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>d665b851f8408b402b08a786f17eb463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>2153ece406b222e6595340e13ad52093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>04a6b08a2cfdf008d3fa2945e15490ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>delta</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>d824071db308e6c993ea716db710f022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>delta_inv</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>2e055d1e428751808ea21f372186db3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>classqmcplusplus_1_1OneDimLinearSpline.html</anchorfile>
      <anchor>73c669259666232bbae8b9a044b19e8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OneDimNumGridFunctor</name>
    <filename>structqmcplusplus_1_1OneDimNumGridFunctor.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>NumericalGrid&lt; T &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>3be1fc4bca4af79b2b1e25c6a49bde45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; T &gt;</type>
      <name>FuncType</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>710231d1d8905f0cba54ff9b044673c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimNumGridFunctor</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>5253f9905a1934cd5812647c66920526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>r</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>9d96cb780b235157bda1ac65e3f5256a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>fe14ce0aedef1ba44ecd8340c7ca7a48</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmax</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>80ddbd521e87014fbf7c42678c100494</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmin</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>dd6973c14c49e13d3f194ddf16048a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>splint</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>a1e546124dfcf690ec556d6092416c59</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>a40a76260e1403885438db2fe6122829</anchor>
      <arglist>(int npoints, std::istream &amp;fin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>cb4f5effe7853d4c2fde97131d6f7400</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>84afaae38aa6fc343445fbdd724989fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FuncType</type>
      <name>myFunc</name>
      <anchorfile>structqmcplusplus_1_1OneDimNumGridFunctor.html</anchorfile>
      <anchor>15732c1f51f4e6f7bfa066dbf9505962</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TricubicBsplineGrid</name>
    <filename>structqmcplusplus_1_1TricubicBsplineGrid.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::OrbitalTraits</base>
    <member kind="typedef">
      <type>OrbitalTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>ca39699627c254831de2f601a4303620</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>cd4e9ecd49e56cd62a699fa1fab4c5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TricubicBsplineGrid</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>13433d668e756b02fa3e3abdde96a118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TricubicBsplineGrid</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>4704e1e40b6ee7dabb2a8ae1d4c11b41</anchor>
      <arglist>(const TricubicBsplineGrid&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TricubicBsplineGrid &amp;</type>
      <name>operator=</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>e71c434ccf6ebb8b74ced089612fa663</anchor>
      <arglist>(const TricubicBsplineGrid&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>61d02744bb1b23e6a520fbb3a5636e00</anchor>
      <arglist>(real_type xi, real_type xf, real_type yi, real_type yf, real_type zi, real_type zf, int nx, int ny, int nz, bool interp=true, bool periodic=true, bool openend=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Find</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>652c9d9212242067fe644c4063799212</anchor>
      <arglist>(real_type x, real_type y, real_type z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FindAll</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>cbac364586d3f08136b7a53442a974de</anchor>
      <arglist>(real_type x, real_type y, real_type z)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>9fe658d23f092ba92290f4d909e6817c</anchor>
      <arglist>(const Array&lt; T, 3 &gt; &amp;P) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>2c9c68e7a27b7f721cde0834dcac6b2e</anchor>
      <arglist>(const Array&lt; T, 3 &gt; &amp;P, TinyVector&lt; T, 3 &gt; &amp;grad, T &amp;laplacian) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>e0306f85f0a77d978053faf9670ce674</anchor>
      <arglist>(const Array&lt; T, 3 &gt; &amp;P, TinyVector&lt; T, 3 &gt; &amp;grad, Tensor&lt; T, 3 &gt; &amp;secDerivs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>4635c4fc474365a0a10b1210b08d7d10</anchor>
      <arglist>(const Array&lt; T, 3 &gt; &amp;data, Array&lt; T, 3 &gt; &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SolvePeriodicInterp</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>2315fc5f8b35b724a68b991bde64c423</anchor>
      <arglist>(const Array&lt; T, 3 &gt; &amp;data, Array&lt; T, 3 &gt; &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MakePeriodic</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>d03ed3a4130113fbac13f3ec4850b408</anchor>
      <arglist>(Array&lt; T, 3 &gt; &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Interpolating</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>1c0a4d767da40dda8b8ea52af590a3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Periodic</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>badbb64e15c3dd1c25d4b0992a2d94a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nx</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>3fa5e754ee00efef0a1373fe321e1d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ny</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>d6e63e5a48b09c102a40e2cbd7b35fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nz</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>1d91b25b3b321285ec37084a2afe73ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>xStart</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>73a41cca0f08873d3a25870da25b1f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>xEnd</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>c8d3f55b39432b0d1cd3d40928420b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>yStart</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>76e04657d535cbe144a6356e08d27e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>yEnd</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>26000c60479a34eb2b7577a1a4c91eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>zStart</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>9b7e69aefd2ad4e9210cc308211512b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>zEnd</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>903a20713d9fd4a3dd03baed754f9945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Lx</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>baba8b71d01f04a264925194cd1a0b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>LxInv</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>dbad77c0df9de5b13105b9c00d43bf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Ly</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>67d2a52b6c774948d17ec1c0d08ddbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>LyInv</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>959fb920957331f13d0790c59273f568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Lz</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>dfa5aa8db35ca13a96a79cdd5bb22c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>LzInv</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>794b3bac3894a5c1bec57dd85d702759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dx</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>dac5fc51c45228379fd8135f242992d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dxInv</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>97255c0a9a6e4b52d836e11a20bdfc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dy</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>928ba42c3a4ae82c5510ad26f414f2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dyInv</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>498ac5ce886a1f39ce8f08f408e0cf74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dz</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>43620fa574ee5581b45ec604ce3a484b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dzInv</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>40d78073b80ffa113e8c4c7e78d91ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix0</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>a9aa8419c8016757e4139bfb9c1d617a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix1</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>144e81d039060bf6b5d7cc72f63bcd6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix2</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>fab6cb3f29d507b21fc42318fe00026a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix3</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>d6a108f6847b6693dad1b6fce1472905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy0</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>7f10a1936f30c7720b2bdf1bdb78f45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy1</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>de7a5f2a6bb2800fd467546a1616b395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy2</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>45dc39b488094fdd316b47a10b7cad17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy3</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>e0498a3dc6849b2a42658b17f8a52ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz0</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>b08e580ecd8191d8747c6ec0e3d4d821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz1</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>d3dd4b7cbbcdab4ccf9ef2f225713195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz2</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>e96fdde71c4815dcc50638fff9b558e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz3</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>c9728dd38afb0260502a6209f86dffd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; real_type, 4 &gt;</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>5659df298f944b9f8f84e16807d91057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; real_type, 4 &gt;</type>
      <name>dA</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>e94299c0085f56dd5894a8144730a6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; real_type, 4 &gt;</type>
      <name>d2A</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>a18a613a83e6f1fd776e6443dac94f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tensor&lt; real_type, 4 &gt;</type>
      <name>d3A</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>34a04f0c1544337b34a1da70c9ef8303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>px</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>0a6936291f4fc227c0912492a00b05f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>py</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>8fa6e9d041885ae4040c3cc91fef1f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>pz</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>f78f6c8dcbdcb82fbc8746b459f6c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>a</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>86f8712ff2dd57c202399bf28876a629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>b</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>acfbd9958bfd6e41f31c6705a7191375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>c</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>9a891f8c512292aa73221ac52eca268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>da</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>e7171a6314a0a0c638b077068f4d4862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>db</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>0c82cdf32f90911f2697606c1f0d853e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>dc</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>53aa93431891d77fec519c8b3118374d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>d2a</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>ae8be23910bd459daf11149e0c48526d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>d2b</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>6af6f61dfc9cfc6d6877966f7c872e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; real_type, 4 &gt;</type>
      <name>d2c</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineGrid.html</anchorfile>
      <anchor>30211a9c8d4f94c0db72025f718e6b8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TricubicBsplineTraits</name>
    <filename>structqmcplusplus_1_1TricubicBsplineTraits.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::OrbitalTraits</base>
    <member kind="typedef">
      <type>OrbitalTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineTraits.html</anchorfile>
      <anchor>9c728d2085ae15e1679150a709f02299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineTraits.html</anchorfile>
      <anchor>740543f65ac59678e9a7bda9b420fb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; real_type, 3 &gt;</type>
      <name>PosType</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineTraits.html</anchorfile>
      <anchor>d6780362a0a6f5f4f5c26f0db23a884e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineGrid&lt; T &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineTraits.html</anchorfile>
      <anchor>a4abf8d0c1ae51f30cfcb01b044dffa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; T, 3 &gt;</type>
      <name>StorageType</name>
      <anchorfile>structqmcplusplus_1_1TricubicBsplineTraits.html</anchorfile>
      <anchor>c204808438e41544e15b84637e43b538</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TricubicBspline</name>
    <filename>classqmcplusplus_1_1TricubicBspline.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>85a62b42c3762730741b4895e3562fa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>bceb14aeae9a40c00677bb728cd305f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>c3af2337c28f5278b78e76d3ed3b7e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::GridType</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>049e494d20028fa59037a1ca1575911d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::StorageType</type>
      <name>StorageType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>fb35d7c9e8dd9c068158de365c418607</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TricubicBspline</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>cfefcd3360e1418344276f5be36c20d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>a4446a894c112fd98e3105aee0be30ec</anchor>
      <arglist>(const GridType &amp;knots)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>618f64bd8493f46a617df4bd219488f3</anchor>
      <arglist>(real_type xi, real_type xf, real_type yi, real_type yf, real_type zi, real_type zf, int nx, int ny, int nz, bool interp=true, bool periodic=true, bool openend=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>857e8269c06648292ccaeed8e96dd2bd</anchor>
      <arglist>(const Array&lt; T, 3 &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>fc7b1ea419c41ce833f45076ec69febc</anchor>
      <arglist>(const TinyVector&lt; real_type, 3 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>76c6bf59a88aed4b7141b3a9769e1661</anchor>
      <arglist>(const TinyVector&lt; real_type, 3 &gt; &amp;r, TinyVector&lt; T, 3 &gt; &amp;gradf, T &amp;lapf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridType</type>
      <name>bKnots</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>d67de81a2a3821b384c08a8b827fc748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Array&lt; T, 3 &gt;</type>
      <name>P</name>
      <anchorfile>classqmcplusplus_1_1TricubicBspline.html</anchorfile>
      <anchor>22c71f9550d5598fefa8a7d719b6df52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TricubicBsplineVector</name>
    <filename>classqmcplusplus_1_1TricubicBsplineVector.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>1faf4ffc751c4b7a4034242b1a10331e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>3a6bc05a544b8203bc9d8ceabee99569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>6c065ff36046f24459a7229ab2c9e6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::GridType</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>251dacf3efa7e36834286f542cbf39a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::StorageType</type>
      <name>StorageType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>76cdaea8b18dfa433baf1953ba8f69b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TricubicBsplineVector</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>91efe0a8c4a58bab0193734b1bce0f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TricubicBsplineVector</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>bb94233a47f257401a6c48ada48de96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>6180b07d17d2c92bea69017fd2b97ba4</anchor>
      <arglist>(const GridType &amp;knots)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>ce64ad72739cf7db1ad5b81aed748549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>51b9b986e2cba0864537f635726fa47a</anchor>
      <arglist>(real_type xi, real_type xf, real_type yi, real_type yf, real_type zi, real_type zf, int nx, int ny, int nz, bool interp=true, bool periodic=true, bool openend=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>f2e249a71636fd123578a7adec38ba08</anchor>
      <arglist>(int i, const StorageType &amp;data, StorageType *curP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>4dfde53eacf480943c60d1ee6b5426b3</anchor>
      <arglist>(int i, const StorageType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>fb6e764fda989b04510920765a71b186</anchor>
      <arglist>(int iorb, const PosType &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>4564ad6641640778c735665c5a61f281</anchor>
      <arglist>(const PosType &amp;r, PV &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>0e162923a759b2778dc0595ca2af08fc</anchor>
      <arglist>(const PosType &amp;r, PV &amp;vals, GV &amp;grads, PV &amp;laps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>95d9de1ebf16b53b6f5c29d66977826c</anchor>
      <arglist>(const PosType &amp;r, int i, PM &amp;vals, GM &amp;grads, PM &amp;laps)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>OffSet</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>f45fc576c51414487ad6a6791d2a9f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridType</type>
      <name>bKnots</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>f955c59cbe14112aa3884a42d57e89f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>DeleteP</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>82c16dee3c501747f40fd7f5106a993c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; StorageType * &gt;</type>
      <name>P</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineVector.html</anchorfile>
      <anchor>1c7ea73ebd599fefc552cdd1c6707119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TricubicBsplineSet</name>
    <filename>classqmcplusplus_1_1TricubicBsplineSet.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>fd6d0b6feee41f27933abfd9512202e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>0e8eb07f9ee244d8736b455b0a98634c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>531c6479ac7738db3b039762069a6496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::GridType</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>2a7a90dab424dd4b3380c2de4b04e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineTraits&lt; T &gt;::StorageType</type>
      <name>StorageType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>bf78ec79db20e9998765d3628b9166bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, const StorageType * &gt;::iterator</type>
      <name>IteratorType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>3a578e98184e2982b6d47973bf4b7330</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TricubicBsplineSet</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>556c47d4caa0a83a30de9ac029d38dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TricubicBsplineSet</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>4472ef2f9864f1494ee989f3e703af0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>ed5c6f9a38184f7eae19716d761a55cf</anchor>
      <arglist>(const GridType &amp;knots)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>e1c04420739dffac6eca2865db115806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>08fc8357330ab9efa2e5a5168f8fc435</anchor>
      <arglist>(real_type xi, real_type xf, real_type yi, real_type yf, real_type zi, real_type zf, int nx, int ny, int nz, bool interp=true, bool periodic=true, bool openend=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>af0245bf16730f9abc96f02d92473ec5</anchor>
      <arglist>(int i, const StorageType &amp;data, StorageType *curP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>e16d3e30331d9f71e9b6a05f61492c22</anchor>
      <arglist>(int i, StorageType *curP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>d7d8cb4ee2761809a01fd873e154c44b</anchor>
      <arglist>(const PosType &amp;r, PV &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>0fef5b73bdf357cbabfb245eb23c24c8</anchor>
      <arglist>(const PosType &amp;r, PV &amp;vals, GV &amp;grads, PV &amp;laps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>79626588d044cca427feb545d4970447</anchor>
      <arglist>(const PosType &amp;r, int i, PM &amp;vals, GM &amp;grads, PM &amp;laps)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridType</type>
      <name>bKnots</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>9946ff099bb7a4aac2469118ae9c0289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; int, const StorageType * &gt;</type>
      <name>P</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSet.html</anchorfile>
      <anchor>2e160d9c53ae3b4f7c100f08cec6a24d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TriCubicSplineT</name>
    <filename>classqmcplusplus_1_1TriCubicSplineT.html</filename>
    <templarg>T</templarg>
    <templarg>Tg</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>71ed5e76c53151d5fd6534d447fde7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tg</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>2a15d7a19022f81e100591cc815f6564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>XYZCubicGrid&lt; T, Tg &gt;</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>16f2150679a1d87849a9878994dcb9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; T, Tg &gt;</type>
      <name>ThisType</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>7ff599f486b75d8d53f6492cebcfb9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::KnotType</type>
      <name>KnotType</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>614a5191a49f2558dd0fb6ec72828a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::Grid1DType</type>
      <name>Grid1DType</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>ac05cb8ce30d40eab47d2d088ec5db15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriCubicSplineT</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>72501397956b05fb24db1f037afe633e</anchor>
      <arglist>(GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>a1710616cdafe836529f61b0d57cfed5</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>1bf45a00e792346873969653a7f959c8</anchor>
      <arglist>(bool periodic=true)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>91515d8709a620a08886b45f55f44c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>9c57f61728d7e1faee47a7b81e35700d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>e11b49cc6f1c35dc946ce894f3007b33</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>b38ecda5e3f770e7f123c285ebe105cc</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>1fec23db39a6633294dbd978bc08dbd0</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>c8125ed8a8421183d88b3f5d4cb886b7</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>b6a147046ac1b8601d48a2aacff7d00c</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>5bbcb59c8e780910d489cc3ec9cd3d35</anchor>
      <arglist>(IT first, IT last, bool periodic=true)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>2a5392b23d67c5f094923c8858ab1478</anchor>
      <arglist>(const TinyVector&lt; Tg, 3 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>428d708b726f7c7e9026e70298aaf467</anchor>
      <arglist>(const TinyVector&lt; Tg, 3 &gt; &amp;r, TinyVector&lt; T, 3 &gt; &amp;gradf, T &amp;lapf)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>7a7a1b6ccaf40f23642e9433ac6b0af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UpToDate</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>2e413ca10934f9f34ce76541d32ec87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nX</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>525f239ac1e902df7d75f3d8ec6439c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nY</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>028d3b3e3133175ce5b3341e7fe09449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nZ</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>a0faf4585b0a9a3035f5cd506ebdc1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n001</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>f511e220dbd644182f02353eac6ed8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n010</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>d6f5a61a4dd7a3fef539af80ac12eceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n011</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>f61fa29dda9d1a9a48c23e57efb728dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n100</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>2a03f371c0b25b6bbbaa1f5acf60ddd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n101</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>71ee85a84e9fcb9c0cb5c9bdb5c643ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n110</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>2b4c30e4fc1dc00dbc0cf35a4dcbf642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n111</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>30aa5806a0bad88566e61656760ad0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>m_grid</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>6cd81b2dc190bfed325bfcfb1d6151a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KnotType &gt;</type>
      <name>F</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>f943a36fc15bdd27d696ecea11b3822c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateX</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>a4dbbd94908ae91808af723a6439259e</anchor>
      <arglist>(int source, int target, bool periodic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateY</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>71ba8556520be7570cded02df2636a4a</anchor>
      <arglist>(int source, int target, bool periodic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateZ</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineT.html</anchorfile>
      <anchor>d0bcd4d5972f15849f902a78215db2bc</anchor>
      <arglist>(int source, int target, bool periodic)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::XYZCubicGrid</name>
    <filename>structqmcplusplus_1_1XYZCubicGrid.html</filename>
    <templarg>T</templarg>
    <templarg>Tg</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, 8 &gt;</type>
      <name>KnotType</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>5090e07dc33da6b66ed12219fdca013e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; Tg &gt;</type>
      <name>Grid1DType</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>40e55943669c338906707063427d9f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>p1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ef8751a5617e644c45936e8618a50c09</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>p2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>bd39d851734c321e8a06cfb72ffb11f4</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>q1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>8ccd3e2ea4b832ff44a23496413cafe3</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>q2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>724bd179321ef7ad34b6911151705723</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dp1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>561d8678b1fa1eb352b2a4bb7dc86f24</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dq1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0d73601b7f10524a53857e9a3ed8d212</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dp2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>d4195006281e7dce24d2c09314f848dd</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>dq2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>8ac8ad0dfd3517e9d4aab8caadf67c12</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2p1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>3c79ddb5f4d9919807f03b160bd1eea3</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2q1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>bd369694df7192347e4f2c5e1da7373a</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2p2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ebf092a44aa37a99e3393b629378930f</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type>Tg</type>
      <name>d2q2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>e1e70bb2022e527cf89a89f90b4893f2</anchor>
      <arglist>(Tg t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZCubicGrid</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>dcdb2f9614f6246e3ae4fa385a665b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZCubicGrid</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>403e94674d8329d864d408c8d4ee8d0e</anchor>
      <arglist>(Grid1DType *xgrid, Grid1DType *ygrid, Grid1DType *zgrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridXYZ</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>5e2b2b17dd05405bfdcfe997abb1d669</anchor>
      <arglist>(Grid1DType *xgrid, Grid1DType *ygrid, Grid1DType *zgrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>b7fc48542199545a3a74239ff12e9a5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>a2be93c04ac37230151ea7de6aadfce6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBC</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>359883cb071b9f47dd1e1717ed20ff33</anchor>
      <arglist>(bool pbc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>c8cb731473e6e6397cf287967af22ee1</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>6897f47fa7bdd101a8657bc838f1735a</anchor>
      <arglist>(Tg x, Tg y, Tg z, bool updateall)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ba22dce3ac95df61d8d17e5cad81bd85</anchor>
      <arglist>(bool all)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>b38384aa9578d322363e5ed339d9591a</anchor>
      <arglist>(const KnotType &amp;f000, const KnotType &amp;f001, const KnotType &amp;f010, const KnotType &amp;f011, const KnotType &amp;f100, const KnotType &amp;f101, const KnotType &amp;f110, const KnotType &amp;f111)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>db592b8a27a9d822c63ca2a320d2bf95</anchor>
      <arglist>(const KnotType &amp;f000, const KnotType &amp;f001, const KnotType &amp;f010, const KnotType &amp;f011, const KnotType &amp;f100, const KnotType &amp;f101, const KnotType &amp;f110, const KnotType &amp;f111)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>OwnGrid</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>13042025a44710c2ac6d9164ca32fa95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Periodic</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ae24fb51c5cd9be7938cb9f4d9b6aab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Loc</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>a0bec5f047ecf632f937ca9d24ebc597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>d257a1e23c859a3a99b73a75a4d25dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>db08bc365d9d502b32dc4fee59ae47d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>8fcc31f1b3d99b5716467fe9206bdf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nX</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>6a30ae08353ee09e76da5823b38d1ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nY</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>6747ab444b2b138e99696b79337fcae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nZ</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>e7b018432d6a404b54f2f466807332b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>x_min</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>abd1a2c6258915c54a3ac63308603488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>x_max</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>d68d314f83d764212189d0b989d95f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>LengthX</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>f8fde23c77de5b98bb2b5d353d7742c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>OneOverLx</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>03d7258900895f0c855778989c62cf07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>y_min</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>937e70e2ea4cc2f75927c98bdc7f9535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>y_max</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>825db9604639198724b45e15557d3a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>LengthY</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>295e18cb6a3c97a09b6cc515b089b130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>OneOverLy</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0b89ef709bb9311a85255bba3ecf3221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>z_min</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>b8765cf24a37c292383ff6fc49b46b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>z_max</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>3606a2a3e87082262cd009b2e95199f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>LengthZ</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>8cf26a07cc3d3e8f329d4e99cb18ebd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>OneOverLz</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>f9a0cbe23e9ed4097b9d74914f76a0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>h</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>f05be868b6cf9347599f427920c89c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>k</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>4714bb1ca92f2b227d046421e4fb6fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>l</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ec55ed77aa682b71511d918533227dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>hinv</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>052f94a18f57001b49566bc571ff5ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>kinv</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0a3d40d24bc1b094648824049ed001a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>linv</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>868e72eb121935779e0d76ca675e0cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>u</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>5a312ef6cdf614ed80bb3686c4f736c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>v</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>da610c54e4645a632f8e89926acb5c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>w</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>acaf0984ffe33273ac75df4c1af4ebc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>91bc61d18f8568b2c767d31ba605031d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>2cc9ecf9ad640e9227794278e161b079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>9d50a5ea0b5c46f5c29dcd5812b156c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>a3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>83a4c35d5577e8159c23829966df813e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>1c845c43ee6c887c2c878b73a01e6213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ae94d3452fedf498d09714910fa80cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>b4a79ec0b9280462e66197c99966b93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>b3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>737291b87a981689b5e735e6271dde60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>974a1f077647d6d453c4205d61e8c0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>29c656f15690e5ddb713742de00ac556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>76148850717a91fc0b7cc8a02e3e91c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>c3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0ec9dc7018fd24062c4b5f6fab7b452b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>ddf49b6a39df235d3f2595f41a60069c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>66682a7938d11ce964f0250aa18b2ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>d00109a1502e5208623e1c36db0799aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>da3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>c797fa324855402186d127b9f5462a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>d03d141ba146b80e4ab4983f1dc75aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>55f4f38e4d77523962d63b2ddc5bad81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0854a596519b05e5ab67dc82a6d05d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>db3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>57aac857c85bf24142e5161310544eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>96a0e35174c497b645e4ddd1f4cb0dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>31efc16ce93c34a172f8abaed4541115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>8477097ad509a9bba9dac8cd406e766a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>dc3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>792708fa3dd0d5c2ecca726e3186e8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>bc5e99cb7a1f7b5d4dc8863dcd2f2e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>90564f0181e420112abbda52772f9639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>8a2b9bf43928dc31d468ad2c4ce4cd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2a3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>1b2dec3b4a09233fea1f8dcf455ffac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>65145583b1c43f094aa4ab850c76245a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>3685515e2003ab206180c9a9ef9b44ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>77cb690ac549d8405aa9795306c63c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2b3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>1920d93556baec4cdc2cca065b0602e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c0</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>a861afed29e6bd02ccbd7094fcf0d811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c1</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>d99fdc0cd1876636c62c87f9d25d3fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c2</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0950ed4a01f53be03e1b5cec88a9d7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Tg</type>
      <name>d2c3</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>3d682d41a202523bf59e54297af20d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>80a5147914c3356ace45fe4350c6c928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfX</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>501ca3a76ae9621c19ef418de97735f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfY</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>4ec418e0740113a7c3b80b3f2ce96fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfZ</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>0513cabc07e942070ab23909f98fc3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>lapf</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>26e7aa33fcc615af84b63b9d57384c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridX</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>9b5b06a20731039ff09a2dd2fef6fdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridY</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>bffba54265233621d02597cc71cafeef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridZ</name>
      <anchorfile>structqmcplusplus_1_1XYZCubicGrid.html</anchorfile>
      <anchor>7dbce5876dff52df9bcd629bd5f07f84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AGPDeterminant</name>
    <filename>classqmcplusplus_1_1AGPDeterminant.html</filename>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>GridMolecularOrbitals::BasisSetType</type>
      <name>BasisSetType</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>cf0dcd6110ed206335ea5944afb6e12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Determinant_t</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>1cadb356b03bf5d5dbf31adb90f45aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>Gradient_t</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>c125afe4b1d8f93935a58dc33f5c4079</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Laplacian_t</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>61c1c9b55e1caad99229c66353daba63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AGPDeterminant</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>481f3599a5d29c0becdb4ba2272ac350</anchor>
      <arglist>(BasisSetType *bs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AGPDeterminant</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>6547b6988c1dd20ca700420de94cf922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>63e8f83d9c31ac33af5aa73d3870da2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>465cbb94ee77a02e83768afd73b414b1</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>ee8249f898bc0658ca53e2ffd2f075f2</anchor>
      <arglist>(int nup, int ndown)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>edc3d3316ffca3384dc508d3c75a8704</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>a1c0f380e20ca9ba99c4550d856b9322</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>de5ab572b5dd49f6cf24d0a20420429e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>62f2c2e36be9fe6d676abe96daf8cc83</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>38b32a43e3bc2a5662a44d9628591b24</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>392b24685c355b1c0991fc5ba4cd2944</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>d59d9ce3fe8fb5f53011512614eb16cf</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratioUp</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>391a188b3e488772031a91725ea1eddf</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ratioDown</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>318f91dbc0a4c172cdde969046e0b7f9</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>c82e31797b8b051760544427c913b213</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>ee3cb7e5f46084285c5ecd7ec5a14168</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>763c577b747ba4d533e5f7178301a725</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>faf423e62fd29518d8d473d889222888</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>592c7d627772242603a1d279845e4e47</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>ea3d7be8402c12a1d50e36b6b9742f88</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>df18870fc19ecbf801c76c5625c89446</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>43dbed20802e81769be7cade10a2ceeb</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>f00394227bfd5267384d8c7987ebcbab</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable">
      <type>BasisSetType *</type>
      <name>GeminalBasis</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>dae540c8b7330f4a0082855549c0ad47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseRatioOnly</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>238ca35677d20d395bc5bea7b5eea943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>62d3dffdc4efd1656c3e302b8d522560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nup</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>cdfb008ced37b2f2f5e533d07a039709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Ndown</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>00ab66a2fa1cf7f40714b8fc947546a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>12533dbd33b08e3b4d6ea1620a98ee9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>dde3f8d4c0e807f31b895c51139ae67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>CurrentDet</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>eaba7b245f92e5e83ad65c6504b9b5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>Lambda</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>84ca165454b0a1981da2f62d3544ecbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>LambdaUP</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>7ad007a18ecbfb0c039f7da4cb99e858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiM</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>441c81eb461106f48d3d916baecaf187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiM_temp</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>fa6a39fdb7438b35b6f71066d9c888bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>phiT</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>ee84075d605571f4b70925c7331f4fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiMinv</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>d241a3f26c0b983d7daa14468c636add</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dY</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>33b679643b1342a89f352e1df9967962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2Y</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>b0bdbcecd794e3a9194045ec45e932e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dpsiU</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>427a4f7d4e8976d9b03ab3d821e03abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dpsiD</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>1a691b8a7135e1e3ad5cafbf4f379f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2psiU</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>4a69ac81d625d4044fb38865ff60dc30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2psiD</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>210e15e2e6b451c883fdeb5be4eb8afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>phiTv</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>be3f252643b93fa2bdddb494529c9704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>psiU</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>f51ac0ec542b0a9d00ba6fcc29e27def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>psiD</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>b61a9f2c80f21a09de716c1c60807b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; GradType &gt;</type>
      <name>dpsiUv</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>74a89c6ad04b86c9d9b23555e2a6b57f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; GradType &gt;</type>
      <name>dpsiDv</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>2e98e0bca09ee205735851403319f8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>d2psiUv</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>491b7d0369ef2fec20159f2d822c597e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>d2psiDv</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>c2b9fec5c461e40586ad5f35eb2afa61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>workV1</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>d053f57351a7d8b4ea43677df5a6904f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>workV2</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>685e1fae162157c52dbeb3cf6188605d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>WorkSpace</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>91f61419e54186599af0781349e43fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IndexType &gt;</type>
      <name>Pivot</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>e95ca8ba7d17a3770119f7a358aa6c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>aed9b11da0b1646fee7b24995a08c372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>cumRatio</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>400b20ce4587e7e950f6c1d0eae65507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdVU</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>9884df848dd018119c4ac9d92c3ae763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdVU</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>cd1712cc284dc9ae31c733e2f732bba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdVD</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>dd9da71c9dd8215ee71d2bcf32316816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdVD</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>adccd1af6dbcbc0028757cda523f6a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>8f9ae60870a66a90423f9c24df116897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>554f03b3c5696c326da6f65f0d92063a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdY</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>edc2e359840f105e4b04d2c0c72d7684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdY</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>f0ab8a34454246a784a227e42dd69a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>25c594adf416404dace4d2bb08a3afbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>f619bb643959dba8591d96e679c5761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>6beb89aed66aacfb0e916bbd39b17175</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminant.html</anchorfile>
      <anchor>8644ec552c1230cff75ffdd141d39143</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AGPDeterminantBuilder</name>
    <filename>classqmcplusplus_1_1AGPDeterminantBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>AGPDeterminantBuilder</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminantBuilder.html</anchorfile>
      <anchor>e451c7a9ec0cb763eeb9a82a72bedc62</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminantBuilder.html</anchorfile>
      <anchor>b87db0660787be09f40805dbef43ecd9</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>createAGP</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminantBuilder.html</anchorfile>
      <anchor>e197da8491fbd08c5c095489699020cb</anchor>
      <arglist>(BasisBuilderT *abuilder, xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OrbitalBuilderBase *</type>
      <name>basisBuilder</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminantBuilder.html</anchorfile>
      <anchor>6ce116b690daf2d29c5beff89269b684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AGPDeterminant *</type>
      <name>agpDet</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminantBuilder.html</anchorfile>
      <anchor>a4421a346b4d965ecdbf7de702a1c948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>ionRef</name>
      <anchorfile>classqmcplusplus_1_1AGPDeterminantBuilder.html</anchorfile>
      <anchor>37f341462cd1bc41ce8b860ccd65725e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HePresetHF</name>
    <filename>structqmcplusplus_1_1HePresetHF.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>N</name>
      <anchor>0e5a318357ffd3937366c21f778f08277b4194680b2a1fe4e6c82bfccc337637</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DummyBasisSet</type>
      <name>BasisSet_t</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>ebbc8fac80ab2721cfb8ad414618c9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HePresetHF</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>d8c14ecf3c729a1785b3437efe3c4b62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>1f2bd17efc365e944d3f30f136a6385c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>b34ce2ed5893e344fe814b9b1e310a97</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>2b9510be1de2a54b1ef582e9d3e0450a</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>3f012e3e759df3d8570e8f836dd1fd1b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi, GV &amp;dphi, VV &amp;d2phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>81c517fead78f0e093381b55910a1c3e</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>7c44a2bb47d46af783686564a254bd6a</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>8deae9acd4ef25b228240b4e3ba4d26a</anchor>
      <arglist>(DistanceTableData *dtable)</arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>815658348860fd9b4bd317a53f01df4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>Z</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>58c8c620fa343333be18a6d431d3ac83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>ZZ</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>660ea26c9ef047e7677cf43efa7016e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1HePresetHF.html</anchorfile>
      <anchor>70fd68f133eb3cf033dbca556aaf592f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HePresetHFBuilder</name>
    <filename>structqmcplusplus_1_1HePresetHFBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>HePresetHFBuilder</name>
      <anchorfile>structqmcplusplus_1_1HePresetHFBuilder.html</anchorfile>
      <anchor>71039855bc9f9f6d18106db8f5db9751</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1HePresetHFBuilder.html</anchorfile>
      <anchor>78fea1db5f718b0fda62f74b4de51618</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ComboSTO</name>
    <filename>structqmcplusplus_1_1ComboSTO.html</filename>
    <templarg>T</templarg>
    <templarg>POS</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>b4d29a948644596938d05a29e97bf5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; T, POS &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>778036c9e65fd96faffe849954635f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; T &gt;</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>d9693e20ce2a27cc062f18cc93d289bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboSTO</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>3a65441a7fc14dbbf1962ac305fad3b3</anchor>
      <arglist>(const ComboSTO &amp;aSTO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboSTO</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>0496929f291b08fddd1c348e273ee99c</anchor>
      <arglist>(int lm, SphericalHarmonics_t &amp;ylm, const vector&lt; RadialOrbital_t * &gt; &amp;rnl, T *c)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>7928d5b69031970f98a70d0af5f52716</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>703d203a5b39489fe8c8bb461a697ee2</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>c22a7aa21a09baf2b4f3ce591938c7a7</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>c728ddc380a27057d1828d7ed08ec13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>4fb304a4dbf97efb726c5a0a42b7e9d2</anchor>
      <arglist>(T r, T rinv, const POS &amp;dr, POS &amp;dy, T &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Name</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>1e3a814d65492f3aea39c4f1570bf7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LM</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>71534fd404ad4baa4dfea34b1d17cc53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t &amp;</type>
      <name>Ylm</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>80706f87c8695b129e79fb5c90d49237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>Rnl</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>f6c0527da530c00b999c97fd8a4bf4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1ComboSTO.html</anchorfile>
      <anchor>22b239288d9162ed2aaf4ef26f9f1701</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HFAtomicSTOSet</name>
    <filename>structqmcplusplus_1_1HFAtomicSTOSet.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>22dffcdfbaf6d4354ec145ef65a84f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; RealType &gt;</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>e9e4e71134d54340932817af37e3d05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ComboSTO&lt; RealType, PosType &gt;</type>
      <name>SPO_t</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>e6ee7c570c5f9bc12481824679d5b728</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DummyBasisSet</type>
      <name>BasisSet_t</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>8565516473a5beac890f9e59f9592794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSet</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>5bd10e390c2c61a2e43778a80299abe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSet</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>cc56042f23d810b5785ed70aec031fb6</anchor>
      <arglist>(int lmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>cff2e05e7c061927edc2c30a86802b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>09b6880451665bbde0ed896ce4e15d08</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>72cd6567840e44eacbc708de6a735950</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>6ac802257e8f156de10885b5d04d04c9</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>571dee75c34cf805427cae3d2bb0f5a8</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi, GV &amp;dphi, VV &amp;d2phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>40b1b1f3f86c6ecbbf265416ea0ae35f</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>719292ee80c5ac45aee821e448894070</anchor>
      <arglist>(DistanceTableData *dtable)</arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>63070beb537dcf8a55097bc5d06984b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>RnlPool</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>d40b3a2b866ea0d404a5768ee35bfd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SPO_t * &gt;</type>
      <name>Orbital</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>30e5ec24ad64bc75131975ada0d8a1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>31e17e1d44f1050550a4c7dbb5f4e0e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HFAtomicSTOSetBuilder</name>
    <filename>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSetBuilder</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>d93ddf885673175d10949350a154ab5a</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>c8a2e9f34c23fe96443c28d036c3d836</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HFAtomicSTOSet::RadialOrbital_t</type>
      <name>RadialOrbital_t</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>cf1cd678692a4a647c41f12b3c863b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HFAtomicSTOSet::SPO_t</type>
      <name>SPO_t</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>bf488f3e48b2a6c5610fc2cb1137b71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>getBasis</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>408bf0ffe5d4eb70046457bfd47023e8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>HFAtomicSTOSet *</type>
      <name>getOrbital</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>9f0165ee15d50faf74204c2f41b0b479</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>3a1f26b5a57c1e18d70cfa7ea8d2d9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>2a48b573c912889c6b104d4a6b1a1281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>af5c84bfd2bee4efebfc23a8d3b42a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>Rnl</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>26bd465423bab8221d073930fbb45c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPO_t * &gt;</type>
      <name>OrbSet</name>
      <anchorfile>classqmcplusplus_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>29113953ace5e548642d98fa9c70320d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BasisSetBase</name>
    <filename>structqmcplusplus_1_1BasisSetBase.html</filename>
    <base>qmcplusplus::OrbitalSetTraits</base>
    <member kind="function">
      <type></type>
      <name>BasisSetBase</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>60808ac63bfb51ebf395df51f316f762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSetBase</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>0d3ea8dfc8e29162fd1a41624eb81c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>6b098942f5051112614018932249336e</anchor>
      <arglist>(int ntargets)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>0b66b6b61e4b9c899e94d8cc03f9ca10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>244ccc09c188aef2e046ca96376a7163</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>fe7f2ffd7b843d78bdecae5f772817a1</anchor>
      <arglist>(int nbs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>4be1a27c8d20a82e9c68497559c2549a</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>9db9052adb7a5a86fc76c125d25eb32b</anchor>
      <arglist>(const ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>30be2f4dad9cdecdf7590f84b68f84c4</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>e303f6165a9d198095ec8ab912ad428f</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>56b3acafdf825d97443a024a07db0e27</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>7dc716a39af29aa5cc1f82819a76b7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>Phi</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>53a6ffa85c3b665815c25ec2ae46d4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dPhi</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>0c4ea2f5f72b9484fd4de5f5a9f3b763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2Phi</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>92490716420827b74fcbb71d59f9a019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>7a46cec2ab7ee2206e6b0d9e158f86ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Y</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>9073903ce876f6090608dfb080f12023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dY</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>012cb413afe8b721e77811fe2a55059c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2Y</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBase.html</anchorfile>
      <anchor>f5bf326a0e3609d9312481efc2c98a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BasisSetBuilder</name>
    <filename>structqmcplusplus_1_1BasisSetBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>BasisSetBuilder</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBuilder.html</anchorfile>
      <anchor>76ac6e09239641759f52549b15db97ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasisSetBuilder</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBuilder.html</anchorfile>
      <anchor>f9b41d70b259f877e0e805c49021ceb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBuilder.html</anchorfile>
      <anchor>798bfcd9efe7d17ab7f634692762c634</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBuilder.html</anchorfile>
      <anchor>414ffae8363c945e1e34a288ca62e843</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="variable">
      <type>BasisSetBase *</type>
      <name>myBasisSet</name>
      <anchorfile>structqmcplusplus_1_1BasisSetBuilder.html</anchorfile>
      <anchor>547c281b1b832492d44eb55893e68973</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::BasisSetFactory</name>
    <filename>classqmcplusplus_1_1BasisSetFactory.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>BasisSetFactory</name>
      <anchorfile>classqmcplusplus_1_1BasisSetFactory.html</anchorfile>
      <anchor>c3c58f41f50c40806cb729d996c6f622</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1BasisSetFactory.html</anchorfile>
      <anchor>a843fbaa40e6683f43909329dcce0445</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createBasisSet</name>
      <anchorfile>classqmcplusplus_1_1BasisSetFactory.html</anchorfile>
      <anchor>06ed38eebaf6b6c2b9f033dd61604643</anchor>
      <arglist>(xmlNodePtr cur, xmlNodePtr rootNode=NULL)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>classqmcplusplus_1_1BasisSetFactory.html</anchorfile>
      <anchor>0749cf69ad31cb3d8f264dd278f486f1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; BasisSetBuilder * &gt;</type>
      <name>basisBuilder</name>
      <anchorfile>classqmcplusplus_1_1BasisSetFactory.html</anchorfile>
      <anchor>542f5f4d8ddcf5bb2671df0e631d4995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1BasisSetFactory.html</anchorfile>
      <anchor>655826070247d99ef414f2b0ae2f597f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ComboOrbital</name>
    <filename>structqmcplusplus_1_1ComboOrbital.html</filename>
    <base>OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>389356a8a81a3481c62e864f52a62ffc</anchor>
      <arglist>(OrbitalConstraintsBase *control)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>c52a4f2c4a4054bb28a3eeced259c23f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContraints</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>8f408853a60ec8f485f791f10d2bef84</anchor>
      <arglist>(OrbitalConstraintsBase *control)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>1b16c5a7d0f70067df1db6299578b88c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>4ff8307e7dc08af0de5d262302892e0d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>3585ae13d7972ddb33a6be5582ded3fd</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>e14c2bdbdfc659ca243dab432bac1aae</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>06cee62296f3c11ccefaa8c0ccfc6b7e</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>95d83835155fd16d1a130b095bb328f4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>f3796ab6b083be2fac27010d7c083125</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>a546c2c03e3782f7cdabd20b8ff680c1</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>68480af62486b13a0092b43e25533b0a</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>5cfb8b1285e8b39ddf9a72892a3823bf</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>0cd4e5ce1c35daca366b558417dfea50</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>648959239ef760e56d1fed3d316bbe23</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>dbbe14bcd464ec17e7eba83b1a71674e</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>82bc4876b874a8c890489c51820eda7b</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; OrbitalBase * &gt;</type>
      <name>Psi</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>6ff92be1e41fcb72c9f5c8eefdd2ed6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalConstraintsBase *</type>
      <name>Constraints</name>
      <anchorfile>structqmcplusplus_1_1ComboOrbital.html</anchorfile>
      <anchor>5a58daa4f3f6391e34c0e29a8576578c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DetSetBuilderWithBasisSet</name>
    <filename>structqmcplusplus_1_1DetSetBuilderWithBasisSet.html</filename>
    <templarg>BasisBuilderT</templarg>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>DetSetBuilderWithBasisSet</name>
      <anchorfile>structqmcplusplus_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>a3272e48d6759a620fa3b3874f958db5</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, BasisBuilderT &amp;abuilder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>e9ea0eaf2bd9ff13075bae7b52d6dae6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>BasisBuilderT &amp;</type>
      <name>builder_ref</name>
      <anchorfile>structqmcplusplus_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>a559d66816852ca8c7c7522367ede2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcl</name>
      <anchorfile>structqmcplusplus_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>40a27a38cfb7ab249ee897355b25eae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>BasisName</name>
      <anchorfile>structqmcplusplus_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>42f52ec61d3a82cb355e2ea1fc02d179</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminant</name>
    <filename>classqmcplusplus_1_1DiracDeterminant.html</filename>
    <templarg>SPOSet</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Determinant_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>76f13d095d3313e343c36d6d39c28389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>Gradient_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>ab1068ac5c8ea4f4ff5590b20d8da7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Laplacian_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>7791e4a80d80a00f412e8d8d4fcf5643</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminant</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>f50f3e08d712414429cf7c6efeaf6ce6</anchor>
      <arglist>(SPOSet &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiracDeterminant</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>c1b20a6141a99ae2a2ede36dfd8ecb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminant</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>6d6fc51b3c6a6454891f0f5361791a1d</anchor>
      <arglist>(const DiracDeterminant&lt; SPOSet &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminant&lt; SPOSet &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>7f5dfaa6827f50dbe79865574eba1081</anchor>
      <arglist>(const DiracDeterminant&lt; SPOSet &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>7e716e9f09d3d95b7b94b60a4936c7e1</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>3fa1f322e6d645298a420d7631e4b196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>c6f90d24b78ed6e0d02eb7ac3c42db44</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>5112ad6bdecf5c2d87aae44685ea4c3f</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>7af848dcfa96130162c5996f06fe0cd3</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>2c903b934106661053442aa117d8f0d0</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>58fe9c3d05fb2c4a0a690a24b3acd871</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>1e2b8cd4a804fcfefac0ff8c0307b91f</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>b0a2a63a9e7926d9057e06627a5315c1</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>cad30928a7872a2cc15fe63594d20cbe</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>a4781877a91372b55c2a0604a6f7f31a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>9d9644ec58fb719c2a9bdd7d48dc07c3</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>42b76705eb413440ac3f43c2ba28737a</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>f27afff57d6041295fd42f3fbe703a18</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>03d33edfb66521f26641d1a64c0984ba</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>1eec8d48c454bf53721a12b32f06423d</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rows</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>68aec33df54a7b90a978f965761e64a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cols</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>b9b8930668d64657362ff9667712e8a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>50a450504f1bf2d5a289247ae7b51ed0</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>f0f9544d012f15bca4e046893dff0253</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseRatioOnly</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>43225e7a5f9b8c52e1ec6ff944e7c4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>32a08bd46ec35b95ce55413ccf7c55cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>811102827620caffe9b2b139e26f9cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>cfcc44b39ace2090dd8d0fed638daa21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>b62e03e1bbeadf182382601dd786c804</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>c703401c0e1db3fef0a4bdfa904f7989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSet &amp;</type>
      <name>Phi</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>899bbb715f6db62eebbc7b7577e1794b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>4d4032baff2609381d8f520142c1ddf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>CurrentDet</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>36137c9e4c0ff957281638e328f23520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiM</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>660e775ffb8dd0cdbde0dd4a49e2f7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiM_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>1014dd39c331fae39350b16f86750d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiMinv</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>78eecf688d2865f2569c411b49b608c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dpsiM</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>4d57a8c18b43245fa5ed40191c750dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dpsiM_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>eb3557035a9d803799f50ca1e6e98b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2psiM</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>82ce30a4a37bb588baf6ee02d872151a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2psiM_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>55e72ed3d03034eb825920fd7c586249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>psiV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>a4761e5e03e23eb684883a74b96b52bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; GradType &gt;</type>
      <name>dpsiV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>c075ec9e86057218e91f03dd807ed572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>d2psiV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>8aa9ff40fce894d566cc1ef4f58bacbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>workV1</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>0783be9edb907499909e35b15b10c945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>workV2</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>495e36799a6b93cf9b9981758b9ffe85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Determinant_t &gt;</type>
      <name>psiM_v</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>aea7119cfa644cac0821ee44d8d7b34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Gradient_t &gt;</type>
      <name>dpsiM_v</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>6f669c4e1523e585bdd089df259a8451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; Laplacian_t &gt;</type>
      <name>d2psiM_v</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>4e7fe2e120609c1c625e2c8faadf61e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>WorkSpace</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>a53e5137da6d2436a35cf2e12016a6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IndexType &gt;</type>
      <name>Pivot</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>80283e24ce8c4966e90b9416277e3d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>fb1a72718dccae6272670fa4d39422aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>cumRatio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>d1b89e7a00d0019e485259615ac2cb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>a8482e677c23b87a3ffa80cf32168752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>17441e8ffe63786aea3bf6e3bb33ba33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>38ac7939ec76e5de5a2c780bedced240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>d999320c61b095c9e2e2219fb192555f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>d1fff592dd22f14359fd2c4617549030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>1d1f3fd7d5af7281a2ea4c9efc0e21e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>a3af1880a88a2a754c782ccba47e945a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminant.html</anchorfile>
      <anchor>cedfc6575befb29b2b5e4a4b056c66ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DummyBasisSet</name>
    <filename>structqmcplusplus_1_1DummyBasisSet.html</filename>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1DummyBasisSet.html</anchorfile>
      <anchor>332bd28d34070555ef5ce4a418bec4b1</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1DummyBasisSet.html</anchorfile>
      <anchor>ef191cad54032fbfc184fd97658e678e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ElectronGasComplexOrbitalBuilder</name>
    <filename>classqmcplusplus_1_1ElectronGasComplexOrbitalBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ElectronGasComplexOrbitalBuilder</name>
      <anchorfile>classqmcplusplus_1_1ElectronGasComplexOrbitalBuilder.html</anchorfile>
      <anchor>005d885234fca39b25d0da547872f252</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ElectronGasComplexOrbitalBuilder.html</anchorfile>
      <anchor>0a08eea0c3fad255a823ea21704985b5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <class kind="struct">qmcplusplus::ElectronGasComplexOrbitalBuilder::EGOSet</class>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ElectronGasComplexOrbitalBuilder::EGOSet</name>
    <filename>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</filename>
    <member kind="typedef">
      <type>DummyBasisSet</type>
      <name>BasisSet_t</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>d42afe1a4a5ecba5235f765c95c1ffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EGOSet</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>1bcbfd5f32252e9408ca0ffe298a9664</anchor>
      <arglist>(const vector&lt; PosType &gt; &amp;k, const vector&lt; RealType &gt; &amp;k2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>e331a80f0b173d1dabd7c532a234c642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>c7863c3a551bd939e1372e868369469d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>cbe7b3111935a4ae2e5163b6476a64a0</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>db9a192d1b6f1497aa0e58b1a3bb46c1</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>db93e1d182357f91352efa739922d5c2</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>40ad22e3fe64ebf6852617242c634a0d</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>KptMax</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>e9cd9d6751021301aae182d3e128ba7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>K</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>d2617c3e7f244984fdee9a3bffaa444c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>mK2</name>
      <anchorfile>structqmcplusplus_1_1ElectronGasComplexOrbitalBuilder_1_1EGOSet.html</anchorfile>
      <anchor>07576da096ec976f39d1e50d591ffbaa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RealEGOSet</name>
    <filename>structqmcplusplus_1_1RealEGOSet.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>DummyBasisSet</type>
      <name>BasisSet_t</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>de72a375088de1614d136532b6112a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealEGOSet</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>17f0579737ba7c67cfbbbb28a8b3074a</anchor>
      <arglist>(const vector&lt; PosType &gt; &amp;k, const vector&lt; RealType &gt; &amp;k2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>985ef377cbc66cfc9c3d4010913d9821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>b310037d242273fa5d2ee08037b8c1ab</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>13a56e7b00d2fef7b24d9814d623ed7e</anchor>
      <arglist>(const PosType &amp;pos, int i)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>9dd84acb760acab85d9d7e49f69717dd</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>1b65c7bcb1bf35c8bc8a534695aab12b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>9c240363a02441657c7327269c1b6b97</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>142187bc5a5a2cdd929bf14deb6ad0ad</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>KptMax</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>f164b0b88cda0d585d27b028be726069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>kdotr</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>f7bdc0a8bd49a32a765e601505f52adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>K</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>f1d443323d3f120bae7fdec73c672670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>mK2</name>
      <anchorfile>structqmcplusplus_1_1RealEGOSet.html</anchorfile>
      <anchor>e747784f0799703f4e6ba8773c95affe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ElectronGasOrbitalBuilder</name>
    <filename>classqmcplusplus_1_1ElectronGasOrbitalBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ElectronGasOrbitalBuilder</name>
      <anchorfile>classqmcplusplus_1_1ElectronGasOrbitalBuilder.html</anchorfile>
      <anchor>869bb7c781f6e72242cf71f815aac3d7</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ElectronGasOrbitalBuilder.html</anchorfile>
      <anchor>7b728e316ec3070bbfd9d1ef8fac1ed0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HEGGrid</name>
    <filename>structqmcplusplus_1_1HEGGrid.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HEGGrid&lt; T, 3 &gt;</name>
    <filename>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>CrystalLattice&lt; T, 3 &gt;</type>
      <name>PL_t</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>2f7894aecc2414c7c1db70dd69cdf2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PL_t::SingleParticlePos_t</type>
      <name>PosType</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>9b15545189ae65cb3ace9d4b415fa6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HEGGrid</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>d61ff13c2f6eb51d67d1baff10ac9811</anchor>
      <arglist>(PL_t &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HEGGrid</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>b2f43459894724434f6e5db83be5d271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNC</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>08ef25cd665ba2a9dfbd22bfa8a8bd9e</anchor>
      <arglist>(int nup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortGrid</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>ac47c2d54c90b22e371f8a98f97e1388</anchor>
      <arglist>(int nc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>bbab4a5ab44fafe971acbf9e05aaf2c9</anchor>
      <arglist>(int nc, int nkpts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>b97a02e1b5c97df915283083de8e63e2</anchor>
      <arglist>(const PosType &amp;twistAngle)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumKptsHalf</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>888bd17492beff2605d8a02a7ea90567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>MaxKsq</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>fbae86772f3a66657d2ebcaf7470f180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PL_t &amp;</type>
      <name>Lattice</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>2b5c290935d0c36439c28349041c6bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, vector&lt; PosType &gt; * &gt;</type>
      <name>rs</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>1311b04a0129ea19d4946348072096fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>kpt</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>2b0aacf4c8c3b4c8cc904d683ac273cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>mk2</name>
      <anchorfile>structqmcplusplus_1_1HEGGrid_3_01T_00_013_01_4.html</anchorfile>
      <anchor>6e544a05eedf454e83d810ad664321fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantBase</name>
    <filename>classqmcplusplus_1_1DiracDeterminantBase.html</filename>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>SPOSetBase::IndexVector_t</type>
      <name>IndexVector_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>544fbda8e022d6c64c7c2bd9aaf34b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueVector_t</type>
      <name>ValueVector_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>781156d082135290a04fbadf229136ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::ValueMatrix_t</type>
      <name>ValueMatrix_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>21db378d2b4a24ae6857538ada20ec51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradVector_t</type>
      <name>GradVector_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>d32fae3b1072ba1adad9f36b476c41db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSetBase::GradMatrix_t</type>
      <name>GradMatrix_t</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>ede8f993a94acab7d8b0a01c4b0e1943</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantBase</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>858cb043cf96a030d1f362dca164edf8</anchor>
      <arglist>(SPOSetBasePtr const &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiracDeterminantBase</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>7e7d11ffcb0d0924a583ec9a777e3a7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantBase</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>db4d660013495bb42b0908ed58681b2f</anchor>
      <arglist>(const DiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>70473827448f3c741075a50cff9e48ab</anchor>
      <arglist>(const DiracDeterminantBase &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>rows</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>a37a16403fb783b1121a0a8169ae7ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>cols</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>0f61b2863521814d6487d428f9893c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>a94ace2cfbb1c0963333c5e1b6b3a8c2</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>13a01d7e07dbf22ea4212f892adeb902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>56190bf0af632206de698d550ac184b8</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>e153ec8cafe5e7d0e98785860be88305</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>dde1c9fbf622428584ac0611ebc0b012</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>bce37eaaf946902d9dc54515c7ae870c</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>7f1a459c2ef0306d0c081b36c919ee41</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>557e68a7ed27a315ecd8fdef858e2177</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>4ddfeab3d1fe182c2d81908a650f20ee</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>53f06435b752b07e10ae9e16ea3a4b76</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>2c7aa27ddf1238b17079ef02d5f80421</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>5d4c609bbdc92d1fd70b51244faefe83</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>156323f362bdf1a2edb6d627da9a78f6</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>9c5bf6ea33e908fbe086bdbd00d9314f</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>07f0de20bbbfdde78a0325f44a8ca78a</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>926bed3a8e65c25c490af49768e7fc49</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>fafd72c00b988a6db1e67f786ec0dd9c</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>5e89ed90bddb36b762184edcd8c7bbf1</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseRatioOnly</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>0a04eb2ceae88884afb0fad4955fab79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>4a6e5b7a5a7d0004d3218e977b0dae49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOrbitals</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>3a91a0108575b97abac796dd695da801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>81c13277e3f48acd99cb14b94d3581af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>9eeae77a59ba516f672a7b553eec0f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>050ecd77cad636ea0fa1cf6b3dcc9a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSetBasePtr</type>
      <name>Phi</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>463dcf32ca65b3cdbd1b3db84a553c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>0b9ddd43d93b07bbe313a7a0e6a7264b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>CurrentDet</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>4228e0166383e0bb29b109c0d2da1371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>41cd105622e5e0cb07a69297d05badd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiM_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>c72f36125c4efcd761db34a02b7fb022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>psiMinv</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>dafdda1718c426ca1ef40bb82d96999a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>b29f40ce206a9c1285881d0403297855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradMatrix_t</type>
      <name>dpsiM_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>92720c69194d64181ccde63ce598b27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>f94a88a6f030887a2674a227fb65734e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>d2psiM_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>1b78e6811cc0770c52270f6eaa223198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>psiV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>483aceb43326f83521cbf64df1517fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GradVector_t</type>
      <name>dpsiV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>cb4ebb98af60a61a9d7df60e73b9ee12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>d2psiV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>d10d1ca223789cc698ea29a1ccba57bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV1</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>259618b86a86350322acd58c4632706e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueVector_t</type>
      <name>workV2</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>0544e677fef1a95d7f85bcc8eb7d49d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ValueType &gt;</type>
      <name>WorkSpace</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>aec7d83a64ea3d74aa741f7d858f7c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; IndexType &gt;</type>
      <name>Pivot</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>327c4d4dd1e064a960456ec2fea8bac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>7b5f88a5de272ba3149d205761b0d390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>cumRatio</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>eb85a2a16970c57e60cb40434bb7ef50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>94e74c69b1dbed5c2bb38ed9121b8bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>1ab65981ef6840d0e8462a32d2277246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>c0d0124880d55ad1e1c7d8fee589ce7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdV</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>225db030d372599853054943b3d29688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>ed859132093af936bdf86e62f5e9eed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>98b2effaa2f5c6de57773ab0a75e7e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>522664515ab27d0f662b9d6bec95dcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantBase.html</anchorfile>
      <anchor>f9feb8ad7ae86985f9d2a5c2cad8bfe5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DiracDeterminantT</name>
    <filename>classqmcplusplus_1_1DiracDeterminantT.html</filename>
    <templarg>SPOSet</templarg>
    <base>qmcplusplus::DiracDeterminantBase</base>
    <member kind="function">
      <type></type>
      <name>DiracDeterminantT</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>f41db4ddeff06bfcc33ea7906c344675</anchor>
      <arglist>(SPOSet &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>d20452808ba8e9640dd11681c4884683</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>ad7bdc00f4b49fa82ad087527ca1b32f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>5816b6d303b79813521be2638d5fae73</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingleAll</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>d0f47cd0f13b57176ce44c2fdef8b00b</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>d2e756fc2baa7012cc08e3edc02fc5ca</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SPOSet &amp;</type>
      <name>Phi</name>
      <anchorfile>classqmcplusplus_1_1DiracDeterminantT.html</anchorfile>
      <anchor>ce62971c6b6555b981101994aa922ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SlaterDet</name>
    <filename>classqmcplusplus_1_1SlaterDet.html</filename>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>DiracDeterminantBase</type>
      <name>Determinant_t</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>9dfc14314b959829db085e097cd58ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterDet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>3f1d9827526221b17106f3c43f505451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterDet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>5d6b0330eeee2cbc350e85e251e95d7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>a1793cbad2ed78b4b43ac4da13a8a26d</anchor>
      <arglist>(Determinant_t *det)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>797fabc8e672c9f673c131aa33e8227b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>70b7900878fb398a63cb78290e33cd09</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>465e0ee329fb0a2b241651e8366c3b3f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>3bd84bba065c2477d8819e427f483746</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>12a3d0ed1945e7daaf41514341de2507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>cbb2f2143486e09c59a1f165f138bf9a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>d2c197ad4307a7b63ef08894f38dc11e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>e606962100bb0973e999194ecf3e736a</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>1a79640941a846b398e436a6844edb20</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>595e402a269a9b757702956862949dec</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>bf1f8721c533dc39f968263cdb8d689e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>2b34ad8f2246f67dd101fe573fe7760e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>93258affdd7c5cefc54e67935f1bb103</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>cfd015e971274471ff3c05f302830d5c</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>4c012634f880e289c2a1d05e0be70b94</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>cf965e31cf56a5180e7c9391cddf80bc</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>0dff69a79b70202144e40e55dbcbd167</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>5fe94895b6e3b35155072d4a406e0805</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>M</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>939ddcf0ed2cfeef2ac9033bd0961283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>DetID</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>facab298b8574659650dbe5fd7bdb59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Determinant_t * &gt;</type>
      <name>Dets</name>
      <anchorfile>classqmcplusplus_1_1SlaterDet.html</anchorfile>
      <anchor>cf5fcad9a22056cbb21ef9ddc91e24de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SlaterDetBuilder</name>
    <filename>classqmcplusplus_1_1SlaterDetBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>SlaterDet</type>
      <name>SlaterDeterminant_t</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>46b29c8a0c409a79240a4e5c93977515</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiracDeterminantBase</type>
      <name>Det_t</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>bfbb68d4dedba88858d1771996e1c358</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterDetBuilder</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>96259a64c4d060ff42fbc6d001c5744d</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>8fea5e523308663f9f4200362b639442</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>putDeterminant</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>6140046f322b05c6f9fadca410b4fadc</anchor>
      <arglist>(xmlNodePtr cur, int firstIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildSlaterDetermiant</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>147ed9f4777f546c9657f7210743c6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>buildMultiSlaterDetermiant</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>f330b0272940db89aeaba1bc372ccdd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>77f33427e7c1529c6968749f3f7bab66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPOSetBasePtr &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>35dee12daa603722a74eed8400dc9fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, Det_t * &gt;</type>
      <name>DetSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>05823009c57d2fb1fdf56453cd0f6304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; SlaterDeterminant_t * &gt;</type>
      <name>SlaterDetSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>96be4e89a14aa3d872c7b0a67cdabff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sdet_coeff</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>ae69a83c8775aa473a880dfc70639ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetFactory *</type>
      <name>myBasisSetFactory</name>
      <anchorfile>classqmcplusplus_1_1SlaterDetBuilder.html</anchorfile>
      <anchor>b36f6aac0d963f59878fa20fff3d2845</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GroupedOrbitalSet</name>
    <filename>structqmcplusplus_1_1GroupedOrbitalSet.html</filename>
    <templarg>OT</templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="typedef">
      <type>vector&lt; OT * &gt;</type>
      <name>SPOContainer_t</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>ed7cba417aea3a7502ac93ad4d7ff3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OT::value_type</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>01cdaa75fc80d9f5d8d44586560774a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GroupedOrbitalSet</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>335a1cd7a01ee30115e6a9f86d5a3f7e</anchor>
      <arglist>(int norbs=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>bfb60936c9451b7796550193058d1b4d</anchor>
      <arglist>(OT *afunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>72667f8c001f30e6a30443735e89b056</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>82ab2b6d966194993ba1ea18c59123e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>3070a793b7397be5821b1dc5497f636e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>bbbd7e774e6b98ffc956cf7290897e1d</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>795803015bce0001354db2bd4b9e7c36</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>b4185282b191e327359d256c35472c32</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>SPOContainer_t</type>
      <name>Phi</name>
      <anchorfile>structqmcplusplus_1_1GroupedOrbitalSet.html</anchorfile>
      <anchor>9deb8e50bbbd8a037e4ab7516a3e3d5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AnyConstraints</name>
    <filename>structqmcplusplus_1_1AnyConstraints.html</filename>
    <base>qmcplusplus::OrbitalConstraintsBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; RealType &gt;</type>
      <name>InFuncType</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>77aa4969a5d4437755451e4b4904e457</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineSingle&lt; RealType &gt;</type>
      <name>OutFuncType</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>0dda45e410fc0878ca526e996bdcdf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, BasisGroupType * &gt;</type>
      <name>BGContainerType</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>1bb6d39a8e446f942d4c509039d579a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnyConstraints</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>8df10410faa599906c5c5dfda65c8d37</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AnyConstraints</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>c87a417336165b8a569dd20437942a9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>d23384410124d89efad3afd9d8ab6866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>6d76e7159ee6001672ece2124a5670e3</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;outVars)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>736f9649acf8b8332c918f6c8f6ff7ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>8305b652554520097352d671b39157cd</anchor>
      <arglist>(ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>99f967d4a7674d684ca41fa230a29919</anchor>
      <arglist>(ComboOrbital *jcombo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>35e076d684856a9a8cd45416d255e57d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSingleBasisPerSpecies</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>5e561378c7f3921ff9a1aa6059f9c024</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisGroupType *</type>
      <name>createBasisGroup</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>ac395b41330e978c3c469a622b40f38b</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;elementType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2BasisGroup</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>c2cf995bd8ccbd33df929170acdb8fb1</anchor>
      <arglist>(BasisGroupType *curBG, xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>92b0319e229dfaa2211ff274a5c64fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BGContainerType</type>
      <name>BasisGroups</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints.html</anchorfile>
      <anchor>c95806cd487dc9189fa95b6c3c94ba53</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">qmcplusplus::AnyConstraints::BasisGroupType</class>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AnyConstraints::BasisGroupType</name>
    <filename>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</filename>
    <member kind="function">
      <type></type>
      <name>BasisGroupType</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</anchorfile>
      <anchor>6181a8091457d6dc0f2348b5f9436fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGrid</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</anchorfile>
      <anchor>f005a74880c2164c5f6d75449a7775ef</anchor>
      <arglist>(RealType rc, int npts)</arglist>
    </member>
    <member kind="variable">
      <type>InFuncType *</type>
      <name>In_</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</anchorfile>
      <anchor>cb85d1ba0200e71d7665a1c860ecd8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OutFuncType *</type>
      <name>Out_</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</anchorfile>
      <anchor>bf476d4f1fc23b998bcb0e2855a657c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</anchorfile>
      <anchor>467f7c07e2be9f7bc46304eb8d8ab805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>structqmcplusplus_1_1AnyConstraints_1_1BasisGroupType.html</anchorfile>
      <anchor>0ec6769cc2b1388c9c7847add759526e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CBSOBuilder</name>
    <filename>classqmcplusplus_1_1CBSOBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; RealType, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>c1bf8d2dab07a0c442c75059e726bc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineSingle&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>aea07e180f37bf986d87320d3d3fc1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>1c65c653e11374266d2277e779277c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CBSOBuilder</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>c53f3ff722511ca2d3b0934d9aaaf873</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>ee88b8fd2d6a8303640707223d3ebf3d</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>5babbfbda86f01e1f9f80dc2f9adc0a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>73ce525f501b88d1dafd65d29d22b6c8</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>387bc7445e4aa96bd2acdac1d821120d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>889c1724aa162bdfcea655bfe5b3b4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>d4517b56dfb2ea5e892b5c5e25916b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m_rcut</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>e4c1ff19ea89f2e88ce2a56512f8a6b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QuantumNumberType</type>
      <name>m_nlms</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>32bb23fe16e77d2556f9055546735279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>2bf0540749ba3fa970a6a7d1947ee13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>classqmcplusplus_1_1CBSOBuilder.html</anchorfile>
      <anchor>407c82f3212c321affd2bd3e77d47179</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CubicBsplineGroup</name>
    <filename>classqmcplusplus_1_1CubicBsplineGroup.html</filename>
    <templarg>T</templarg>
    <templarg>GRIDTYPE</templarg>
    <base>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;</type>
      <name>FNIN</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>a128956f5430966317c5ab9c65a28829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGroup&lt; T, GRIDTYPE &gt;</type>
      <name>ThisType</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>4592ef7fe454b5521325341d0d1c9e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;::point_type</type>
      <name>point_type</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>6f6d402db3fa42574623cc79d63262f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>39e64fdf412a0e9999716ff28920e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBsplineGrid&lt; T, GRIDTYPE, FIRSTDERIV_CONSTRAINTS &gt;::container_type</type>
      <name>container_type</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>1eddc7cd53fae4773c9ca922cc79c9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineGroup</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>682327af43b2bf1ecd98ded22eb55856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>5a6471fa2fc3d71b0310050e2ed83118</anchor>
      <arglist>(point_type x, point_type xinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateAll</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>950fd0d6791268ab844ad6b28e1109f2</anchor>
      <arglist>(point_type x, point_type xin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>1f14e34a1a23b32758133d7997f9a7d6</anchor>
      <arglist>(point_type start, point_type end, const container_type &amp;datain, bool closed, T yp1, T ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>0969d4c29cb882f331ec9a6052291628</anchor>
      <arglist>(FNIN *in_, point_type rmax, int npts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>c59758b216fd2f9040ca6f005b51009e</anchor>
      <arglist>(bool manage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSibling</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>d5f49d10716cf9cbcd011c288adb22ad</anchor>
      <arglist>(ThisType *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>bbd7ec247a9d30bd2fa4355d8ad1620d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>2038a37b96e1c36207d82cff4c01b3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>1f48f92f17328548850bc0dfa662de7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>c40fe89e9e2e1991d77322d76ab10b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValuesOnly</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>35e13da3a37ba04adcec768dbaab8b09</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getValues</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>8482929989dc906cba50d49ffbe43758</anchor>
      <arglist>(point_type x)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>485f18ae526b4722fdbd1a09fc61746a</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3, value_type &amp;dy, value_type &amp;d2y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>value_type</type>
      <name>interpolate</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>5eafe88bf5eaad377bfec96301ddf0e9</anchor>
      <arglist>(value_type p0, value_type p1, value_type p2, value_type p3)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>f22e73c66b3be44b9fa6ad84937fcf93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>numSiblings</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>f074d1df2e0dbb982ed81389d5ee19e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>OffSet</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>585382280bd0811505321b03e9b80bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>ecd05e96a7a7d3cd2a173a91ceb1fa0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>container_type</type>
      <name>P</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>b709592c1ea2139656ecbebf9146c12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ThisType * &gt;</type>
      <name>Siblings</name>
      <anchorfile>classqmcplusplus_1_1CubicBsplineGroup.html</anchorfile>
      <anchor>c1aaac4ae06e625fbe4130e9537e3d12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::JAABuilder</name>
    <filename>structqmcplusplus_1_1JAABuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>JAABuilder</name>
      <anchorfile>structqmcplusplus_1_1JAABuilder.html</anchorfile>
      <anchor>04ec0bcfe58ee13bfc2c699c788073ef</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1JAABuilder.html</anchorfile>
      <anchor>d4996483a5cf9432cb2ec14c6402a4c2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createJAA</name>
      <anchorfile>structqmcplusplus_1_1JAABuilder.html</anchorfile>
      <anchor>00139bb18aced0ee4cf0657b83f27479</anchor>
      <arglist>(xmlNodePtr cur, FN *dummy)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>structqmcplusplus_1_1JAABuilder.html</anchorfile>
      <anchor>58b94b6b5129d57973d35c60edbdcfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1JAABuilder.html</anchorfile>
      <anchor>d4d1e76afea9b58fb527a74eb6443f51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::JABBuilder</name>
    <filename>structqmcplusplus_1_1JABBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>JABBuilder</name>
      <anchorfile>structqmcplusplus_1_1JABBuilder.html</anchorfile>
      <anchor>d897a06dd475982f1c05d54d22bf1aac</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1JABBuilder.html</anchorfile>
      <anchor>85e279605a4a507e6fe072b102855e53</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createJAB</name>
      <anchorfile>structqmcplusplus_1_1JABBuilder.html</anchorfile>
      <anchor>a15486e405b9e45f391932afb171a556</anchor>
      <arglist>(xmlNodePtr cur, FN *dummy)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>structqmcplusplus_1_1JABBuilder.html</anchorfile>
      <anchor>7099356cc6792852724c45db76b1c637</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::JastrowBasisBuilder</name>
    <filename>classqmcplusplus_1_1JastrowBasisBuilder.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="function">
      <type></type>
      <name>JastrowBasisBuilder</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>6f0ed6f4d414e6fbef49a0a32ffe6cdd</anchor>
      <arglist>(ParticleSet &amp;els, ParticleSet &amp;ions, const string &amp;functype, bool usespline=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>e188e7e421d5ee02063aa77ba52e0e3d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>7f3848a24fc442eb237c91c4bf96d0c0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>createLocalizedBasisSet</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>f7fb1ef95536c1cb202ad06064bb7dc7</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>15e59c4ea9ed88c2df67c4249b9c534b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>45165291292afe8f02e75112d8b5e312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseSpline</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>b21c75a572b5a0a19f9b23694dbe8537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>FuncType</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>adafc427668419c3f0d39bc29167aae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, BasisSetBuilder * &gt;</type>
      <name>aoBuilders</name>
      <anchorfile>classqmcplusplus_1_1JastrowBasisBuilder.html</anchorfile>
      <anchor>a62cf0a206f2b847a893150534553e88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::JastrowBuilder</name>
    <filename>classqmcplusplus_1_1JastrowBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>nameOpt</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>aad70ec71294bd46bc9ee6ef62973ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>typeOpt</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>667d87a16ce3c6f8b24c18719250d040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>funcOpt</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>0dafbed61f8bc16bb8a55f98a7b631e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>spinOpt</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>ab6337e945fa2a6f22e9773d7f6200b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>transformOpt</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>302e4117a739aed2de8e6e6e561901fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>sourceOpt</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>0436dce5d11b75e7fd9020d0673a9835</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetOptions</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>f6b78c4270a61d71d229f5dff92f9451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addOneBody</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>dd03f3df6d44e3046c108605c34f990f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addTwoBody</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>2d6070a8ff87470aa3edb138787de2d3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addThreeBody</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>86b5820ef5b33993f895073cab538235</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JastrowBuilder</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>8aad43601d04bb1555fc8332f20f75ed</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>900de37e8c144efe41dc721f4f81635a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>afc78536e8f6c859082fdd0b3c5c433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>JastrowType</name>
      <anchorfile>classqmcplusplus_1_1JastrowBuilder.html</anchorfile>
      <anchor>e809e722f611ac9fd5e29ecd4683f8f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LRTwoBodyJastrow</name>
    <filename>classqmcplusplus_1_1LRTwoBodyJastrow.html</filename>
    <base>OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>LRTwoBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>ffd9530de5ad4ba33dc24cd6224a95c0</anchor>
      <arglist>(ParticleSet &amp;p, HandlerType *inhandler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>524114ef4ee544834fade528c1406650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>76015fdc48bb3d7a40d91f8659327125</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>b182010a9031f941dea90bf6737060c0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>fbda6e28b569032dfde1817ccec74244</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>8d5c3d0fbd18420dddb389aad123438f</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>05103ffcde6355ba1a660ad3c353b4e0</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>5d11d76ed42d2f78bc74dea2820c390a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>0c23b04e931ef56af4f2e8b4e034e93f</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>ca89ad46dc0158383db3e7a64c47124b</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>6a4f0ecf979e451b59c5e6fd118115a6</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>7f1ff1efb82d242c9fc3f6cb98ecd7c4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>a12f5362c1aaab648594efd263fd0e93</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>26816753d2aa22917b2f586ff5f970d1</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>c0bc285ec84792f14285b433f84b6103</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>5eac2adaeca674c2c34bf3de5466a383</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>838d5935b8258c73ec6e341c92180490</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk_0</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>343693ebd58f8a60cc1de8a949366909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk_1</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>668fc2e8f1061b8ec3c6cc0acf355770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>14e4c6ed76f9f04794a3623de66091e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>Fk_symm</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>79958f21dc24b381ad3d1adaf2cd6ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LRJastrowSingleton::LRHandlerType</type>
      <name>HandlerType</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>7549f4d37da1a1f804759e2a5a257dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NeedToRestore</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>f8687f7db738ecc84f0709e0f18e5a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>01ae98c9bfc5fba83f095bd9a88412f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumSpecies</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>cfbcb46cdf77f658a96c154f40167354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumKpts</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>cc42af8b6c8fe2c485ec3d981ebcbfd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>OneOverCellVolume</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>f995e4239625bbd4c8380d853bf0a882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Omega</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>2141f2c281032a21f180218ac8a5099b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>FourPiOmega</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>176bb62b21791e8b81fd7d88e6a1ecf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>OneOverOmega</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>e44ac2d3a162d0181b672104009ce1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>3c4eb99b771481229cc964127961b49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>NormConstant</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>b1cc674be863cfe3a9e4af71385d96d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>f0fca9eaa0d8d786f382b6dc980c991f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>02b5a465695f782c0c91607e4b9150d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradType</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>3351f32ff5dc803af4ca0c328b37fd14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>1b224e57bc2f0260e954bc88e7168391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>2ff82589451f182ffbc140ff7fb62423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>93856116b74cc6160158a7591a1fba89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>8b7717b00c6b7981871091551825dcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>4ef5298cd56848ca70a704ee0a06dbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>rokbyF</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>10a5d76b3e76cfce3b3ebb57559b0a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>Rhok</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>638819ffb418e652b50b543d2f9744da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>offU</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>09f69c51c3c058e105f2d3c4f762a501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>offd2U</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>ce1d3390672809c664d523be5edb272e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>offdU</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>13a84411d91310c949477e49bbc38315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StructFact *</type>
      <name>skRef</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>74d0db6d0cd7ebb7da69a04a522670e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandlerType *</type>
      <name>handler</name>
      <anchorfile>classqmcplusplus_1_1LRTwoBodyJastrow.html</anchorfile>
      <anchor>f336c56becc5dd9f333f3041337a2047</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ModPadeFunctor</name>
    <filename>structqmcplusplus_1_1ModPadeFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>988904391817fbe5974ef2786168564e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModPadeFunctor</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>b83c0fa09ababd57a6aa8158fb01d319</anchor>
      <arglist>(real_type a=-0.5, real_type b=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>3cd852bfe8209324c08f3241d40fdd18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>572ed0113670496d56893f23b5dca9b7</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>d57f7a47d972f8218f2fdf099697f1d1</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>ab24f997b4eda9e0b45f267128dbdd37</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>0d90861f23cdfd2e7226307e62c77ee1</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>fb4bf071728e2d13227d85c9b49e5150</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>8d5af0ccdced18ec591688a3bffa2559</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>d115189a7725a07b063c44886a84f0c2</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>80159cf6220826c5d686fb1dc617d664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>c89c4f092c1d3a05ceb456cc5039da08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Zeff</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>efb8a80640980a28a1790880d16cce9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Coeff</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>d6941bf0d02a8738353460476bddee10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>mAB</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>30abb7fd52e5834528c3a27dbbc4d7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>structqmcplusplus_1_1ModPadeFunctor.html</anchorfile>
      <anchor>9b9724e09a1d74fc644156dbf28948bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NoCuspFunctor</name>
    <filename>structqmcplusplus_1_1NoCuspFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>fa02c3fc3c04393ab212e62dc5884d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoCuspFunctor</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>8b6f7fb75f12b91cb5f7fd9936421d9a</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>cd7c8a43312f32b5812e094f78498513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>432dd4c244ad0b032b9aff9e24285c46</anchor>
      <arglist>(real_type a, real_type b)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>837ff49efc3315184a3513504e10a421</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>218211125b82a235f3d04da8f486ddcc</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>c6bcf6b8ed7cbe6ff74ff2fa20662954</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>c8fbdeac7122443304cefa927f247581</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>9aa6ba636ece9a68829a254deb87bb26</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>17c208a4bcd62b944120e1d26880268f</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>b1141c09fc0392acefb972450d8399c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>3ac3df306859b22577a889949a3f5f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB2</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>c32a5f2c6706a9e451944ae81c2aef45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>48e64cfde945538f70629b88c32628c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>structqmcplusplus_1_1NoCuspFunctor.html</anchorfile>
      <anchor>5d62b4c83a43db935c1a0e2cad07c8bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CutoffFunctor</name>
    <filename>structqmcplusplus_1_1CutoffFunctor.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>CutoffFunctor</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>ce8a0516ee6b2935bcf83622d0ff4ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CutoffFunctor</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>3e98f3b3738e5eb8efdcc21ae8acc8e7</anchor>
      <arglist>(T r1, T r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>658a6f8df6682a6af673ce5104148a1e</anchor>
      <arglist>(T r1, T r2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>7397ebebbfcb75fd2c449fe22dc1ecac</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>R1</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>9f2c313626863c47000a6b25b2779357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>R2</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>7f35a55ce4dfd60bc0e050cd2cceae3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>R12</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>39d0953a7267c3ec11e1c5f258896e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>pi</name>
      <anchorfile>structqmcplusplus_1_1CutoffFunctor.html</anchorfile>
      <anchor>0c8ea36c90ab3af6ea977775b8a72fb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumericalJastrow</name>
    <filename>structqmcplusplus_1_1NumericalJastrow.html</filename>
    <templarg>RT</templarg>
    <base>OptimizableFunctorBase&lt; RT &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; RT &gt;</type>
      <name>FNIN</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>d836a99927ef577de3ff6befbc5de1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FNIN::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>3535ff4cf1694d55ece1585c45a9455b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; real_type, real_type &gt;</type>
      <name>FNOUT</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>a1a0c55824e92efa4e3057136f6c5853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalJastrow</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>3fef1a27f1b07467316ea490cf96c55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInFunc</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>6b748121f35ae7b9762f9774c80c4cd7</anchor>
      <arglist>(FNIN *in_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutFunc</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>22b696474e600651497e1b805550b96f</anchor>
      <arglist>(FNOUT *out_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoff</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>35cd8380f304d48f2cbc63e95af5c5f3</anchor>
      <arglist>(real_type r1, real_type r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>05c0af3f786df11af3cfe79356b99175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>914cbc82468f8b16b390b74f4723f1ea</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>a1c538ea7183aeff23169a21313e147e</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>3c1a79b9e7d1798b95bc925b5a584264</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>5b79819d90648b15a8a4850b97225e10</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>9fd88022db30ff360f8b28039b9a99dd</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>70df33a7172e279a5dc7d5fa22d89761</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>dda93b0deced86e9524d9b88e2fff20c</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>aa76ef979aa70db077dc68fb5f31ba22</anchor>
      <arglist>(FNIN *in_, typename FNOUT::grid_type *agrid, real_type rcut)</arglist>
    </member>
    <member kind="variable">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>026f8b4537dcf41c6d6b57af05e91522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNOUT *</type>
      <name>OutFunc</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>aa12ed0670aa762140bc81dd6834b3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CutoffFunctor&lt; real_type &gt;</type>
      <name>Rcut</name>
      <anchorfile>structqmcplusplus_1_1NumericalJastrow.html</anchorfile>
      <anchor>6ddaddc8a0b96f5f234d295331df30fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneBodyJastrow</name>
    <filename>classqmcplusplus_1_1OneBodyJastrow.html</filename>
    <templarg>FT</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>0491b73763b5f625f70c5eab3c195830</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>b6d16c7392a7415ba28e4cd9bdbc8aa3</anchor>
      <arglist>(const ParticleSet &amp;centers, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>1092ff0c8843faaf6139a4c467b911ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>c4ecfde26c7833423c8220315b71c4aa</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>e4db194b04c46c8d01d87c3884ba2fb0</anchor>
      <arglist>(int source_type, FT *afunc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>c18b168f742195756f2ebf6e247299ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>1c5ffffd26c0610f51fb7e5f77d970c5</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>51d8e9c67e27ca9c5e93c2a08338b0cc</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>2569e71d874b14061ec91ee5f61cad27</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>d184a916e301cea76cf0466a555a7240</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>625bebad6343b2027f4039f354bb6cfb</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>3d2dac062559ad7bcbc865daf1a223b3</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>30f1db826bc6fbb68274af9cb42f40bd</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>29a7a8233f19a2538df69d6edd247a85</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>5202ba980b3696e1478c46709df6ac3a</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>bbac7cd742a8d9f2f86b42dc20b4aae6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>f13b48e2a8b1150844f4d82dc6a18961</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>42b01e64ea34a63d5fe9cbd59ee322b7</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>b8aed94756f0cadbd62e4e5c5f22d328</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>f34d9a0a9973221a561d95ce4cdb0ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>38e06882a4cd484c01adb62e9fc7958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>9b1791d4367d052c16bab5509d3bf8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>af0a5fa53ed8570b934ef235a3dcb727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>627717c1d8f4c5d1c1f97b20135567bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>650f10907a82bded1b95a9d2bb1c80a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>0da7f351e733dbe1ed31dbfcaf4e919c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>8db7719d32015a0d164b5dadda1bbe52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>0e328e1c51cb63b7f87aa1895d679356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>7a69a948f28a2a51319b06d98e81b8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Fs</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>f1995773e9811743f93416d673005773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Funique</name>
      <anchorfile>classqmcplusplus_1_1OneBodyJastrow.html</anchorfile>
      <anchor>087a6e315765a4a8131ba33293f328c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeConstraints</name>
    <filename>structqmcplusplus_1_1PadeConstraints.html</filename>
    <base>qmcplusplus::OrbitalConstraintsBase</base>
    <member kind="typedef">
      <type>PadeFunctor&lt; RealType &gt;</type>
      <name>FuncType</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>5d3a5598d71da5b3a2c0be2e230b433d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PadeConstraints</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>74351d42fc786b148c33e46fe7945fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeConstraints</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>81f437cf9cf677f325e38fca84b86d8b</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, bool nospin=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>7db83cb1e524ef582ff2ec31b15780ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>d7c95361167892b77257481a45976540</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;outVars)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>513b6111cde3a6e14fefab20dd6b0a30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>64d9395b4b7a8ebfec5c5c132faa8a90</anchor>
      <arglist>(ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>7c7ad694177fe2202aeafd9e67a62025</anchor>
      <arglist>(ComboOrbital *jcombo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>782adbae7ebd09961c40efaaec5cd5e7</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>0939f2a3b9f292bb53f6f25cdde7b3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>c3e4da5f7bbc9e82e84d676df443fde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>ac21b9711c7bf9189913f301b2fb1609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FuncType * &gt;</type>
      <name>FuncList</name>
      <anchorfile>structqmcplusplus_1_1PadeConstraints.html</anchorfile>
      <anchor>2292972d6ba78123d8fe300679aab9b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ScaledPadeConstraints</name>
    <filename>structqmcplusplus_1_1ScaledPadeConstraints.html</filename>
    <base>qmcplusplus::OrbitalConstraintsBase</base>
    <member kind="typedef">
      <type>ScaledPadeFunctor&lt; RealType &gt;</type>
      <name>FuncType</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>bd58144ae81a626e5251c45b7ac22db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaledPadeConstraints</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>b7350021278c64d9ca51718cc8dba89f</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, bool nospin=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScaledPadeConstraints</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>958a5c41efe9f5799b499786a746c750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>088db48066cca02b368f99087d3f2108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>e903fd28e6c3cd78745c563046425948</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;outVars)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>ab740971efba67819fe16700a3318473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>86c2bf286c86980a82fdd31d3c5161a8</anchor>
      <arglist>(ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>ebc43c3bc281cd5fffd41940811c0f8e</anchor>
      <arglist>(ComboOrbital *jcombo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>c4505ce087f57d6c2d3166bbc556f142</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>98c5e4edd450323fcc6f03ce39769aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>ef61a060d165561387b33f18ecba17aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>c6a0216a82bcd2a0b4674dab0b735451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>BID</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>595a5e25fbccdb13b25e2c5d6ffff3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>CID</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>850e78aca6153af3803e49bc40182dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FuncType * &gt;</type>
      <name>FuncList</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeConstraints.html</anchorfile>
      <anchor>8b0749021808d189918c8c4669a48d4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeFunctor</name>
    <filename>structqmcplusplus_1_1PadeFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>003179b6c9ec54f8d4eef180cb1c84ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeFunctor</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>1edbd97e5fd93e106a4664f79ed4a3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeFunctor</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>b5967e5a00c99739b018689c30a63fe5</anchor>
      <arglist>(real_type a, real_type b, real_type s=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>60093f2764f5697cf7828728bb5f01b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>74f14671b65c393b4dd10a4269d61080</anchor>
      <arglist>(real_type a, real_type b, real_type s=1.0)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>1a49e733d73fec98a34b5ff3da42576a</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>4782ea61355ad4f0b85804861b8f465f</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>c104fca5464df07e43bf6df1b2af891a</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>69fba0626ac665fb500fe274b3462d13</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>ba135642d6aa58e81c7b95bd131ff25f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>47ef46f97770475773cd231f8c84afdc</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>0f10296e5be7f3a6a7d7c4c8b374687b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B0</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>666b7226ed33a2e83a9c6bd094a587c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Scale</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>fe9b3f650a0f7ef2f4003ea2698d20bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>ce0d0508310c8ac870b876253f6c4bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>fdbacefb0fbede470b9169954a476719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>443b9cb3dd89f7919dcd0ac820cddf2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AoverB</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>7dd7ae6724c7ca97c789dc91a9e3cbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>8b05ede3d695a62eed51c5ce462b78fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>structqmcplusplus_1_1PadeFunctor.html</anchorfile>
      <anchor>ed31d1dfab9363ed7d74e14b6ca8e9b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Pade2ndOrderFunctor</name>
    <filename>structqmcplusplus_1_1Pade2ndOrderFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>d0508f5450d53bdcb10d7c14102d8fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pade2ndOrderFunctor</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>77c69ae939a0e9f98c787c5aeeb72621</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0, real_type c=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pade2ndOrderFunctor</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>87952842e4a4b303ffa10727a91c05a5</anchor>
      <arglist>(Pade2ndOrderFunctor&lt; T &gt; *func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>f414bda73164f575ccaaeb0a842f3528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>8c897834f7a6e1661f8ea5272eb143ec</anchor>
      <arglist>(real_type a, real_type b, real_type c)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>58bd0feef0de7582eada32e0e697312b</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>e80c0c70ac4ac8006bb0d2f634131d05</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>f0bd29f4e9eed3ff37c7364bba6c2281</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>4cb7cee7a35f73b1e45d172b73949713</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>95754e5dd0452e35d1e1c5574248055d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>300092de495d40ad3fd9d425a032bc49</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>2bf30cf8b4f672a7e9daff6643f983ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>fafd3daca15fe1c84153642c40d2e567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>df90dbe6f1595d7f87789238a0f69381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C2</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>eee0f199a367ef03f6c39f2b1460f2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_A</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>781c87b193ee28f55a64457c386bd2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_B</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>50198893687bfe1b6b04b5bb9cfc8583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ID_C</name>
      <anchorfile>structqmcplusplus_1_1Pade2ndOrderFunctor.html</anchorfile>
      <anchor>4f37895cb4bd3b7a0b5f57a87a84b186</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ScaledPadeFunctor</name>
    <filename>structqmcplusplus_1_1ScaledPadeFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>1ef575b1be3a372b74fc580d49be8d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaledPadeFunctor</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>ad2c36194b6b0d1d45b7ecef5a8443d9</anchor>
      <arglist>(real_type a=1.0, real_type b=1.0, real_type c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>e4dfb3013f3aca68342c937f0c860ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>d983a4ca2041f73f92c42da9e1657a68</anchor>
      <arglist>(real_type a, real_type b, real_type c)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>3eb80e35139ddd7e5409ff56f45ee67a</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>1390964a2c119c3912f427adbc89140a</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>4d292c46d7a83ef1e0cd4ee411ebb488</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>716beb71284d9683f126765487f6a4d2</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>70c20117972fff513e4381cb6b77e0f4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>fd3f63681ef0e9f21e54247fea7044f7</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>22ac6438f28da68813a871452e031077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>12e6585c6e7f25430f9c2ed07918bed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>cba800809c3601eca5d32a0835603aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverC</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>675d77d86adc434334b257b77059e968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>structqmcplusplus_1_1ScaledPadeFunctor.html</anchorfile>
      <anchor>98b46f4fb9695e0f9171ecfc73ff8a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PolarizedJastrow</name>
    <filename>classqmcplusplus_1_1PolarizedJastrow.html</filename>
    <base>OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>PolarizedJastrow</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>f22659e6ed245a87e64bd602424dc9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolarizedJastrow</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>5088d20153b5717a7a02e0eeb5c6a90a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>1e1fd9313827b6c61ee139717560736d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>02913638fd391cfe6712c569aec387e6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>1aa1b4f893bff593c298a0a05df2d70c</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>7dfaca6050512d40735ad2c178ec8976</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>0963bd78b5a506099cbc8e20a79b912b</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>559394b020dcc09a645526322f8dd7a7</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>0d2fe64ae75914546b4261893e06d34c</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>1e346fdb450624d2bc5bec95a783684a</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>378f9dd06237bbb76377df5f7e857616</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>f6d3582cbef065d7889a3dd5668ce094</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>8c227c29d3bb3312a8ca6071008cf358</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>2587eb11b9facc15539d581cc4db9786</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>0629953886c9e5b772e890eda92a61cd</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>afe3195f483d696993df1652ad5c1317</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a37f16b6ae2293d8652fbdb5cf991cc8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>16e24679e427566573121cba7cdb3e94</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>26e49e2598d350843552580e0043c97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alpha</name>
      <anchorfile>classqmcplusplus_1_1PolarizedJastrow.html</anchorfile>
      <anchor>26ae30d39e8b495397eb79fbfb80d4d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPAConstraints</name>
    <filename>structqmcplusplus_1_1RPAConstraints.html</filename>
    <base>qmcplusplus::OrbitalConstraintsBase</base>
    <member kind="typedef">
      <type>RPAJastrow&lt; RealType &gt;</type>
      <name>FuncType</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>59cd309bae38b449ac3303db776ae06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RPAConstraints</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>0baa31399061c6e4ad2a58c523570da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAConstraints</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>28d4e16718f19dac5e4cde9996c3a8c7</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, bool nospin=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>a4aaa26a3b6ac2ae87673dbf3623c517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>42956955c62a0c880f9b20e33e83b154</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;outVars)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>96f66686b9a0802ed2ed787d50f109b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>595a34e68e3c30b4374b1e19bc93a917</anchor>
      <arglist>(ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>f7863f63064231d5ad5644bf4fba586e</anchor>
      <arglist>(ComboOrbital *jcombo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>9c3a174ec5841dec1d279c736f87e56f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>3a837e99f661b4b48c84a73bf61e0f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>7d52e586b42588b189af12db2deae223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>758d25219592259d0f666c8f45366180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FuncType * &gt;</type>
      <name>FuncList</name>
      <anchorfile>structqmcplusplus_1_1RPAConstraints.html</anchorfile>
      <anchor>cbf8186bdd78650280daea9aab7e75d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPAPBCConstraints</name>
    <filename>structqmcplusplus_1_1RPAPBCConstraints.html</filename>
    <base>qmcplusplus::OrbitalConstraintsBase</base>
    <member kind="typedef">
      <type>LRJastrowSingleton::LRHandlerType</type>
      <name>HandlerType</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>cb1a2c7dfe532bfe935d1179b769b1ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAPBCConstraints</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>1b7d4181f9a959435d31a8c1cf2fa1ce</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, bool nospin=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RPAPBCConstraints</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>8bf65b123c37e5ac2b537b9a85eed1c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>5c108594dae3e78cae78a61b6aa582bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>6b43bc6f774abdea71ed1e93a379e16c</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;outVars)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>999cd0c76d9334827d27732f46b1ef54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>075b2bcbfca16c7d1c38976454f7fdeb</anchor>
      <arglist>(ParticleSet &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>f395d21cb32e940a2b7a1100f6238b6c</anchor>
      <arglist>(ComboOrbital *jcombo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>edc2cc5175b3badf7db11a0b1f866807</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createSRTwoBody</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>f0d6eb2bb01ee57891764ff6a6868b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OrbitalBase *</type>
      <name>createLRTwoBody</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>debbe390d4e0bcaadd1a570f6c7fd3a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>IgnoreSpin</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>d0f5960e11b5530b154fd412080cc6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rs</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>c66db12379dad41101199c6f380ce410</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID</name>
      <anchorfile>structqmcplusplus_1_1RPAPBCConstraints.html</anchorfile>
      <anchor>a13112e15db1e0934c5a9ef255230827</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ShortRangePartAdapter</name>
    <filename>structqmcplusplus_1_1ShortRangePartAdapter.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>4dfd2e02bcf43769ccab6344de207039</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShortRangePartAdapter</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>e4de9f21c7c9f964e04706ca3c31a8b2</anchor>
      <arglist>(HandlerType *inhandler)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>65d4855368f358f49ce635df149e30e4</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>2cf2f1b83658b026211626c0e9357679</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>c50104e4015aa18140b60201ba909b26</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>86feae2496311e72454e0fb52bfb90ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>9fcb4206c604e17b49601ab38e828a89</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>9a17aa7657a19cfe69caa611b776ee0f</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LRJastrowSingleton::LRHandlerType</type>
      <name>HandlerType</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>aad181e87a0f54a0400bd6be6e701330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HandlerType *</type>
      <name>handler</name>
      <anchorfile>structqmcplusplus_1_1ShortRangePartAdapter.html</anchorfile>
      <anchor>61aaa131bfd1ce812e9985cdb618b27b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RPAJastrow</name>
    <filename>structqmcplusplus_1_1RPAJastrow.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>63b8bf4180d5f0ee0aa48ea209c04ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAJastrow</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>0253e268c8309898420c5e049c07bf37</anchor>
      <arglist>(bool samespin=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPAJastrow</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>cb1efcfd490a8bbbc2ea79a3ee9e396f</anchor>
      <arglist>(RPAJastrow&lt; T &gt; *func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>dc90f6378b565536a0fb10ba1a644591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>de4984c537bb1fe1f9d4aa7d03f9f914</anchor>
      <arglist>(real_type a)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>51dc397dfffc2486b87a46e792f76f6f</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>a45087734226fb3f0c0bbefa11ad17e9</anchor>
      <arglist>(real_type r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>a9ec62a964256d6e9c36cc10a28ca433</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>3d1f464ce7906eb32f2490fc6b9caeab</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>d25a0aa03fec215bc02e6788b400e31f</anchor>
      <arglist>(real_type n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>4af3ab6dbe246ecaa374fcafdefb3276</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>fbd8fd30973091cffb73fa27752843c1</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SameSpin</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>bf2c568280957831634c9c71b5ba63f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>b5081283f8018ea8bbb5762022fd11ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>1b9313b59cc176ff69d5d5bb2371d27d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>06a0581a6260b9214c3da0b0a7f75752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>ABB</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>f15360e03501e79a4a61b5873a455651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_A</name>
      <anchorfile>structqmcplusplus_1_1RPAJastrow.html</anchorfile>
      <anchor>379b57e76dc618fdef90bd82d479fca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CubicBsplineSingle</name>
    <filename>structqmcplusplus_1_1CubicBsplineSingle.html</filename>
    <templarg>RT</templarg>
    <base>OptimizableFunctorBase&lt; RT &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; RT &gt;</type>
      <name>FNIN</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>5789fb55470692502925fc79a1808264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FNIN::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>996076a40dc936a5954bd723de56311f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBspline&lt; RT, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>FNOUT</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>3124df0f2adc9df83b6f366b7d17c391</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; real_type &gt;</type>
      <name>grid_type</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>441bfcf2664326f0762d6632e9851c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineSingle</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>1408332c1e8c1b311ddf8e7277431b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineSingle</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>911327a8b8b1794cc305d45cb44a3a99</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBsplineSingle</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>333d2b79d08dee667faa64005d71ec0b</anchor>
      <arglist>(FNIN *in_, real_type rc, int npts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>d0f65556af2ce76b4990ab503d473689</anchor>
      <arglist>(FNIN *in_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>a76352cf824fdc4d79a30ecd4a2d0f69</anchor>
      <arglist>(FNOUT *out_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>c144f71e811485073ac3dd44f6d43cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>899455716e876cc96d5d116e9368975a</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>4ee7d17a19f3e8292dbb901d85f66ac8</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>445096c5a7764e1ff2c63b1457e4ff9b</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluateAll</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>6ea96d8dc3d870013babc4cb9115e134</anchor>
      <arglist>(real_type r, real_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>c0842ab77bd2c9781604f49d81f938c2</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>af7a0ba646e5957d91acbbfcfe614bbf</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>fc7023d4096c463f76f2366b24e269fa</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>41e1aba1faed103f5901afd6db47700c</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>b884dc2c6b1c14d67f9d381d1d3a0777</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>eb7061678e7af8753520b5df693660b7</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>827cffbe13e175bb1815a14589b7f4b0</anchor>
      <arglist>(FNIN *in_, real_type rmax, int npts)</arglist>
    </member>
    <member kind="variable">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>0cc493704c9c5b4ec7fbbb1f08601f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNOUT *</type>
      <name>OutFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>562a27e193e964a114ad7bc39acbd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>c65a7e409d397361796f859b2ca3b0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>3a8f805ce784bd7d88e9f0d8af0b9838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>GridDelta</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>e831fa834aec9948a3da7f48933f7d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Y</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>ff6e52cbd1c53e577fb9782d6f21fa36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>dY</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>43052ed38a1cef36610e983f8835ac9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>d2Y</name>
      <anchorfile>structqmcplusplus_1_1CubicBsplineSingle.html</anchorfile>
      <anchor>b75ecab51c4743b673c74118c679e83b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CubicSplineBasisSet</name>
    <filename>structqmcplusplus_1_1CubicSplineBasisSet.html</filename>
    <templarg>RT</templarg>
    <base>OptimizableFunctorBase&lt; RT &gt;</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; RT &gt;</type>
      <name>FNIN</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>e11c65d392fa4fed14ff8267cb2e5bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FNIN::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>85afacce8bbbeab0e65d0fd0854371b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBspline&lt; RT, LINEAR_1DGRID, FIRSTDERIV_CONSTRAINTS &gt;</type>
      <name>FNOUT</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>abe83263c86415be6b8dc8a98eecb9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; real_type &gt;</type>
      <name>grid_type</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>4ae1472ed33caa56e4c1942546b4c44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineBasisSet</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>311442c13aabebd878bce550dedc1dbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSplineBasisSet</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>cadcc3c338e42098d05a068cf2fd5973</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>316634619ddd8cdb9b727ba4d8f0589b</anchor>
      <arglist>(FNIN *in_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>a47aad1856aac6e908048c03bfac13b8</anchor>
      <arglist>(FNOUT *out_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>4766abdcf86aef47a6c76dae5260cf2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>d657dda4b8f5e6ffe0a95d2bc8a95052</anchor>
      <arglist>(real_type r, real_type &amp;dudr, real_type &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>e3a4921c62bd23c08dbbe5b8bffdba16</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>1b68268cadddb0e5a665d56414051a73</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>66f765a8bc5533aef3ca6d27eb926f14</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>0e7c7ca990b0c2fbaf89d592912ab72b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>ba847d4dc9f2ef362fdf5175c5b75d6a</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>12f0d6b6b461a36d20273df29624a999</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>d13c730fffcebdbb30ca8dc431e70270</anchor>
      <arglist>(FNIN *in_, grid_type *agrid)</arglist>
    </member>
    <member kind="variable">
      <type>FNIN *</type>
      <name>InFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>fca6ee4fd3ad3c6e6d349eec7157d083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FNOUT *</type>
      <name>OutFunc</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>a0643f44a609b45bf8e10a5b46f2beac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGridPoints</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>b87befb49951e93474dd42f956fa5004</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>b5e27e60cd9746e8670588e4f7787775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>GridDelta</name>
      <anchorfile>structqmcplusplus_1_1CubicSplineBasisSet.html</anchorfile>
      <anchor>c6a34c9a3a495f208700b3bc840c0725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyGeminal</name>
    <filename>classqmcplusplus_1_1ThreeBodyGeminal.html</filename>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>BasisSetBase</type>
      <name>BasisSetType</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>b5c855303be59100714358b4a3618079</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeBodyGeminal</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>32fe3867639cb2c72ee626e7fd11c941</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeBodyGeminal</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>c817fb4f299a544fe765e6d519ee5a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>7f41b79039577bbe517058bc312d74d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>27b361400cba33f77147e370e956ed7a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>5f482f6455928b12881817b8cde6efe1</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>703d83d170726b8aaaaf2c238c86b761</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>4d334a65008f9c9dd18cc0fd65a2cdde</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>1c4de4b351c54e9054829046ff37b17e</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>4661e5de82143dabe4da12044cb4235e</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>d8f1397df92a184499585fb42142d8a5</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>a26454bb94622501684b3d6a2b329ac4</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>1edd1a1931dffd4c728dc70929342cf5</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>d35f8e8132daa2f14cd3e77177e658ec</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>61c2c46156a02e7c75601e595cb58fdb</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>6489ca8394adc04e6f503ffc18f4f8d5</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>d1a113f2517dbca851ca62dbaef7b9ba</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>75fa35306165ef9608d77e2176a60467</anchor>
      <arglist>(BasisSetType *abasis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>91ceb00e0cc88e2411d48cfd711be1c3</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;varlist)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>2d041d77f7eefd54c47cb89c1937db4d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>b164350e48bd890a774b0c3363b65fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>9dda948d9a8b6c8795e3cf4e718a0937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>e80f11cba317c81538a84255a8298801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>CenterRef</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>b21b5ced89b81b891c22f005a869babb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>diffVal</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>b304857a4ee65647d70ce72b50ddf6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Y</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>bd0f104d55a1c0520960cf20421a115f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; GradType &gt;</type>
      <name>dY</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>5abd82abceafebfc7bfb16cb4f66a891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>d2Y</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>640da62c4d555d4006adcf089557ff56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>V</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>6ecba8af6aad0f584bf13c4740793563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Lambda</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>525558e580ec7afcf05aadcfe9126306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>Uk</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>7bbf9c19a644e863eb08c512b7e39d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; GradType &gt;</type>
      <name>dUk</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>3779d403a5455ccbe88e8a7464b86a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>d2Uk</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>95d130107c77a841614e937f6f6f4bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ValueType &gt;</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>8efcf02a81774b89c26538bc4161c223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ValueType &gt;</type>
      <name>tLap</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>8ce4bd1d2b3b1d16f709ae223094d0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; GradType &gt;</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>f51f84a78448324792b3e5e1f2012171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; GradType &gt;</type>
      <name>tGrad</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>b422d3f740ef3246ccea71c54e946404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ValueType &gt;</type>
      <name>curV</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>9948087f65be8801b4dbef59d1b9c1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ValueType &gt;</type>
      <name>delV</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>8c0403aeced759a9939f34716f9f87a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; ValueType &gt;</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>7dec72f201547824c84395c7d4385dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdY</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>5bb8f22c88c9879304f3d0857f5151c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdY</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>a4f4671903a4b07ec0acc757328c7c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfgU</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>39dd8726359c04de8c444a48371cf2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfgU</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>fdc99a44f159ec2440f0a3b306563ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>GeminalBasis</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminal.html</anchorfile>
      <anchor>dad54960f993d81f279b0e817b4c681d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyGeminalBuilder</name>
    <filename>classqmcplusplus_1_1ThreeBodyGeminalBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ThreeBodyGeminalBuilder</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminalBuilder.html</anchorfile>
      <anchor>e064250af136815e84507c1ca5cba1c2</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminalBuilder.html</anchorfile>
      <anchor>b058444d82afc290bf89f0ac04b249d4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyGeminalBuilder.html</anchorfile>
      <anchor>7fddfe10bbfe99bb34240aa008e0e6e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyPade</name>
    <filename>classqmcplusplus_1_1ThreeBodyPade.html</filename>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>9c99735bc54927f50133c84db4f88a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LoadC</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>b250b28dabae2c97a807d7aae463d127</anchor>
      <arglist>(int k, int m, int n, int o, double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InitC</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>5586ded2318ed0e805accb4b0b7469f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeBodyPade</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>f4e670bb5bf840585049aedb19b79654</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeBodyPade</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>48f5114fc9cc123eff32934e6b9eb483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>e37a6c2d75ab28142ad559387b643fd8</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>3f9b700f271419fa4a825f54de6d25c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>Delta</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>b3e634d18f27f6b28d833eca21d12797</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>fbe3d4958a270c35df55cd7cf73c26e9</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>faecbd9d6bc7b7a65cabf0d780a7e574</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>ce9e585d73d86cfa397cf1182b2d35d2</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>a25c8fa6d0b4dbb824d5749a3b5a61ff</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>58bea2069c7416794b911871c9d08cd2</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>b7b6b4ff49586af1108e6af8b516c966</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>1c327f5c8a9407718208930be9668e43</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>9a6aa12bd01a1135b96b6450a8335bf8</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>242b34118a682c255438b913a3064639</anchor>
      <arglist>(int source_type, FT *afunc)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>dcd07deae21dd98c11776116bc60b480</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>353c16a2b93d3524dd6bdefac6630323</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>3efa998fa80c5d2a4c2af11527a74011</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>499858196c60535a9ab7165b2b02e534</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>fe52d4420ad13294d4d87c00acd750d3</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>4f80fdc5c50bfb8c27a86bf76a3b98e5</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>int</type>
      <name>FT</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>4fef7c52688ecbf63fdaf39b9836b8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>9d7b16ced6821324ba826580eadcb769</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>ee_table</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>158d42ba68fedf7a5e9ff2a62be7c7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>8c732b13a8cf949709b6e8e54bbbdf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>f11a38aad79c9124749929ffcac7db46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradType</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>d8be68f7807c3b36ed0b10b43319f5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>be61334258d95d2bb746ab9b2dea4f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>3593d009970320297c0dc6d653c4499a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>e88f7195cf94aabf7900e6c7ba77445c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>4abf6cb037d366bb778a6bfe361cbc37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>0ab48f6b0d7234485e97b2258381ccf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; FT * &gt;</type>
      <name>Fs</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>931059ea9b71090874a28fa40ec5a956</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Coeff &gt;</type>
      <name>C</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPade.html</anchorfile>
      <anchor>de60559d08a51b537af82c93670f351e</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">qmcplusplus::ThreeBodyPade::Coeff</class>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ThreeBodyPade::Coeff</name>
    <filename>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</filename>
    <member kind="function">
      <type></type>
      <name>Coeff</name>
      <anchorfile>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</anchorfile>
      <anchor>cc0071166abde7b8cb537728fcadcc95</anchor>
      <arglist>(int m0, int n0, int o0, ValueType c0, ValueType d0)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m</name>
      <anchorfile>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</anchorfile>
      <anchor>41ff69eb02c2aa1d3ecd651f74a21973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</anchorfile>
      <anchor>0f9c0f63718c8a5a89aa4c8986f2ebb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>o</name>
      <anchorfile>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</anchorfile>
      <anchor>3fae0b2bece2d22000aca3508522c563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>c</name>
      <anchorfile>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</anchorfile>
      <anchor>ef5e1b9ed0660abeb8f4e1ab8cb9d67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>d</name>
      <anchorfile>structqmcplusplus_1_1ThreeBodyPade_1_1Coeff.html</anchorfile>
      <anchor>61446230c2af16240585192b9ba798fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeBodyPadeBuilder</name>
    <filename>classqmcplusplus_1_1ThreeBodyPadeBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>ThreeBodyPadeBuilder</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPadeBuilder.html</anchorfile>
      <anchor>c72ce63f4d2aefeabc113e70f236701e</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPadeBuilder.html</anchorfile>
      <anchor>c48c95a1a29ba0c8cd4ee5d116d2b7e0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ThreeBodyPade *</type>
      <name>J3</name>
      <anchorfile>classqmcplusplus_1_1ThreeBodyPadeBuilder.html</anchorfile>
      <anchor>c5ce2e6b1f0cff3c09e7f709a84a5ed3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TruncatedPadeFunctor</name>
    <filename>structqmcplusplus_1_1TruncatedPadeFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;</type>
      <name>ThisBaseType</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>2f114dfdc0fe7136fbd884461bda8d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>768f9f4adfb77b5ee085e0ca86d39f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TruncatedPadeFunctor</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>68822d96ff35bf9c80edca52944b18d7</anchor>
      <arglist>(real_type a=-0.5, ThisBaseType *fin=0, real_type rmax=10)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>8b0565589d9d23a196ebf6ffd824662b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>ff356cefd225ad8a38ba6b7942a740ca</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>cc53377b86bfa79668078584a4523bde</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>f9bb81a49c800c8e2ae33a77e42d26bc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>dbaac825ae605a0dd6ea042f36f1a872</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>A</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>88daea25189535540de629adb7e4738f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>5401816340be61cdb567a712397216a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AB</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>55220ab2ecb72c63c2707db41c0402f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B2</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>76a51e9d59a34f21312120bdfd64dbe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>AoverB</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>723931f3450c68c1b4546c23d292b9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>946bb1dd618a5eb418ff72c310a4fb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rmax</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>1b8397e70c46226ea4fea6aa3fa934e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OffSet</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>4bb95e750793abd22e3cff3121134312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ThisBaseType *</type>
      <name>inFunc</name>
      <anchorfile>structqmcplusplus_1_1TruncatedPadeFunctor.html</anchorfile>
      <anchor>3c2668f845f0644e5ea5b1f4cc4796c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrow</name>
    <filename>classqmcplusplus_1_1TwoBodyJastrow.html</filename>
    <templarg>FT</templarg>
    <templarg>SharedFunction</templarg>
    <base>OrbitalBase</base>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrow&lt; FT, false &gt;</name>
    <filename>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</filename>
    <templarg>FT</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>f2f4b8f2df89498f083d15e296dc2a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>6a2f31143aa69934ad83b181fecda754</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>b9141e81dfec4ddda7c67c848931f049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>3eb7eeee66123e5c89a466cf5774564b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a4a762325e0cad7f126add21a9859593</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>e2d8c953b56dd68a06cc10cffc2337d4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>12dcd76b5cf6214d9640855ceee30265</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>c164fc708946537a223d7554ffe37d93</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>81a1c9ed30ee972cdbdb044e563535cb</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>508cb5317e281f51763de29a48a39c09</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>7d8458dd563b078a70f1661a1d77a2bc</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>b462914e08a174880629ea4ac3e918e2</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>74233d0ea5c372a57104fb0329433fce</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>9b4dce8b8003a13c490bd7489a10d9e6</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>b43c80bb6797200986470cd119553ae8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>7656f9b92e5fbdd36c5c4ed42105a8e5</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>1008df7084fee29316600b5f51ba0b56</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>b1e001804c1cc0ecbb8e3aaa5d314c03</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>8b5e48a2c7498347d5d0a0a463d555ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>cfd08e1fb71442fb72f6963a1d24ffd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>af412920928b6a90767c4e4fbff73c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>fea0d2100ac6b25a0a8a3e08c8151680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffVal</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>f9a6c44e30618b107d4882aba7a0e26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffValSum</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>f448557046b283fd11a954601be8d2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>7d89cd2782cd545d04b6944f408a9098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>71eaa647b6a97545d37df7877d9e0fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>aeaa3d3fcece07931bd0ea4985673581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>afe93ebbfed529d2f75fe066591d8128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>7d77cfccb1fa0852fea94e6aa0c5927a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a5a3b3b471ae3bbf3b0e9f82a0427f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>576a92e94443bf92ae23f74667757a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a92e407bf5fe71368f25be55caa74fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>20b13a940161b62a7f8dcc993aac2afa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrow&lt; FT, true &gt;</name>
    <filename>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</filename>
    <templarg>FT</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>36f20f00c6297ca4db475dc74a9e62eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>fb235baed2387cdbecac82ac2bdeb1e3</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrow</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>2fbf2b34b3827946d6977ae205ac5b4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>ca530ce16a58226b5211e6134d35e389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>81f064afb5fcc0e06f6245a79ead17e8</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>e2c0ff7a8b881b2bc755891cf70e2a8c</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>1fbcd4330cef089c56b78301b646922c</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>f21e53b4814bd0a5730fbcfe9fb45d19</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>89db8baec22157ae2e048c1e7eb9d721</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>fb86c2e99fd9e0b77caa13ca6762555b</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>56420d8d9b0985b91ebacf192e504e2c</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>52de290328f5a89f25f37c34f951c5fe</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>007e364ef12cdb0309bab53c3857e4c6</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>3f1b07d24e25f7b84a5ef6f53ec11432</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>826bf252586595e0bbdbc34476dd88aa</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>f203598f57944a703d175efedb175f03</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>ba79caee96685d358305931c71de2901</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>0332d5850ebec0a6bb16389edc00ade3</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>FT</type>
      <name>F</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>7903c40ba8c47b50ebc928200d115bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>34d055321a3067f4632213125ed57d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>736fe80843050ece8d644d8f7618c406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>e8cfbf71802e2c41631b2d0df15a9286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffVal</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>0400b57c58a8f0e75e5b5c67b69c45ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffValSum</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>90653e07e2ffa2b3169ee9dad307b275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>03fb3dea54e2b10b9a6ddb2ea26079d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>d5bdfcb7a51a22e408b4acb483c0cdb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>9b9d524effeb8f22655cc923a4d8b497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>8576ddc1249b5233dacc73da29370324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>7f3082fae9f5243f8bd29d33fcbdb823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>c775528da1c8700c75ee88bf4239c7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>f306aedc1d3a2d782de44d7a6042e44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>7ee27cedbb19c2771534edd85e51a618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TwoBodyJastrowOrbital</name>
    <filename>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</filename>
    <templarg>FT</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>793ffc7a23fe9bae816eebf1f048a630</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrowOrbital</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>1165ca81d9f3d3debe5f5f75b30197cb</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrowOrbital</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>e07d82010839a3396add432650e4ee2f</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrowOrbital</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>50f7d2ec396706cd8e7b8404d779f9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>7724e6c8c29c66b00c605af2154f75f6</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>ad6122eeba121f7000bc08192b81a339</anchor>
      <arglist>(const string &amp;aname, FT *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>4da87cd2f1e77445fcb4e975a905f01d</anchor>
      <arglist>(std::map&lt; std::string, FT * &gt; &amp;j2unique)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>63b6a854a885a11b638b4f118602c624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFunc</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>c4a87fc4051d9d82a4c66ac79c1dcdc3</anchor>
      <arglist>(FT *afunc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>19130c0c697a3267588649ad75eecc5b</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>7e4bb93bd329cabed5695930cdd992b9</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>269b9e48241e1c58e0420d81cd51300e</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>cb69ea82412d97c1bc4297dbdfad6379</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>c4c29568faeec7db69d0fe9a64e79ce5</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>e2fa56fa8e0dad44e043f8e46c6a2e30</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>aa1f94030f910900ffae49425d357391</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>e9d010abc54ff7674bb85a4cbafb5c8c</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>8384608c92810352b5b4ee96eeaf3b08</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateLogAndStore</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>46121f8f333d48b5e5962bbb15db8f6a</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>00e37ada5c83b5aced168e2e5a8965a7</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>db816213671f0a4b8c072cf3f2ff42be</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>cc3feddc0f9964e155a596460ef1194c</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>31ac0b2307cc18083396f0b59ab2c279</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>20700ed1fa85002f8bcc894c203fe730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>e0669dd409f74a3d08bd9fa4842258a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>407501f49835ab3747b0b5b47622b74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>efd1ce634dc1de25a3f3ed072a90d245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>DiffVal</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>2fba66c43c9e6969b24f68f28aef4c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>DiffValSum</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>fc259bf19b6821eebfe846b8ab81a6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>U</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>8e1d7ba47cd9daf4955aba0dd4f73710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>d2U</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>c71c80e2f92b07b71ed5a87400297d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curLap</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>74f5695554a350a2fe671cc45c06678c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; RealType &gt;</type>
      <name>curVal</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>1e139a617c5f7390dc1311854a89825d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>dU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>8bdb1e00ade079a251d9305ca38f4b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleAttrib&lt; PosType &gt;</type>
      <name>curGrad</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>6261b5849334caedc41829312269a690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>fe0aa190f4bac80bf213170c9437aa99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>43b0c7471d0c648fc8dead4317c1fb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>7b79c97037edb2f2718c71c7c6c330bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, FT * &gt;</type>
      <name>J2Unique</name>
      <anchorfile>classqmcplusplus_1_1TwoBodyJastrowOrbital.html</anchorfile>
      <anchor>a23f40a43d730edd19db6c83e3aad0ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WMFunctor</name>
    <filename>structqmcplusplus_1_1WMFunctor.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>4a776405bd8d0d28dd71db5cc47b69ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WMFunctor</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>daa1f69bb770d8a24f12a297da2a9cca</anchor>
      <arglist>(real_type b, real_type rc=7.5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>2a7ef2526f078a8697b5d9f0eb2b51d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>a2eab085399e1d596b8ee444142aa965</anchor>
      <arglist>(real_type b, real_type rc)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>d6610769e8d707ae7437a163858daa4d</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>bb1f5ca3de095ede2cee66adf8ca0a04</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>668838a68dc175d9592fb0bb12e64c9f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>e75ee4083c35b33efde6d0cea46caabc</anchor>
      <arglist>(VarRegistry&lt; T &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>B0</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>34e7c235df2e1a6307c96f4cddf4a8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>Rcut</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>aa3dc9964d8c038eaede8f2b9df5b02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>OneOverRc</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>0c847f59f42eb2457c782643448d9b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>ID_B</name>
      <anchorfile>structqmcplusplus_1_1WMFunctor.html</anchorfile>
      <anchor>a004144c37b2865d76917cb3f053e7c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitals</name>
    <filename>classqmcplusplus_1_1LCOrbitals.html</filename>
    <templarg>BS</templarg>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>BS</type>
      <name>BasisSet_t</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>008ea53ed57dd6eef8678306e74390db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::RealType</type>
      <name>RealType</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>1460a7e2285828c2e7e8b8b06d9371c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>0beecd94f1611a55a6a293dc24509459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>64c697ae5dae409b0a584e8b1e1339cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::GradType</type>
      <name>GradType</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>eb9ecb953fa1dc17549770b6faf3e64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LCOrbitals</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>2d5437c7b6ab09d9bdca2d5b4f6ba643</anchor>
      <arglist>(BS *bs, int id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitals</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>1da15f382d3a05d7601cbbfd442a7c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>2aebc41f8c3ab2c458b04806d9da7ea3</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numOrbitals</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>80f06d872c43aea30fef7c973463aef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBasis</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>923e625300020794ef4e8131cbbeb52f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>42c4d0d7ee947bda0edc7ad7868e611e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>353f164ed9b5f119c71bc1fd9ae46a94</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>7379814cf58e56ce18da107b394df811</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>0c5a5e1b168423d55e2bdd882d33aa87</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>ffc7dd1e4e693da410e31b2a0d46e614</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>27fd6a2e92d06d55cfc6c59cb67a9282</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>1baf7a75d218ac3712efc7c1800f4fe9</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>788922047446933774e0c0647e7383a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putOccupation</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>90b89c1a6cc9420002684bb25df35b9d</anchor>
      <arglist>(xmlNodePtr occ_ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putFromXML</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>d8703d9e147dc8a96b26eb2ffccaa399</anchor>
      <arglist>(xmlNodePtr coeff_ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putFromH5</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>6669f1465ac3c7acf288e4c7a13f545c</anchor>
      <arglist>(const char *fname, xmlNodePtr coeff_ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>ae1c1e1ea5a1bf6cae644dc9acae3874</anchor>
      <arglist>(std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>0a7c9d4609e4d6af5dd566695e523c08</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Identity</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>681e8d409ebbab66b1885383e3f73e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>9e87b4c50b93ba1d06d4194f2e95b656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>0a05f582eb319c5709ed47e44efe5b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSPOs</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>7b60354396a2d95a52dbde829ec95709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>b2b2c7c615dc1291f7d944c3bd9a0287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>BasisSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>3b74e0e3d57236621095bf6857af7207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>C</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>07cd5f8cdcc9fd687fddd9cdb3b5db99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Occupation</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitals.html</anchorfile>
      <anchor>03790f7a5ea64ab8505d579343c03b17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitalSet</name>
    <filename>classqmcplusplus_1_1LCOrbitalSet.html</filename>
    <templarg>BS</templarg>
    <templarg>IDENTITY</templarg>
    <base>qmcplusplus::SPOSetBase</base>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitalSet&lt; BS, true &gt;</name>
    <filename>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</filename>
    <templarg>BS</templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>LCOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>6a9b517b1b475506c440e0a0b2d8cde4</anchor>
      <arglist>(BS *bs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>4f7f7c482bbf79738930fc123164d256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>9681a19f677dc6e60b7626fae555c677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>d543921daac7d981e5f1bee7a24361d3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>6be8664d859c6d2385eca233644d5955</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>1d05f8e85a07c9bc12820bdebe985d11</anchor>
      <arglist>(BS *bs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>aa6eb4254e66615487c339b499a9264f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>9fb3c417054bf4725ba39a55009b1efc</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>3ff28b04d70ece5b8653830c64878bda</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>3ddeb22e052c0c88378900bbce40c953</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>myBasisSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>8fc96d93c9ba59723d8c229a31ee54c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>770820a059b599476d88635eb464b997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Tempv</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01true_01_4.html</anchorfile>
      <anchor>694ea248a35c439420a74b5c77aa7fbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LCOrbitalSet&lt; BS, false &gt;</name>
    <filename>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</filename>
    <templarg>BS</templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="function">
      <type></type>
      <name>LCOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>a69617f2abe6fb9194f8db5a29c3dbce</anchor>
      <arglist>(BS *bs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>261059c2f61f51b4ccdc529975bc8641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>4985df588dde7cd0c6be7cb61499ad09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>c1b9d5fc6c64857f4278959c51e5a9d6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>5dfcead57e7a2e09b7053a38f948b6e4</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>1566112f410b929e8b4c318aaf31bff7</anchor>
      <arglist>(BS *bs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>0ab740682f79d86cb6d0f9c77ceb6680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>ccc092bff638d22b7e2ccc06027946cb</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>55f8fd0499d6c6c82752bee297c6e206</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>22583c6b244bfaceee57247976a76fb4</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>myBasisSet</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>53e2869a62fb745063c403dacf940c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Temp</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>b83d57f27195c5fb320d0bcce20032ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>Tempv</name>
      <anchorfile>classqmcplusplus_1_1LCOrbitalSet_3_01BS_00_01false_01_4.html</anchorfile>
      <anchor>f6e30641b2d519921934e4048e7a5240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalizedBasisSet</name>
    <filename>structqmcplusplus_1_1LocalizedBasisSet.html</filename>
    <templarg>COT</templarg>
    <base>qmcplusplus::BasisSetBase</base>
    <member kind="function">
      <type></type>
      <name>LocalizedBasisSet</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>025ed8a777226d3de95cb382cbe4a4fd</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>9c32356a53760b4588078ce70f664548</anchor>
      <arglist>(int nbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>7d07e0bcf8174ce671a8af7fcef628cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>1888ccdbd1a66fe27132e53bad11fa29</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>615655b323863721c69c21585a7555c7</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>2c74cea499faedf358538346163d3864</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>c597886a432dfc474fd7b5ce31e88c75</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>e084e04234c4cb1425235880a7489169</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>8c56c501e81598edfd80d9d6f99e37c0</anchor>
      <arglist>(int icenter, COT *aos)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>CenterSys</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>0b0fb7a89e42b1cf1bce0152c814b727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCenters</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>c15ee45ed093948941b8fbdc521b6cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumTargets</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>28dc8e060353212ab1591ffcfb5cdaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>BasisOffset</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>8bd7e73ab8d56a53cdb18269223cb8c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>LOBasis</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>b60f5137bd5050d67ad2ab83cf8eae18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>LOBasisSet</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>6d3c73ced2a68f53a6c397412e5bc730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structqmcplusplus_1_1LocalizedBasisSet.html</anchorfile>
      <anchor>40d8940aa361bf77b301baa4e6932553</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MixedSPOSet</name>
    <filename>classqmcplusplus_1_1MixedSPOSet.html</filename>
    <templarg>LOType</templarg>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; ValueType, RealType &gt;</type>
      <name>NGOType</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>7c912628acbb28d7fed667c0c2641bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LOType::BasisSet_t</type>
      <name>BasisSet_t</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>8d4d7606c7889d9742d489b4409f07ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MixedSPOSet</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>bb4a0f94ba73b5e089df94da821d88ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MixedSPOSet</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>ee3409b22e1a3e7f201d8313debc27b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>ae29da4e803162727923433b875d181d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>e45cf90347402fe959294a6d06db0fcf</anchor>
      <arglist>(NGOType *ngorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalizedOrbitals</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>bbad597990cc52ad0bdd79250e3febbe</anchor>
      <arglist>(LOType *lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>42f23b07e4b83b20e31cb613fe7051ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>bffa8b30b5ecc6ca90a3ec1bf4992cc3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>bf1f688b58b84e866c0f109506e13b3b</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>2ff57623af6ccf3ddc0a4d4c5df98547</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>32d1e9808f1fe64cf3b122c6cefa1922</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>e4f446f6815b7fc0a77c5115e870c010</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>833530ebad28a0f2727193e8e26bbeb1</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfOrbitals</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>960e89ec3b1987ab43208e38ade2066c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LOType *</type>
      <name>LocalizedOrbitals</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>f523cd283f326be79b6756fabdf2a43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NGOType * &gt;</type>
      <name>GridOrbitals</name>
      <anchorfile>classqmcplusplus_1_1MixedSPOSet.html</anchorfile>
      <anchor>76563daf88e053623c5b5fd8e1d29c45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Any2GridBuilder</name>
    <filename>structqmcplusplus_1_1Any2GridBuilder.html</filename>
    <base>qmcplusplus::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>Any2GridBuilder</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>f13a5246eae205683acac1c458f9b987</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>3240f8d6e1335886bc6a4b6791e4a781</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>8e3569d2896ced6c3647b7dac0040e32</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGaussian</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>eea9420c1cd77c65f4d5231d0042065c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSlater</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>433733f7ae331b474f294feae3416e34</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPade</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>e758c8d9f659e5626accd4626c14c80f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>8aa0685b510381f5bbfb8762d0a2f17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m_rcut</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>3cd6e16cbee0ddff61808a62b239a9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QuantumNumberType</type>
      <name>m_nlms</name>
      <anchorfile>structqmcplusplus_1_1Any2GridBuilder.html</anchorfile>
      <anchor>3c7da1c4f7687fdfe08e5c882dc9dbe1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::AtomicBasisBuilder</name>
    <filename>structqmcplusplus_1_1AtomicBasisBuilder.html</filename>
    <templarg>RFB</templarg>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="enumvalue">
      <name>DONOT_EXPAND</name>
      <anchor>837df49529ce59d340298f85ed663009a559ddd495bab811150d1accb97cc406</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAUSSIAN_EXPAND</name>
      <anchor>837df49529ce59d340298f85ed663009b31134905891032f88b77edb1194224a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_EXPAND</name>
      <anchor>837df49529ce59d340298f85ed663009416a92b373e38d44dbab35b6c505e503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RFB::CenteredOrbitalType</type>
      <name>COT</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>017f72de2933f3d26855d18a46765c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicBasisBuilder</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>a203f45391f75ca2afedeb684a87b371</anchor>
      <arglist>(const string &amp;eName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>67e82cd48be38bce1ad6af49de472b80</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>47df44d30cfa11595854643c5202aa3f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>COT *</type>
      <name>createAOSet</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>eb8200cc4d38d67c4c508c8a324119c9</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>003f9d83470d69181ce11bd2ffdd2223</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, COT *aos, xmlNodePtr cur1, int expandlm=DONOT_EXPAND)</arglist>
    </member>
    <member kind="variable">
      <type>RFB</type>
      <name>radFuncBuilder</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>7b4682567f4af3314548992b59c45c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addsignforM</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>eeaab40ac438613fe1411638fc1e724d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>expandlm</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>2745392d1e6f4368d81c4940b137e5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Morder</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>dc4a9528d685e0b57f08fbf5622be550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>sph</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>dbc8725ab31228cbc0bc74f7a656b0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>basisType</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>d5da11353ea9e5197b581bd3ae37e0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>elementType</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>64c33c48f01ab67bc2593a860d4ee565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>a77a2c327b9f5559ebd872cca6487095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>structqmcplusplus_1_1AtomicBasisBuilder.html</anchorfile>
      <anchor>dc4180f514ecd87abe81143ba192e508</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::GridMolecularOrbitals</name>
    <filename>classqmcplusplus_1_1GridMolecularOrbitals.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>723618592256a2ee92a6de0fd5e12a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>054d8b855eddf421f582c2f34212c299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>95fb88d97cc2d39111850ac3b1d690de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MolecularOrbitalBasis&lt; CenteredOrbitalType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>c2a326efad9a90023bb66ba91785cc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridMolecularOrbitals</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>18420ff3e850e39d42f274c38a9d8d1e</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>babfbc0996da5dd38c57bc770145b65b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetType *</type>
      <name>addBasisSet</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>da78e36d45cb07dc920cfc262bc30932</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="enumvalue">
      <name>DONOT_EXPAND</name>
      <anchor>fc35c99567eb676d9e7bc3bf74801be575d4661127dc6acc73d514ca5d460fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAUSSIAN_EXPAND</name>
      <anchor>fc35c99567eb676d9e7bc3bf74801be5f6591afdcff3ffad1bd1e5ccd5c8a3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_EXPAND</name>
      <anchor>fc35c99567eb676d9e7bc3bf74801be58fbf4cc9040a3a0f1ffb278f6f1ddbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>962c02947197a0dd77afdfb71e33ea8c</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, CenteredOrbitalType *aos, xmlNodePtr cur1, int expandlm=DONOT_EXPAND)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>IonSys</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>e3b66df63714f6ccdecedf036ea7b2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>BasisSet</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>08b242610a6bbd8d1e53a9a723596579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>d9e562fbe36b8e5310edcacff8edddd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RGFBuilderBase *</type>
      <name>rbuilder</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>ed296c8551ba1f8a3e6c156e19a9a9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>5331b6acf34204423b331c6c985b817e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>CenterID</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>b23e6343162bbec5c3f9f78c99323333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>classqmcplusplus_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>a1da5e8318ab69ab218319ac473c1078</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::GTO2GridBuilder</name>
    <filename>structqmcplusplus_1_1GTO2GridBuilder.html</filename>
    <base>qmcplusplus::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>GTO2GridBuilder</name>
      <anchorfile>structqmcplusplus_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>7ac3a840c2cf831554e1d1c1f9a410d8</anchor>
      <arglist>(bool normalized=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structqmcplusplus_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>0c1efbf76244aad3a696fb7afd858a3e</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>structqmcplusplus_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>780ed48bc0431f346c1ecaf52986225c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>structqmcplusplus_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>ee7547742853b2d536837c1de58f2f86</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structqmcplusplus_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>ffc7e4179a2e86f3d506ddb994f2c257</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::GTOBuilder</name>
    <filename>classqmcplusplus_1_1GTOBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>GaussianCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>f19f88f0e0ebc44b4c73787717fabe41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>fc9bb247d84f1415fa6809c9fccf641b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTOBuilder</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>156b4ab5055f4714bd561d53f7f27bba</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>0d1fad29af5fd4fdedaf98b306153904</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>b1308d93c2e94bf4430e58e8c90d97ad</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>6634938f3273ef6281641dd101a43272</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>c8d781631113a986df0b7c5d0edfaed1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>ceffc8afd95165697fbb9fc0600b284e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>dd8bc5ad53dfefaa880c5555334baf00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>classqmcplusplus_1_1GTOBuilder.html</anchorfile>
      <anchor>05a9a9a5069dd587fa4c1b5b1760f07a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::GTOMolecularOrbitals</name>
    <filename>classqmcplusplus_1_1GTOMolecularOrbitals.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>GaussianCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>516e630e0d2c1c68c12c7bc99474f286</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>b315265061b24c390dfc3a19ade1e670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MolecularOrbitalBasis&lt; CenteredOrbitalType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>71044c0dbdca2b7dd45fea0f11ea1d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTOMolecularOrbitals</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>0f6c24a572687c30c44ba38723cbc407</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>a31c5ca2746ab6a1b5c1047c2927a833</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetType *</type>
      <name>addBasisSet</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>6515bccf445ab4c1bb7d2777fe027885</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="enumvalue">
      <name>DONOT_EXPAND</name>
      <anchor>8b35cb6d3620f745a3208052bba6d456262ea74d605622390b3228d1ef511acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAUSSIAN_EXPAND</name>
      <anchor>8b35cb6d3620f745a3208052bba6d456f5b39c70b9ee33bf8c3e7b4a315b4e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_EXPAND</name>
      <anchor>8b35cb6d3620f745a3208052bba6d4564c01e71e5ddad93f94453528eea09e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>0e3c6642e9958bc31a3b9f23b73d94f2</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, CenteredOrbitalType *aos, xmlNodePtr cur1, int expandlm)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>4eda0e5ac2d364de129b535eca7cc5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>IonSys</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>1cc6559de52408f1994e095d9a7e465c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>BasisSet</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>10a70f206a1d2a9554274ee965ce9c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>705e6ff479332efa37d9db2ea7b21618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>523dde6651ea035a6082dd4552b64a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>CenterID</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>9a0af18e6d59e715c7651331453c80b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>classqmcplusplus_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>f95e75d05189e4cdebaddaad47a13cd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MolecularBasisBuilder</name>
    <filename>classqmcplusplus_1_1MolecularBasisBuilder.html</filename>
    <templarg>RFB</templarg>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="typedef">
      <type>RFB::CenteredOrbitalType</type>
      <name>COT</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>8c90ba6f3fc1f61f64f0db034afcd7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalizedBasisSet&lt; COT &gt;</type>
      <name>ThisBasisSetType</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>516b96925a0555f59f1157565abbd1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MolecularBasisBuilder</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>d337f5588ec47c533d118541306cbee3</anchor>
      <arglist>(ParticleSet &amp;els, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>d14527f38ae42d46deb1a606ad4ae40a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>3d461555ff3973c03cca43b821c850f0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>abf8e46d01a1c7f2ec2e002479e8c519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>4e30790b3fbdad4d96f9596e371a553e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ThisBasisSetType *</type>
      <name>thisBasisSet</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>7c6fa5d4f569d216fe414822da1ec470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, BasisSetBuilder * &gt;</type>
      <name>aoBuilders</name>
      <anchorfile>classqmcplusplus_1_1MolecularBasisBuilder.html</anchorfile>
      <anchor>2fe8fd5c9b75c2ae88bd74d1bafd5e59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MolecularOrbitalBasis</name>
    <filename>classqmcplusplus_1_1MolecularOrbitalBasis.html</filename>
    <templarg>COT</templarg>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBasis</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>3a5ab11f4e3c44b99e54fbecbf1e1210</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBasis</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a76ec9a1353c8b48f311c75d04096c54</anchor>
      <arglist>(int ncenters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>3d5c50676b37efdf5835970d8eb8be08</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>4130d2ee44325826a0908c5bc4121851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>69b777291e1ab2bbf56175557505205b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>fa8535e9c1f26f54284647229d796afc</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>25d4c3b7ed5120ab3d83596d62ff7d3c</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>27582a708b4e32f37fc67d3497d37394</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>de2bb83f677cf874730a93a0570638fa</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>83fba922bb78f15ad6e4fd3a33e912db</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>1e1fdfe084c1e1cb2e517346124c4767</anchor>
      <arglist>(const WalkerSetRef &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>05b1d83fa2ff08914a807316620acd57</anchor>
      <arglist>(COT *aos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>0b01ace8ac4424d62ebb6667a191fd95</anchor>
      <arglist>(COT *aos, int icenter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>1790dbd5752ea22228624c2d8c37e7e4</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>y</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>e7de7ec11b4deafee0551a0170caff9a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const GradType *restrict</type>
      <name>dy</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>0e77d083171e607e9735e6621b20335a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>d2y</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>8222d3b633183233a555fd00a7efe17d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>y</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>5a92e12f4c3982968f9ce285a1dad0df</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="function">
      <type>const GradType *restrict</type>
      <name>dy</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>b4f77690d54107a2ec438c3159235135</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>d2y</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>d8225644b249613105c4713ad7245f70</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet *</type>
      <name>IonConfig</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>354f0bc594da6366ca21ad0ba8781660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>c8482dcbcf3a9c89ae43f4a7abd06ac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>53ebdf7cffd7e441d29e01e0039365a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TotalBasis</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>e5b9d6341ea7a332a80245338a39ec85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>I</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>043976eb69e25f0273252b18cecaa790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Basis</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>2629b063c9014dee8b9eac33016c3246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>AOs</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>c55ee53dd925998f8756f2a773c29552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Y</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>fff4b9dc1cf1b584652988d3459ffcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; GradType &gt;</type>
      <name>dY</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>15a7d13ea146a65d28f923389913d89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>d2Y</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>f323f47429279b23bf510dbbd3bde534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>classqmcplusplus_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>83fe645a459f1ef98c0fc6c0cf1a748b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MolecularOrbitalBuilder</name>
    <filename>structqmcplusplus_1_1MolecularOrbitalBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>structqmcplusplus_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>2202d54e17e3d68187bb97df30a99338</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBuilder</name>
      <anchorfile>structqmcplusplus_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>3dc697720332f3e8aac0c84e19875b10</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>f329f4d4757c15f3bea9f402ce9b67e6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putSpecial</name>
      <anchorfile>structqmcplusplus_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>38e1e1a6f70accdd5b13670da5d08f6e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putOpen</name>
      <anchorfile>structqmcplusplus_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>62dac8b41c464b9c0998f72266733833</anchor>
      <arglist>(const string &amp;fname_in)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>structqmcplusplus_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>eae5762933758b5063e7e3fab759dfb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PadeOrbital</name>
    <filename>structqmcplusplus_1_1PadeOrbital.html</filename>
    <templarg>T</templarg>
    <base>OptimizableFunctorBase</base>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>3a6cba0e5bea172fdb25253dfb209039</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OptimizableFunctorBase&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>ecc8416b3475f517c9156b69cd09f115</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeOrbital</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>fa1d96bebd32730d8ac4562bc1ba21ab</anchor>
      <arglist>(const char *node_name=&quot;radfunc&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PadeOrbital</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>352d5f382ce003f9f13556e82fe170dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>edb5e5100f284ac9a0f7c06b5a4af2f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>f</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>9cfddb66351cdd7fcfbec214e7188dab</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>real_type</type>
      <name>df</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>cbd6bbf35121e3fc7004b195c532547c</anchor>
      <arglist>(real_type r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>bb7bcff6bbd3e38f7242b530d8f0251f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>1891ee7970dbc342db8ee47fbbbf80cc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>f79675c02e726edd5245771ef5cebb96</anchor>
      <arglist>(VarRegistry&lt; real_type &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a0</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>596bd318233aafe7fe4f0aa8fb38eac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a1</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>177491af0bc352c922f4961098171ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a2</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>ddefcf80e6ab1e99b1d8e22fa718c405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>a3</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>80c4787fbc8bc491badfcfaec94af9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real_type</type>
      <name>rcut</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>6b03b45446191d234f2e9af9691cbae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structqmcplusplus_1_1PadeOrbital.html</anchorfile>
      <anchor>7e58c8092b013692ae60601ac9c11a8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::NGOBuilder</name>
    <filename>classqmcplusplus_1_1NGOBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>5c69be5ff3244577853a642d3414f792</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>460216caf3ffa1bc276f91f0fbbe2f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>bc67083deaa7578cf7b5a734d787a293</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGOBuilder</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>0e787d60bafc057eeb7eb4553d04fc65</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>174efd1d0734da9c248b5ac59fe90935</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>100a51df444fe79b2cc619a799b1f4dc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>9037f70ff307f5a329a62ee77e0899df</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>e0bd88742fe27dedfc9884e3fff2c4bc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>1491547954c827c76066580e70d069a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>9703b271e015ea3d0ab4d6db47499d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>909b480c58ba25261c3c9030285a66ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m_rcut</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>db9c82a9d679a57bf2c1dbbfc7393a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QuantumNumberType</type>
      <name>m_nlms</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>ef9b9a71a32ce2db9f5684b2b78b5c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addGaussian</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>7f9d405ab129be5e2bef891d9a5db23b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addSlater</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>5d5c564e0b3be6b03d60c2cbb518dff1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>addPade</name>
      <anchorfile>classqmcplusplus_1_1NGOBuilder.html</anchorfile>
      <anchor>c71fb0c1cc68b82d1a6c45d4cfdb9985</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::NumericalMolecularOrbitals</name>
    <filename>classqmcplusplus_1_1NumericalMolecularOrbitals.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalMolecularOrbitals</name>
      <anchorfile>classqmcplusplus_1_1NumericalMolecularOrbitals.html</anchorfile>
      <anchor>25c0513321d28811e66082a1fa011a03</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1NumericalMolecularOrbitals.html</anchorfile>
      <anchor>f802496de02dae136211d0bd07066aa5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridMolecularOrbitals *</type>
      <name>Original</name>
      <anchorfile>classqmcplusplus_1_1NumericalMolecularOrbitals.html</anchorfile>
      <anchor>7caf2fb4e4df1e1418154d7acaf30468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NumericalRGFBuilder</name>
    <filename>structqmcplusplus_1_1NumericalRGFBuilder.html</filename>
    <base>qmcplusplus::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalRGFBuilder</name>
      <anchorfile>structqmcplusplus_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>8d318750bb4742edaac964b66eb8fc07</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>structqmcplusplus_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>396cce7797f37d1255f2d13864fedfd0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>structqmcplusplus_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>c27214e5e9d5780b3059e42a617deea2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structqmcplusplus_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>0105b6dbb5a8efa549f0d2bb75ab1b3c</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RGFBuilderBase</name>
    <filename>structqmcplusplus_1_1RGFBuilderBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>de6dbc2f283938cde42cc3ebfe9532b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>6883f1d767b479215e5fb15550e1ee5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>81d589d3f151b795cdbfa98fff04c4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RGFBuilderBase</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>17dbe8dcff5f9183461da53b8359903d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RGFBuilderBase</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>cf269dc51c592230c5188271399c46b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>0886311e1b8151b83da7d13f9d2f60ad</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addGrid</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>16ef9482da1986d14ee17d847f983f95</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>31bc6147260ed23d5b31892f51f5682e</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>putCommon</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>e9d06b0b83398faa58a3741d798f1026</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>3eeafb218be41324d908c72163e313aa</anchor>
      <arglist>(const std::string &amp;aroot, int omode)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>7022e950a889cfbc579d4cb0f0934e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>1fe457babf3175ae12130009079f7125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>c4e88af32884274e3531599b518d1065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>m_file_id</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>95ed2e7b6f1113aeafcfcdb3f90d614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>m_group_id</name>
      <anchorfile>structqmcplusplus_1_1RGFBuilderBase.html</anchorfile>
      <anchor>144d29e58a90fdc394b9f5220c13e162</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::STO2GridBuilder</name>
    <filename>structqmcplusplus_1_1STO2GridBuilder.html</filename>
    <base>qmcplusplus::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>STO2GridBuilder</name>
      <anchorfile>structqmcplusplus_1_1STO2GridBuilder.html</anchorfile>
      <anchor>cffdafaf0bb9cef770a644508f655ba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structqmcplusplus_1_1STO2GridBuilder.html</anchorfile>
      <anchor>1445a862aecaaf528addaca96df9605e</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>structqmcplusplus_1_1STO2GridBuilder.html</anchorfile>
      <anchor>7a9ebf4fe4e9d57a84d2b095cfec50fa</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::STOBuilder</name>
    <filename>classqmcplusplus_1_1STOBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>SlaterCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>186142652e0705f7ba1981ec66f4bbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalBasisSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>cbac0839ad1538bcf2c4f03b7da6178c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STOBuilder</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>da7f884d64e0c1b38e2afe672d19d73b</anchor>
      <arglist>(xmlNodePtr cur=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>27687e219d3e08ca05fda3455704818e</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>898e6a0101901d9cdbb39bbb481ebe60</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>219dd26d0308d09d1f4ba4b90133ce9a</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putCommon</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>c3ddcce31162e3e25a746d9a61b5dd0c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>cb6d8885d278a5e357728ff64189b8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>fa1d9c7806d5187a6427a1f526df0155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>classqmcplusplus_1_1STOBuilder.html</anchorfile>
      <anchor>62ab2d60651570b5fad0c7d1c9833321</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::STOMolecularOrbitals</name>
    <filename>classqmcplusplus_1_1STOMolecularOrbitals.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>SlaterCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>71f5e43b1e0a925948a307c8bddc25cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>b53b69b69a9a044efeaf7250619d5dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MolecularOrbitalBasis&lt; CenteredOrbitalType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>4a9ed0cf36b8338cfdca030aeda98a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STOMolecularOrbitals</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>888e822ac9eaee547adbece474ebe124</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>1f74f38e7c521ee4a2742481cbd07cad</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetType *</type>
      <name>addBasisSet</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>b58d7f79bcf2f7c4288ca0768d5082a6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="enumvalue">
      <name>DONOT_EXPAND</name>
      <anchor>2585c9fb98a7c901de0a31ffaef762e55d5fd239e3f55c1ef25ee45b4a4972a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAUSSIAN_EXPAND</name>
      <anchor>2585c9fb98a7c901de0a31ffaef762e55e031d149c0d4b2e6419cdebd30e1c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_EXPAND</name>
      <anchor>2585c9fb98a7c901de0a31ffaef762e58d918d73a383705664755d4484d3c57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>122fd8bd6c5ac8f335485a2d54b2d4a6</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, CenteredOrbitalType *aos, xmlNodePtr cur1, int expandlm)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>550db754a196af0eebda80f6c7f98321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>IonSys</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>2ee7ab2c87389f12ad4a5adccc67c0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>BasisSet</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>24ce803d0f30321620ce6ef382a8e165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>1df1967f685dfee6ce222af54eb88be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>9129b6aad2c3d06ab0f43e3793054440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>CenterID</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>6398a7752be2542c6568379a344d772f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>classqmcplusplus_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>116b8dac6e34429664569bfbde7f47f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MultiSlaterDeterminant</name>
    <filename>classqmcplusplus_1_1MultiSlaterDeterminant.html</filename>
    <templarg>SPOSet</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>SlaterDeterminant&lt; SPOSet &gt;</type>
      <name>DeterminantSet_t</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>07e11f7e4cd3d7989431a85f8e63a47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiSlaterDeterminant</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>970416a8ee9001d5f0b0e0b89bd8632e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiSlaterDeterminant</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>3dedab42c33d9a0200f2d91c53405c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>c1c9654db1bd1e50962917163ee332f0</anchor>
      <arglist>(DeterminantSet_t *sdet, RealType c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>514bf95ff628050360881ed6e0dbf974</anchor>
      <arglist>(DeterminantSet_t *sdet, RealType c, const string &amp;id, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>13c3d82e5bdbb5322f802cbfe8a1d296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>cafe67ae27879288aff5a795ec486b2a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initParameters</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>4ed0034f35ed7d2fac627f9717d4d89c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>0cfcde983a22775b9a2a85013415ee8c</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>986b270de2613bd63483b9685e184969</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>fa17678de547ee0bb1d1626a36e5518c</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>b2a96f01774a49adcbd3e18683c4a972</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>37edb05a701af98b9463273a7370c604</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>8974175dc2eb11a7c5dcc4aea269abec</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>30eabb962c63cd38305b9007c1cc2b00</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>9489db309ae2ef1baacf67f03e0cd9d5</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>cac0546dced53eb6592dadbc2e75474c</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>1f009d1e00cf9d4b376a4f1178e01d40</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>10ff928e2d0b253ccb72d86f21328cab</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>80694cface35b7cf74af82a60fadb7bd</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>b63f4837be972fe4ca1e7c8117a21345</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>4fce224a32168494d48f0564641bb671</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; DeterminantSet_t * &gt;</type>
      <name>SDets</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>818073c006be1d8a2484fb433fa0d09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>C</name>
      <anchorfile>classqmcplusplus_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>18d8898a4284bf5174585c470bc6822b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::NumericalOrbitalSetBuilder</name>
    <filename>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>GridMolecularOrbitals::BasisSetType</type>
      <name>MOBasisSetType</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>752e2c48dd0ec9872548d66da30a4de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LCOrbitals&lt; MOBasisSetType &gt;</type>
      <name>LOType</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>ebeacbd0334e16203982ac75a98cb41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MixedSPOSet&lt; LOType &gt;</type>
      <name>SPOSetType</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>1c40f71caf35763688328508477189b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; ValueType, RealType &gt;</type>
      <name>NumericalOrbitalType</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>1a40578608dc1bc72ffd43563425ea6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiracDeterminant&lt; SPOSetType &gt;</type>
      <name>Det_t</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>399e39348ea29ab9dbed6b897ca90a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SlaterDeterminant&lt; SPOSetType &gt;</type>
      <name>SlaterDeterminant_t</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>53c23b0899f7e8bd631faeee3e8f903e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalOrbitalSetBuilder</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>c15e445e728d8cb255ba7eb15efc1a40</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>0b8cb4c94efd79a19f25d45cb44c9e25</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SlaterDeterminant_t *</type>
      <name>addSlaterDeterminant</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>a3be7a74c52255517219c9762b3e9d2d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SPOSetType *</type>
      <name>createSPOSet</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>68305a71c674caedf3bd1adeb1b6ceba</anchor>
      <arglist>(xmlNodePtr cur, const string &amp;ref, int norb)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridMolecularOrbitals *</type>
      <name>LocalizedBasisBuilder</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>965bef750a01f1f8eb374bb1dbc32003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>91a6b14bbf61c56ea7f303f5a606ead0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XYZCubicGrid&lt; RealType &gt; *</type>
      <name>GridXYZ</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>caadc33fd8d72419775547cb1cc46a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MOBasisSetType *</type>
      <name>MOBasisSet</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>2bec168681497b81af8ff87495397808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, NumericalOrbitalType * &gt;</type>
      <name>NumericalOrbitals</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>c0a933eec98ea9ef8276dd59d95135b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, LOType * &gt;</type>
      <name>LocalizedOrbitals</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>56dcca21fc32f39213ecddad5b96e50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPOSetType * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>27de0175be21595b680afe19855a35cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, Det_t * &gt;</type>
      <name>DetSet</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>c3dff79f1764af14aebe94de001a257d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; SlaterDeterminant_t * &gt;</type>
      <name>SlaterDetSet</name>
      <anchorfile>classqmcplusplus_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>3c1715f5dbeb47ae916deb10a7468750</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OrbitalBuilderBase</name>
    <filename>classqmcplusplus_1_1OrbitalBuilderBase.html</filename>
    <member kind="typedef">
      <type>TrialWaveFunction::RealType</type>
      <name>RealType</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>77c4080719c1372fbbd57eda4b7376a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>a96afab895f5fad0364e1ac2a7e5ed52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>6422ee3f5cb2ef3951067f31c0a21210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::GradType</type>
      <name>GradType</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>cc89c03779951f8e488ccea2e9c49769</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>5ea4e0d199ad953dddde14a53bf2dc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalBuilderBase</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>e530ca19356fdddb3f0c4dc2a6edec35</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>e1f6fe9c75e8fdeaba29053bf7a8095a</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>wfs_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g9480abc72414d89a385630e26850716c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>param_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gf01c636011226c7de742936c78f31618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>dtable_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g7dd23d90e7a1fbcaf49dca6802b2bdd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>jastrow_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g64d9d287f97edfe31dbe16d5049948cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>detset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g99c8ca906fb2cf0c81abf7b96811ac92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sd_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gd1416453e3026bb3f65ec604a70a6de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>det_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gb92b048ccae15f908d14b672239d61b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>spo_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>gc2f03bc9ab5b4820f94001b76a1ef292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g05412d963effcb0452ccf9d18a0c3426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basis_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>g87b3ff5208ea2a0358181f2657639703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisfunc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ge39a24a7256ea5196da73c6047af0075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>948c42d8ed4c5a62909b61143fda29f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>targetPsi</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>653684ffe2ae3611b25fbca2a10cf867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>a4e2cbf300544d160e059d42eca3288f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; OrbitalBuilderBase * &gt;</type>
      <name>Children</name>
      <anchorfile>classqmcplusplus_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>c6c2144610ddb8e1d18ba4b37cd0039d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalConstraintsBase</name>
    <filename>structqmcplusplus_1_1OrbitalConstraintsBase.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="enumvalue">
      <name>MULTIPLE</name>
      <anchor>49c407eafeb987d31282e59d278df95ba05c46f5a29e0ac5484a1d24003916e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONGRANGE</name>
      <anchor>49c407eafeb987d31282e59d278df95b7abcd6b4e8c4c2854c05e1a90a4304e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONEBODY</name>
      <anchor>49c407eafeb987d31282e59d278df95b763f476253a079eb1760b7831e6f26ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TWOBODY</name>
      <anchor>49c407eafeb987d31282e59d278df95b22f88213d562a34639d506649e1ed045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREEBODY</name>
      <anchor>49c407eafeb987d31282e59d278df95b2744a6a903c8e6154887702ea299c43b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOURBODY</name>
      <anchor>49c407eafeb987d31282e59d278df95be30c50261a167274f64b0d13c7938991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFactory::GridType</type>
      <name>RadialGridType</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>107f2e5ad550b6839f52dc6489d82b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalConstraintsBase</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>f71c10a976b3e436ae44d715c7089350</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OrbitalConstraintsBase</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>72883b4303fd7878c0bdea76eb07129d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>8b03b7f0840ab4f67084beb1536cfbeb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addOptimizables</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>9c33a1054b5c20f693e59973020e4e38</anchor>
      <arglist>(VarRegistry&lt; RealType &gt; &amp;outVars)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OrbitalBase *</type>
      <name>createTwoBody</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>01b00625c2ea161bdebdcbfaba97fd62</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addExtra2ComboOrbital</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>7cd068b25562acb41b2413987caed82c</anchor>
      <arglist>(ComboOrbital *j)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OrbitalBase *</type>
      <name>createOneBody</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>4a7c387380c10ecec9525c81536f878e</anchor>
      <arglist>(ParticleSet &amp;source)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParam</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>e21095b5a6f7c87501cb9cf06328ef10</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getVariables</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>6364312620f65355900d1c6a9236d418</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialGrid</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>7d6447e31415d1639cbe98edebb0b1da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bitset&lt; 8 &gt;</type>
      <name>JComponent</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>f8a9458379bace41d7c3cb7900629643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadialGridType *</type>
      <name>myGrid</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>f80674085bc1db5db171422189528961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>PrintTables</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>c2883d512de5928d95344118250c010c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rcut</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>343d70ec5d13ce7ccfd76a7d12c471d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::pair&lt; std::string, RealType &gt; &gt;</type>
      <name>inVars</name>
      <anchorfile>structqmcplusplus_1_1OrbitalConstraintsBase.html</anchorfile>
      <anchor>4f68adae841f3ef87315f429c50faaa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DummyGrid</name>
    <filename>structqmcplusplus_1_1DummyGrid.html</filename>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structqmcplusplus_1_1DummyGrid.html</anchorfile>
      <anchor>c9332468d55621d25d411842f6944412</anchor>
      <arglist>(double r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalSetTraits</name>
    <filename>structqmcplusplus_1_1OrbitalSetTraits.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>MAXINDEX</name>
      <anchor>4ca09e5f51a2f2d161f841eab86ab4b57f1736821d76eb6c0851f18459c310e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; IndexType &gt;</type>
      <name>IndexVector_t</name>
      <anchorfile>structqmcplusplus_1_1OrbitalSetTraits.html</anchorfile>
      <anchor>78d94771c52911f2e75caa0a6c1cb3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; ValueType &gt;</type>
      <name>ValueVector_t</name>
      <anchorfile>structqmcplusplus_1_1OrbitalSetTraits.html</anchorfile>
      <anchor>805f47fefeba3a323a34505653d7cc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>ValueMatrix_t</name>
      <anchorfile>structqmcplusplus_1_1OrbitalSetTraits.html</anchorfile>
      <anchor>97dd99f10ea36b7b996f7c6580f8f499</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; GradType &gt;</type>
      <name>GradVector_t</name>
      <anchorfile>structqmcplusplus_1_1OrbitalSetTraits.html</anchorfile>
      <anchor>0b03dfe7c08b9ae47e81e1656f30fa3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>GradMatrix_t</name>
      <anchorfile>structqmcplusplus_1_1OrbitalSetTraits.html</anchorfile>
      <anchor>5cf5c9e2a9335dbb9c0b5095d7b2e95e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalTraits</name>
    <filename>structqmcplusplus_1_1OrbitalTraits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalTraits&lt; double &gt;</name>
    <filename>structqmcplusplus_1_1OrbitalTraits_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1OrbitalTraits_3_01double_01_4.html</anchorfile>
      <anchor>5c31ad2a76546c6a9072972672b28ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1OrbitalTraits_3_01double_01_4.html</anchorfile>
      <anchor>d8c64c03ba2a05a2b660b6b649994a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>complex_type</name>
      <anchorfile>structqmcplusplus_1_1OrbitalTraits_3_01double_01_4.html</anchorfile>
      <anchor>ec6f380a3c2921d8998af9187722de40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWBasis</name>
    <filename>classqmcplusplus_1_1PWBasis.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>PW_VALUE</name>
      <anchor>a0854a466b672b3c14c64a4694bbde1e89c7b6a6082663874d101b078d49801c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_LAP</name>
      <anchor>a0854a466b672b3c14c64a4694bbde1e5af029ccbc80d1433425873544bba736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_GRADX</name>
      <anchor>a0854a466b672b3c14c64a4694bbde1e093fae80baaf5803edd58b691518de19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_GRADY</name>
      <anchor>a0854a466b672b3c14c64a4694bbde1e0bea9c3d9933ac30881e759cd69b4250</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_GRADZ</name>
      <anchor>a0854a466b672b3c14c64a4694bbde1e26d50d68b4872142475dd04941e378ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_MAXINDEX</name>
      <anchor>a0854a466b672b3c14c64a4694bbde1ea7a4e325c8b727dd00a6026f704c2fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>4f8864df78f3e6a9e229701e262d3c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TinyVector&lt; IndexType, 3 &gt;</type>
      <name>GIndex_t</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>21350fe046b22d2de50866f1ec02c466</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWBasis</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>50f46e5f389fda17139f91b8be970b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWBasis</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>0ee464477307edef251f49a01ee1125c</anchor>
      <arglist>(const PosType &amp;twistangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWBasis</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>3cd5e5b732f099738f71ad6e4f80d85d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getBasisSetSize</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>2ac5fb77cf3571760eb2535a43a772c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTwistAngle</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>ca780f7f5933ef7b7be849aac99df9a8</anchor>
      <arglist>(const PosType &amp;tang)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>db9c91c5677480765c2a44caec9c7a6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>readbasis</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>ef5fb8bdb581c096fd1e2ae2d90f6f08</anchor>
      <arglist>(hid_t h5basisgroup, RealType ecutoff, ParticleLayout_t &amp;lat, const string &amp;pwname=&quot;planewaves&quot;, bool resizeContainer=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trimforecut</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>87114e2178cc55e7a20bd4ba5de6b9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildRecursionCoefs</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>e053672f1587a018ecb82962ea499a4d</anchor>
      <arglist>(const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BuildRecursionCoefsByAdd</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>0f1152e4b2de2fca2c283387d073198f</anchor>
      <arglist>(const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>3aa5111305bdc5a7d8e90eb534d8d5f5</anchor>
      <arglist>(const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>6b9e65e56ba11cc9a9d64b50f0562e53</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>Z</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>c7b9dd76abcac0d203221792c90db2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>Zv</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>b45184c52c4c988969b24254942f9d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>inputmap</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>9d31997bc9e8302f5008cee2ebd9988b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPlaneWaves</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>82fc3ea8ba8cc11eceba9db17bdd765f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>26dde0ab0cf0de4474667f4fa6f802c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>maxmaxg</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>927e58f1637501e727415ca00e0a3761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GIndex_t</type>
      <name>maxg</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>d456b34c58242be21660befe34269404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>ecut</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>4764c06ed9028482de69ff7d8cbd520d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>twist</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>b2a75ce535efb11ca74bbe678b5c8e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>twist_cart</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>32c3f8a7d212b9bc359c9a4fbf93c710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>minusModKplusG2</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>f1e70372fdbdff9c29e2998e72bdc28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; GIndex_t &gt;</type>
      <name>gvecs</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>e4e4e8f9f2e74a04d45ac5e4d062b50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; PosType &gt;</type>
      <name>kplusgvecs_cart</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>345bdc48a80dca093b53cd7f7844892f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ComplexType &gt;</type>
      <name>C</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>407e873e9ec92a2388580d604b5b3ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; RealType &gt;</type>
      <name>logC</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>db185f78dd6640d191064fb55744d19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>negative</name>
      <anchorfile>classqmcplusplus_1_1PWBasis.html</anchorfile>
      <anchor>1d381371d77d832b42a635e56aacc1c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWOrbitalBuilder</name>
    <filename>classqmcplusplus_1_1PWOrbitalBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>PWOrbitalBuilder</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>30e72564e15cc8ea17edf7b24a0e186a</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWOrbitalBuilder</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>ae002ed7584c80d0661ab07acf14bbd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>9406c94dc84f1ae652f0024e6b466497</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PWOrbitalSet::PWBasisPtr</type>
      <name>PWBasisPtr</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>593ae5625402ff9a6d6fd31479230677</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReadHDFWavefunction</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>84ae62d955389493c37abff3acc1f01f</anchor>
      <arglist>(hid_t hfile)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>hid_t</type>
      <name>getH5</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>6c74a303b782c0ca56715d83a571205a</anchor>
      <arglist>(xmlNodePtr cur, const char *aname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>putSlaterDet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>530ef97b7fded24586123d1bbd185abf</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>createPWBasis</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>7924a9e2d2c46b39d0fcb91694977c5e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SPOSetBase *</type>
      <name>createPW</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>d10e7d31938671e27283d892221390a4</anchor>
      <arglist>(xmlNodePtr cur, int spinIndex)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transform2GridData</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>14ac54890bb703709e7c7ec50169afa7</anchor>
      <arglist>(PWBasis::GIndex_t &amp;nG, int spinIndex, PWOrbitalSet &amp;pwFunc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>hfileID</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>45600f3de98484599764282caa0b560f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>rootNode</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>8e1d02017d6030b5967b5f3efe8047ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>TwistAngle</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>7551b1cb7688c41e1bd824124ae0b8f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PWParameterSet *</type>
      <name>myParam</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>a62674442fc79c43f4207029cdb5c556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PWBasisPtr</type>
      <name>myBasisSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>9094880582e3868055ad51401ae0dc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, SPOSetBasePtr &gt;</type>
      <name>PWOSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalBuilder.html</anchorfile>
      <anchor>6813935ddc5807cf14097965d9d726ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PWOrbitalSet</name>
    <filename>classqmcplusplus_1_1PWOrbitalSet.html</filename>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="enumvalue">
      <name>PW_VALUE</name>
      <anchor>2294959ed9faf14b50f34b7fa97f3a8401ac6c5364cf0289d05704f2c865847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_LAP</name>
      <anchor>2294959ed9faf14b50f34b7fa97f3a84d8f90cbaab6c75412f01b5b237709815</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_GRADX</name>
      <anchor>2294959ed9faf14b50f34b7fa97f3a843fffd6ca33fcc029eaf0f28b4a76ea0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_GRADY</name>
      <anchor>2294959ed9faf14b50f34b7fa97f3a84fcd0f8aee1b2b219fc9de8a53ef3be4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_GRADZ</name>
      <anchor>2294959ed9faf14b50f34b7fa97f3a8410a3181dc7f7f6771279600fe17af1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PW_MAXINDEX</name>
      <anchor>2294959ed9faf14b50f34b7fa97f3a8410bf2f8f957a293159021877c1c89691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PWBasis</type>
      <name>BasisSet_t</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>b22dee54885fe9f1ddc49a8b88988d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PWBasis *</type>
      <name>PWBasisPtr</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>d723788fad30524fa518b806658941bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PWOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>85c58f74e7db6581b6c0077ab4de0d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PWOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>d40cad0378f6a01c737e2c0f48b1dd62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>f0108422a9a30dd19c08a3177621f799</anchor>
      <arglist>(PWBasisPtr bset, int nbands, bool cleanup=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVector</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>a47d4e2a8c0ff598ad0a62cbe323d470</anchor>
      <arglist>(const std::vector&lt; ValueType &gt; &amp;coefs, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>24e33c30ca71eeca8e519509b5b7757b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>5682c6f9f05704a7fbda718199a6ad3b</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>7ea5294611ea07bed2fae34f533e5ea3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>ee67e24c814a7f8698d8fa37f7fd6496</anchor>
      <arglist>(int ib, const PosType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>c50bf69f7800c29608c5d4b62d5cf953</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>02123afb3cd8b79c0f9d37fed1ad087d</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>ee478eb719755d4c9d10d47f36054db2</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>OwnBasisSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>c5e9491230d12060faceb38aa1980912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>TwistAngle</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>6db55a5f9257156bd81d793d7a03fa2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PWBasisPtr</type>
      <name>myBasisSet</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>2e2f59ce0db5eb889395666aac6237ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Temp</name>
      <anchorfile>classqmcplusplus_1_1PWOrbitalSet.html</anchorfile>
      <anchor>22eb185127cae0e8d4b7c799b7db9f49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PWParameterSet</name>
    <filename>structqmcplusplus_1_1PWParameterSet.html</filename>
    <member kind="function">
      <type></type>
      <name>PWParameterSet</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>26761d81bb09aac906cd876934cac8f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>aae4b10f494f682e19281cb11569ef01</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkVersion</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>8562470f254c7ed71b131ce45e443669</anchor>
      <arglist>(hid_t h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEcut</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>6f637e0259f7e811875f4091b24cf0b4</anchor>
      <arglist>(double ecut)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getTwistAngleName</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>48a565bae3909d8838b34b66dab5306e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getTwistName</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>4921d14d95b8575fce5dea374ffc281a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getTwistName</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>cafaee095ee79df0b93f5768b37d80df</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getBandName</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>5f0c281a95fe890cca70a3b85d071547</anchor>
      <arglist>(int ib, int ispin)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getBandName</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>7f750a0be36344bd294da883d1dd35bc</anchor>
      <arglist>(int ib)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getSpinName</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>e196b9e1815610637976e089c080047d</anchor>
      <arglist>(int ispin)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasSpin</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>1ba6dd543e788e0eab2829f8a4f2bc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; int, 2 &gt;</type>
      <name>version</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>adbb2a1c006965aa0d0b72f99517ce0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>twistIndex</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>2d1ed6c0965d0e4c838668a6ccf2f198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numBands</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>e6f8d3353f4cc690207e696285f0d3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Ecut</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>48e8c7e68b5ef7cc20411f9feee9428a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>paramTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>2488dda9c1473b120449333a4ac10100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>341e5f18eed7e48b975a1ca245f96910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>pwTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>1e61610403b849b9f62c34bab36d8100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eigTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>27286c70e69365a0b6b04c75315e4cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>twistTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>4ce5ec656a9dd69dccfdcdcc9aa3d6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>bandTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>e756610ab6e91a9a113828a22096e7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>spinTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>aed658ff2c43961e55b758dcde9fe9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>eigvecTag</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>15adef1c2d6cdbbb3e136f4c46ab06cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>structqmcplusplus_1_1PWParameterSet.html</anchorfile>
      <anchor>9447098312dd292e3b3c11dae4cb745f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SingleParticleOrbitalSet</name>
    <filename>structqmcplusplus_1_1SingleParticleOrbitalSet.html</filename>
    <templarg>OT</templarg>
    <base>qmcplusplus::SPOSetBase</base>
    <member kind="typedef">
      <type>OT</type>
      <name>SPOrbital_t</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>6fabfe504fdcf169149ab896744539e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; OT * &gt;</type>
      <name>SPOContainer_t</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>2b4819064b8653a6906eb14bb50d40da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OT::value_type</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>500eeb5cd53b06700dd7f42481cd7e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleParticleOrbitalSet</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>cbb2fcad6070ecba7cf5b2f302ccdb22</anchor>
      <arglist>(int norbs=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>6a6a8c244799460cc33bac0e8913ff45</anchor>
      <arglist>(SPOrbital_t *afunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>5399385ee65311b78de1da1960b6a949</anchor>
      <arglist>(int norbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>bba79bcb057ecb39144f5a3d5c92a1d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>77c12d72e437c7c74b2c3d2c4a99dc9a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>cc47f55e15d0533992ced2447c811d31</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>d0d8725b658f78b51148f0a92719f1ff</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a5330e06d1e8456bbfe7312bb9b98236</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>SPOContainer_t</type>
      <name>Phi</name>
      <anchorfile>structqmcplusplus_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>4105867ab5858f70210d225dc89b0bbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SlaterDeterminant</name>
    <filename>classqmcplusplus_1_1SlaterDeterminant.html</filename>
    <templarg>SPOSet</templarg>
    <base>OrbitalBase</base>
    <member kind="typedef">
      <type>DiracDeterminant&lt; SPOSet &gt;</type>
      <name>Determinant_t</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>3ff24f25a5e2bb99acff5078698d4997</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SPOSet::BasisSet_t</type>
      <name>BasisSet_t</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>e6d5d6eb88bdf87dc826ce386d277477</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterDeterminant</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>4ecdcc677cc67607b6206f65a4523679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterDeterminant</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>f7f80608f852778981a7e4fc49a1b735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>46ba7f7fb5866876390c00b6eca0ab0a</anchor>
      <arglist>(Determinant_t *det)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>d58efab6b81a5669b6af94575dff70c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>7bbf378dac36cdc8850f14842cfd32c0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>6cb67657f2137bbc3936744f4ecf21d7</anchor>
      <arglist>(BasisSet_t *bs)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>52c07e64a1c05dd431740969610ee929</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>2498d950a1d5b6955755e5b4430ee847</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>cfd607e4b498ac63fab2d5cbce55aa6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>83636d8080d84f710a8a5f685b01886c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>aa028a72d881d706b4bd760b5d53b676</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>00be0c0daeac1d3fee462ce470b54b8b</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>11a4a3d8bb77ba74d1c81efc26d621bd</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>bcfc89ec16d67ff0a8461c4e7877ed80</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>06dc4a17067e552af06a1398aab35dd7</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>3dacac5ea82569d1fb6b34fd7674cd99</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>d329b5b49ea1c8a842a494097b70132e</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>24b1da09227bddbc5ad8eb5ba70ef55d</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>logRatio</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>e7da885e7d4f4331cdff80d966b31eaa</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>9660a9e5d8788f015a8259aa934b5f44</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>ad8fe81a97de72c7eecdc4f038b9311e</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>63dce3f30e7772b0e94095f10db6cc13</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>020e8bbb3a51f315dd59f5c57ccffe12</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>M</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>06c52c8dc11a3565f3228f2fd633003c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>DetID</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>660ac3a411e954b33ce120b59def41c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Determinant_t * &gt;</type>
      <name>Dets</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>93ef1a742d52f982e77aefb4a643c58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSet_t *</type>
      <name>BasisSet</name>
      <anchorfile>classqmcplusplus_1_1SlaterDeterminant.html</anchorfile>
      <anchor>435616821137eb84ca88d3653ba869f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SphericalBasisSet</name>
    <filename>structqmcplusplus_1_1SphericalBasisSet.html</filename>
    <templarg>ROT</templarg>
    <templarg>GT</templarg>
    <base>qmcplusplus::OrbitalSetTraits</base>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>33193296e52fdf0fc340d810abbcbe3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ROT</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>8e297814ca2b56c3a51815c524e849b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalBasisSet</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>12321e8be1a271e618d60c792a735d0b</anchor>
      <arglist>(int lmax, bool addsignforM=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SphericalBasisSet</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>37a5a273e50a98df05e8e0a161e92805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>471640867246b87bfbe3dc83f3500f6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>b5197d24c3254b79c3f768d579bbb16b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>34d058c590c699fba596584db8ea093a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>55f11aee61016be09dafd27537a60241</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>3378c7130111d95ef0451096bd15d7b6</anchor>
      <arglist>(const DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>1314f3ac274b4f806f9db26c35cdd699</anchor>
      <arglist>(int c, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>d0fcbd48ad49612cc85bae2edbad8967</anchor>
      <arglist>(int c, int iat, int offset, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>f74699afe438c631a597aac1b9741f24</anchor>
      <arglist>(int source, int first, int nptcl, int offset, ValueMatrix_t &amp;y, GradMatrix_t &amp;dy, ValueMatrix_t &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForWalkerMove</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>af89a43fcefc49a9a6d89647e3f2b397</anchor>
      <arglist>(int c, int iat, int offset, Matrix&lt; ValueType &gt; &amp;temp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateForPtclMove</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>d70e324ea20c5ffa2e291aa180e7aa69</anchor>
      <arglist>(int source, int iat, int offset, ValueVector_t &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAllForPtclMove</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>4b73af16aae1746afd610e1427dd4171</anchor>
      <arglist>(int source, int iat, int offset, ValueVector_t &amp;y, GradVector_t &amp;dy, ValueVector_t &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>39bfeaaddb1a33122baa6c3a84d811c4</anchor>
      <arglist>(RealType r, RealType rinv, const PosType &amp;dr, int offset, ValueVector_t &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>3da3824125b40c091d6324493ed70fab</anchor>
      <arglist>(RealType r, RealType rinv, const PosType &amp;dr, int offset, ValueVector_t &amp;y, GradVector_t &amp;dy, ValueVector_t &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>84404214088a58fee82ee68be2319c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentCenter</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>4d43f62a73edb439bd67acb35435a16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentOffset</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>b965a994b6a5f377b1ffc3c58864dc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>499eb3e78731822ad00747ee9ebd2f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>53fe02ad1bbb72a8989f0826ff1729d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>LM</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>62fa52980a44a62dabbaf0cb2ed52863</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NL</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>718e904d052241e13f082545048395f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GT * &gt;</type>
      <name>Grids</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>2faeab744e7a59b76ebcc20d9935da2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ROT * &gt;</type>
      <name>Rnl</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>c47ebe66cea425a370ad0924adfc5e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; QuantumNumberType &gt;</type>
      <name>RnlID</name>
      <anchorfile>structqmcplusplus_1_1SphericalBasisSet.html</anchorfile>
      <anchor>0089a453e75950b155e8b1d68ff9103c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SphericalOrbitalSet</name>
    <filename>structqmcplusplus_1_1SphericalOrbitalSet.html</filename>
    <templarg>ROT</templarg>
    <templarg>GT</templarg>
    <base>qmcplusplus::OrbitalSetTraits</base>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>15c64bb8903071c2ca33640f29b295f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ROT</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>f36291ec3ec2ce1001366988083c5746</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalOrbitalSet</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>8a60f2b50076bb934d16223899aa10c2</anchor>
      <arglist>(int lmax, bool addsignforM=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SphericalOrbitalSet</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>6695f8d2e46407dfbd43fe65c618640c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>bf5468510b8c662342369ef110f42a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>980762c175d452df245be90b3d5651ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>51cdf44cd4c1b63476e0c766af55b29b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>b8a3541c55ac2fecedef33aaec8efcc1</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>f211adebd42e8a2f6b261f207f41d2ff</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>c2a812f223b11b12a031888c012bda5f</anchor>
      <arglist>(int c, int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateBasis</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>0547392f73b5c2d51b289d1d6b44da7a</anchor>
      <arglist>(int c, int iat, int offset, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>87a1ba4f2e28f7e8accb2ed8164cec87</anchor>
      <arglist>(int source, int iat, int offset, VM &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>1aa2a7e7b614615a20cbf0ac7636ec36</anchor>
      <arglist>(int source, int iat, int offset, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a8de11136ea9d62b228db28664ccf948</anchor>
      <arglist>(int source, int first, int nptcl, int offset, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>BasisSetSize</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a8ce8cf75686f68b5adf90cbd3e49c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentCenter</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>e6a275e6353e82d0317ceedb7b4e0fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>CurrentOffset</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>1b7ae62a6dfc83369b23b712cdbdb1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>ac00e0afec55c46f9da75048c9f17955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>284eaefb6c6b6112d16552bda66c649c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>LM</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>d7c099852111c5265e8ab9d7e92a5a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NL</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>508640407d44ac683751b575d0580195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GT * &gt;</type>
      <name>Grids</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>cf35657a99374e597a22a43bb9d27b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ROT * &gt;</type>
      <name>Rnl</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>ff5e16849cc0be6bf7f9a7b14eed690a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; QuantumNumberType &gt;</type>
      <name>RnlID</name>
      <anchorfile>structqmcplusplus_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>59096e58c732a66ca1b6cd494601d18b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::Spline3DBuilder</name>
    <filename>classqmcplusplus_1_1Spline3DBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>Spline3DBuilder</name>
      <anchorfile>classqmcplusplus_1_1Spline3DBuilder.html</anchorfile>
      <anchor>3f51d3fdf5d980dd270fcab34f6f27d8</anchor>
      <arglist>(TrialWaveFunction &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1Spline3DBuilder.html</anchorfile>
      <anchor>6c3af79e26c7da69c892f21d25a9c4af</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>Grid3D *</type>
      <name>getFullGrid</name>
      <anchorfile>classqmcplusplus_1_1Spline3DBuilder.html</anchorfile>
      <anchor>2044bc881d152b4482dcb144628b659a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SingleParticleOrbitalSet&lt; Spline3D &gt;</type>
      <name>SPOSet_t</name>
      <anchorfile>classqmcplusplus_1_1Spline3DBuilder.html</anchorfile>
      <anchor>7df35a82350562ff2d73fe1949b9c2bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Spline3DSet *</type>
      <name>d_orbitals</name>
      <anchorfile>classqmcplusplus_1_1Spline3DBuilder.html</anchorfile>
      <anchor>d67619cc61b04b24d5f91d63e59fd2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Grid3D *</type>
      <name>grid_ref</name>
      <anchorfile>classqmcplusplus_1_1Spline3DBuilder.html</anchorfile>
      <anchor>b3ba3c8795e08ef2e93ab1cf2e9ca0f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SplineSetBuilder</name>
    <filename>classqmcplusplus_1_1SplineSetBuilder.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; ValueType, RealType &gt;</type>
      <name>SPOType</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>022d3036d99c1cc88f2a8670519931b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; ValueType, RealType &gt;::GridType</type>
      <name>GridType</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>d76d6f0131c32aa0c42edd20a9e2cdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SingleParticleOrbitalSet&lt; SPOType &gt;</type>
      <name>SPOSetType</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>6423d16241959b2d1c8fcc6376f17949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>8a0786ccd91f6c57879bd946f39d98df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineSetBuilder</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>096bc3b884df56788a476f4247e59445</anchor>
      <arglist>(ParticleSet &amp;p, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>647ddb3d3420b0eaedd4b790bb41a8ed</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>b8e11e225f708694d8743d61e755b4e0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>6f45875f6ec9d1424bad9b9405e55a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>a462003f32bde182824c3a8571e58dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridType *</type>
      <name>GridXYZ</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>c9c3b9f8faa305cbbf464c980e0917c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPOType * &gt;</type>
      <name>NumericalOrbitals</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>4e587ed8f78f31226b435c0e1ee9cd61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPOSetType * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classqmcplusplus_1_1SplineSetBuilder.html</anchorfile>
      <anchor>b20248fc3a248dd9cbd199c6f0ea8b86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SPOSetBase</name>
    <filename>classqmcplusplus_1_1SPOSetBase.html</filename>
    <base>qmcplusplus::OrbitalSetTraits</base>
    <member kind="function">
      <type></type>
      <name>SPOSetBase</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>0084a1aec863d037a11f98fdace521a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPOSetBase</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>8eefc1bd4422dc13ecc923c9672a30a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrbitalSetSize</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>66819638e9b5d3b7cc7814f41cc90031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBasisSetSize</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>47607787d9e3f388d7b301e320c3c0b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setIdentity</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>fde9cd9dddb9015a49420f4b3328d338</anchor>
      <arglist>(bool useIdentity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkObject</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>b4344a7947b5ec4ba07541abe627f463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>57d76af06fed9c69fb7537d97a969f12</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>6feade26381636a9449dd9d280217f54</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>83b6717c49ba38864a233c16a06a88d4</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOrbitalSetSize</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>22f925f2e289fa3dfc724fe27ebdcb74</anchor>
      <arglist>(int norbs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>a8493862c4b1df33933e9c3426326ad5</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>35f114284109ee07369c43011dad0a34</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, ValueVector_t &amp;psi, GradVector_t &amp;dpsi, ValueVector_t &amp;d2psi)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>9eb9aef385ba90798d92f4bad4d5d5e9</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, ValueMatrix_t &amp;logdet, GradMatrix_t &amp;dlogdet, ValueMatrix_t &amp;d2logdet)=0</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Identity</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>00c29d07af441cc746b14b4a8c5fe833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>OrbitalSetSize</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>6ebf24c955c54664ba9e0b5a892b49df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSetSize</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>a89c9e7adfc8bbde590efbd0404cdb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueMatrix_t</type>
      <name>C</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>28f624c828b4a10584ed0f605bc82d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Occ</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>aea53064ad1b345b4cd1c8afe44f6606</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putOccupation</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>23e4a20d265f4902e15a1a7cb7c24d11</anchor>
      <arglist>(xmlNodePtr occ_ptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putFromXML</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>3112e50b5554fd30649eebdf2147db71</anchor>
      <arglist>(xmlNodePtr coeff_ptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putFromH5</name>
      <anchorfile>classqmcplusplus_1_1SPOSetBase.html</anchorfile>
      <anchor>55c38905c421624908a5b9940d1c638e</anchor>
      <arglist>(const char *fname, xmlNodePtr coeff_ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TrialWaveFunction</name>
    <filename>classqmcplusplus_1_1TrialWaveFunction.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>714b877731dc063a8437138744b28bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>aa78cb8c7bd1e31d0afe614692bfd464</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>ad682720dbe745e4ed1a7d538ea7c37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::GradType</type>
      <name>GradType</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>6dce6a240f71c617bbb6718b0eaee5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::BufferType</type>
      <name>BufferType</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>d6876e43aeed56ce7570c62708bf0c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrialWaveFunction</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>9c504f19076a8645a00eaaf062b4cf86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrialWaveFunction</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>047370d052392999a0952e1660341641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>0058fc40c5e2b88ea2473d4418fee12a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getPhase</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>99e9749218a313d80ab5fbb2ce525df0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLogPsi</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>f4ca58ac9e444d578f4afc8de166c434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOrbital</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>f597285de3ca20ee5f4080cf835e6875</anchor>
      <arglist>(OrbitalBase *aterm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>e15f03649a9b11865e1eb3ff7e60dd36</anchor>
      <arglist>(std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>9a0b90f6b2de63d24d5ad62e9ea4d30d</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>195735beca35f35143b719365a4c415e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>01150cc7ec184b232bfcf8c52d70e4f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>ae02ceb942225adc4c004b42ade7bf1b</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>060d4d63939fff5acb874d2a5686329d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSPOSet</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>066e1650b356e46338d5567a065441f8</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSPOSet</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>ff929c8f9864ed56f759af610adf5b52</anchor>
      <arglist>(OhmmsElementBase *spo)</arglist>
    </member>
    <member kind="function">
      <type>OhmmsElementBase *</type>
      <name>getSPOSet</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>98494244ba02a4321dad26275039bcfa</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>12a027ea1e35cb0c062e35c1e974fc5f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateLog</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>57d5d2bf61d227a3aa127983b26a103f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluateDeltaLog</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>863b165a3f81571b381c21520b060f03</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateDeltaLog</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>201e702c37e23f45b467f3bf60b91fcb</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;logpsi_fixed, RealType &amp;logpsi_opt, ParticleSet::ParticleGradient_t &amp;fixedG, ParticleSet::ParticleLaplacian_t &amp;fixedL)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>b20555a4644bde1801c7ad777b1c7fa7</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>50861b36a033787e59f68d1bd31e6284</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>44a384e59a3135a1bb8b7243c15050a4</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rejectMove</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>f390c7f79c7260ab9fbcdfd85d5bff4b</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>722704511640096b6801747eca1d12f0</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>registerData</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a42843e44cbb50163e8536f83dc8c9f4</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>updateBuffer</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>b2a40c9f072051ac612ebbda6e386bdc</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>08adf7e4e88e324d85def83d1c0e9ac9</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>b09cde0e321c1524484674bedb246158</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpToBuffer</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>44f62078682ed590b72c679a59b06834</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpFromBuffer</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>bfc3d9254355ea7e6557e61dac260760</anchor>
      <arglist>(ParticleSet &amp;P, BufferType &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>VarRegistry&lt; RealType &gt;</type>
      <name>VarList</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>66431138e8c3c982cdb03b68e7b2756c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>156e529a4a0645d9b5dc26f55ad961f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>75652b22a4bd49c8d3cfcac599546cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TrialWaveFunction</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>ac4db3a56c2e2d0e705db4ef47127e2d</anchor>
      <arglist>(const TrialWaveFunction &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>9f3ddbfdf99690f9043832c92d3281b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TotalDim</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>71e27842b3ab7fbbd199d944c97acda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>WorkingPtcl</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>5a498e231fc273857799d1ca69b7ba3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>PhaseValue</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a89b89a1a592f9fb91f918942ae1915c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>LogValue</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>5aac6776a26107351e1b392d360ad77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; OrbitalBase * &gt;</type>
      <name>Z</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>100d550d7eeeb3ec750158c06d3ed1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; OhmmsElementBase * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>7e1687786abf97ebd91268c9ee4de7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>delta_G</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>7bdcccb9cc7e9f635e336974e6453ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>delta_L</name>
      <anchorfile>classqmcplusplus_1_1TrialWaveFunction.html</anchorfile>
      <anchor>d999c67789ecd684fed0fcd61dd3ff01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TricubicBsplineSetBuilder</name>
    <filename>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</filename>
    <base>qmcplusplus::BasisSetBuilder</base>
    <member kind="typedef">
      <type>TricubicBsplineSet&lt; ValueType &gt;</type>
      <name>OrbitalGroupType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>368f1d75975f90f3fd953b88c2f1f258</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TricubicBsplineSet&lt; ValueType &gt;::StorageType</type>
      <name>StorageType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>b5ca459de908d78438750830befcda03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GroupedOrbitalSet&lt; OrbitalGroupType &gt;</type>
      <name>SPOSetType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>50210ddd495698790bbaaf22886f3f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>54129bd4aee1c945435925f042d638e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TricubicBsplineSetBuilder</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>2fe9dfbf14605badd3233d182dfc91ed</anchor>
      <arglist>(ParticleSet &amp;p, PtclPoolType &amp;psets, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TricubicBsplineSetBuilder</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>af4a0c555a8a7d441052da11ee54a8fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>5e75d9afb9fb09c9eeb9d983fa307a6e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>SPOSetBase *</type>
      <name>createSPOSet</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>948a62bc4811f5364c0de8c2174187d0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SPOSetBase *</type>
      <name>createSPOSetWithEG</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>b397cc4bd5ae8e6b198fab5caaed58f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>DebugWithEG</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>23e282156d7029e043d3dd2bb4293ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OpenEndGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>23c9854d1ebc04aea5fa28dc538d8c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>aba732c3c732f0a25b2911fb84be7ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>de0bc17a6ea98f0d82e7cf4d4fcc9072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>rootNode</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>aac974c5d752cad96c5d42f251159854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>LowerBox</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>b9e2b40fdb5d479c28442a3fa89f91bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PosType</type>
      <name>UpperBox</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>9283dd4fd66f96b6a65834836749b94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; IndexType, DIM &gt;</type>
      <name>BoxGrid</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>6a24e47bd94f8cb0b78fde50668fb87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, OrbitalGroupType * &gt;</type>
      <name>myBasis</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>0e66348440501736dfc6cd85c2bb142e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPOSetType * &gt;</type>
      <name>mySPOSet</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>f5687c3ccd063c33ae365d5e8be39149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PWParameterSet *</type>
      <name>myParam</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>94620f60192c2294098e2de1e6fe41c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static map&lt; string, StorageType * &gt;</type>
      <name>BigDataSet</name>
      <anchorfile>classqmcplusplus_1_1TricubicBsplineSetBuilder.html</anchorfile>
      <anchor>5b1a17967d22ce7973697587dc32951c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::TriCubicSplineBuilder</name>
    <filename>classqmcplusplus_1_1TriCubicSplineBuilder.html</filename>
    <base>qmcplusplus::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>TriCubicSplineBuilder</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>6dcc083c597d4467db733c0ecc640813</anchor>
      <arglist>(TrialWaveFunction &amp;a, Grid3D *agrid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>0e8092c59bf5314ab3590fdfe78c8152</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SingleParticleOrbitalSet&lt; TriCubicSpline &gt;</type>
      <name>SPOSet_t</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>c672b3c76f098e24bc29a85674f5264a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TriCubicSplineSet *</type>
      <name>m_orbitals</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>820d1bb170691dc4740e5c29cfcf72e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Grid3D *</type>
      <name>grid_ref</name>
      <anchorfile>classqmcplusplus_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>88355573211eac6b4ea0f628d58fe24a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WaveFunctionFactory</name>
    <filename>structqmcplusplus_1_1WaveFunctionFactory.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>648774d29304251209db82c913a7cd39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaveFunctionFactory</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>0c283eb5cfbd08ed55d19a7d37bea5fb</anchor>
      <arglist>(ParticleSet *qp, PtclPoolType &amp;pset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WaveFunctionFactory</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>ee7c04a3db58dc9b75e2df8a1af6aa66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>4438bb7df2cbfff411589242751a4d16</anchor>
      <arglist>(std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>25300a9e6842cd87b5ca2eba0b68e97f</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>276ad584e99e787e2de93d3d78958952</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>8785cc1105363559b3b6e9f6c234088c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>build</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>bd463d7d69f497660221015d70e8987c</anchor>
      <arglist>(xmlNodePtr cur, bool buildtree=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFermionTerm</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>ae08832746588d796b58765ae2a3b3c6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addNode</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>c75029515a360927a3814548282456c6</anchor>
      <arglist>(OrbitalBuilderBase *b, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloneSize</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>f12d928ab95ddd1975d143ab1885cb48</anchor>
      <arglist>(int np)</arglist>
    </member>
    <member kind="function">
      <type>WaveFunctionFactory *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>ac803f2664c7623b1c0171b0c901590a</anchor>
      <arglist>(ParticleSet *qp, int ip, const string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>e493a744f2748611215bc3d5a3750d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction *</type>
      <name>targetPsi</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>47e8c9250fb20f2542be7b9ebbe83653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>11c07f2971a0f3d65d516c9751eec612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>31f5c67b4d239ff8fe2edd603f621a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; OrbitalBuilderBase * &gt;</type>
      <name>psiBuilder</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>73d80ba18549865be8297add7462a22e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; WaveFunctionFactory * &gt;</type>
      <name>myClones</name>
      <anchorfile>structqmcplusplus_1_1WaveFunctionFactory.html</anchorfile>
      <anchor>9deca323ccb2f0ddd43882784f998d35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BareKineticEnergy</name>
    <filename>structqmcplusplus_1_1BareKineticEnergy.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>BareKineticEnergy</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>9d5f6c944d356ac87a050c74e6b1f4ef</anchor>
      <arglist>(RealType m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BareKineticEnergy</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>7533e62ac61d0ae83068009b55fbbe88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>7cd586aeb0069ed60952d73e6a50d88b</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>9aef8a4c9027f67c51177c3efad3a75d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>e89b96e03bbd9fc6e371b3fbae23bf44</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>2e0a9128875e3d3544d11c6ee465d71b</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>135255821ce474554ac2193a5904188f</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>76ab30685db786faf4342b297bcf9b10</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>M</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>f220c0735e693b4f07c27da76f32c43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>OneOver2M</name>
      <anchorfile>structqmcplusplus_1_1BareKineticEnergy.html</anchorfile>
      <anchor>5ce37a4716ff811fd5187c50157747c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ConservedEnergy</name>
    <filename>structqmcplusplus_1_1ConservedEnergy.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ConservedEnergy</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>dbecdae22bb7641b4eaf2e15a302efd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConservedEnergy</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>7e69ece42c1d324bb8e871d1440e173a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>c8dac24e3313992864cc7896e571f292</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>213ba79adb0490de7ab9c85868a5b1b9</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>045a34d86b6e6fbee84e7a2677e8b2d4</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>5aa1dc49ae31a179703a3be34fb52443</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>b2e11826e49ba5328b4933e711362bae</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1ConservedEnergy.html</anchorfile>
      <anchor>f4673c69dcfe785bbfa10dc72d8f6bef</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAA</name>
    <filename>structqmcplusplus_1_1CoulombPBCAA.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>104a12b3776211fc4a2688253b3b3683</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>315820f302fb357e58730ca6ee643bba</anchor>
      <arglist>(const CoulombPBCAA &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPBCAA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>0711d7066bfdf8fc8821960137e76056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>04acea179a21ef2e00f1eb6f848b5292</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>0a00996465ef346b00869bed76adeab0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>48d4775da7b1f375a9ed8c292c8e82f6</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>4b35b0f7ef8ba118e6ad88623e0bd5a8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>ade0719d3b25345a9079ddc9caa6b900</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>83c7859a32cd32e21b740537a34b94ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>68c10066473b5e5ad0efdf125845c4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LRCoulombAA&lt; LPQHIBasis &gt; *</type>
      <name>AA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>e15ee5f95b6f2f7727db69eb58939101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAA.html</anchorfile>
      <anchor>1a9fef27966ffc0a6025a1958769de66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAB</name>
    <filename>structqmcplusplus_1_1CoulombPBCAB.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>f4bb4b86d499038b2bda639f3150c7c4</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>81a863e708138d8e12ac6204e8e2fa57</anchor>
      <arglist>(const CoulombPBCAB &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPBCAB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>f9a445894306d0580e0bec35a6b58e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>f6e51944338504192716381c8ce0de6e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>d19f263b4dbeee16144dced631bebf3e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>9f1300bf80e5de9169ce43ece0ad575d</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>9681d7f16799b667dc0030f1c0ac271f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>85e05708ed79c7a84b162e0b926edabf</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>95a9e0a80943af494f59662489b74a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclIons</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>55461eb3c8e24619364f70fe4ab8b1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclElns</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>199b436def31130bf38cfe0bf1d06032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LRCoulombAB&lt; LPQHIBasis &gt; *</type>
      <name>AB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAB.html</anchorfile>
      <anchor>7b035e113d12bb1a49566ae2015863f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCAATemp</name>
    <filename>structqmcplusplus_1_1CoulombPBCAATemp.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>LRCoulombSingleton::LRHandlerType</type>
      <name>LRHandlerType</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>810cf75305e92261ea6b1a899cc7a422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::GridType</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>557840a1dcd1e492613f3556560133be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::RadFunctorType</type>
      <name>RadFunctorType</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>2110933e69c92f8ed7b012d6a8f75ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAATemp</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>9c220644d1a1d3123cb6843e3668165f</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCAATemp</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>5f4520c6665cb64ccbe40735b397b730</anchor>
      <arglist>(const CoulombPBCAATemp &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPBCAATemp</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>6df9388af7ad89b9194ed662609da465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>c3bef73a5c1b45171bd8cbc0577f5943</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>e2b330dcb671d4a4d0531cb98419b714</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>72687aa059079e5735d066c4da821897</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>082320159f1beff4203523b7347c5eef</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>e8bc72ee0ba5a38343ed148cc67c687c</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>5ff075a54f56d4f8ef23c6525693bc08</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>eeade43c0e0ef1b0bd6979e6d1a37288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalSR</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>117c1c16170725a6e97869d548549f36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalLR</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>752cc7a993dafd492434aa3cd37fcab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalConsts</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>cf87b3925353a02b4718734dbe142d3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>15ce511043df9823aa16c53a1e0ae119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_aa</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>bb588fd3fb80e7b0e18cea941e263cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LRHandlerType *</type>
      <name>AA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>29e4030570183b25c2d8bfbd82412879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>3b8c9e7c1fedf4f617c56f3266819bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadFunctorType *</type>
      <name>rVs</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>3d42ac4cacdc68682416fb0360cde7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>b2021f7efea1457c5b43f0ec11343989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpecies</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>6dc509ff17b7baa6996a89e9642c7c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ChargeAttribIndx</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>f1187f0a2e4cbcc8ce770fc39a5ffee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MemberAttribIndx</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>42706f94fac2573956f5df55415bf9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NParticles</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>dc455e9a8dff44b0e046a1d940aa1bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myConst</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>159ae2b1a7661ab425c0c1182d095533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myRcut</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>264f812755e4d8c953d04e8e17023676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>5d9ea1ee6090eee74558ae4e309f23a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>1a5a2ed094d15d3feb8e25a8b7e2d6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpecies</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCAATemp.html</anchorfile>
      <anchor>fdadc246f2578d8c72cdc7b5fa69543e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPBCABTemp</name>
    <filename>structqmcplusplus_1_1CoulombPBCABTemp.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>LRCoulombSingleton::LRHandlerType</type>
      <name>LRHandlerType</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>9d6729831ee4aa4e7b0dc6ae015108c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::GridType</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>0114115020b6ac3e4549108c25773812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LRCoulombSingleton::RadFunctorType</type>
      <name>RadFunctorType</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>674634aef49afa90cc7a853451195ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCABTemp</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>9b696494c38a6083645069f6b700eb10</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;elns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoulombPBCABTemp</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>d21372c9af1e266df355a2b2a4ee05d7</anchor>
      <arglist>(const CoulombPBCABTemp &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPBCABTemp</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>ceff2e8d5d05f64f7031348b0d51beea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>89423146a169e3bccedb7422eb152c0f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>ae8df71b2a35ca9f8c6349eeaf435a6b</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>aa4cd4287aeefb199010c63500dbe710</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>82e736112f85f96f103be259c19e1308</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>2693ea2e5486ef282897f8c1fb95f1e5</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>aee84c52c934f37e74ad3f3b0f69eb79</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initBreakup</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>9798d1d7efc417deaa007607b8c09d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalSR</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>7e3bafafb270903565f61d5d3bad9e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalLR</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>c005c8e12c6fd6306f72940fd3c3531f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evalConsts</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>b3a9b11214f12abf72709acb69de385b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>86f5889c9e32a36b76795896e573c2ae</anchor>
      <arglist>(int groupID, RadFunctorType *ppot)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>8bd5abf1bf873a95e81aac0a0dfb435b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>638911de1dd0dc2cc27afc6f29910572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LRHandlerType *</type>
      <name>AB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>958208d673c25eae1f126ebf071e4315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ab</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>174091b8bf7b2c9af2370e5871eeed9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>d998245a51772221ce7cf0a7370966a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpeciesA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>964750861201222cefe059114fed7b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSpeciesB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>5a72729564762e9e04c26a518fb92075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ChargeAttribIndxA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>64a43911abac42b62ae4cd271de59053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ChargeAttribIndxB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>159adcbcfe67823c4d03b765f3eef936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MemberAttribIndxA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>4a156e1fc5cc347aa620a59860ca577b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MemberAttribIndxB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>5d36bcd6e776dabc9525444668693a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NptclA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>d5e6ca78218028cde494d16014c1a854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NptclB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>22e663e38dc6ba61cbfc8fe16f5b9e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myConst</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>2d15b44d120089df25a0c17a20540c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>myRcut</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>fe97b8e7861e98a348f7d9cc35454f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zat</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>79a46b42dc0637906c9737e171c126e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zspec</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>e49ad1777ecf9fb35085a6c8b8d4223c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Qat</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>c9451370ad2c112cc559aa5b90d6f634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Qspec</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>913eef29eaca7fed5e49b842d3761ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpeciesA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>d733c5e7000fbf2b8e5ec04cdc51944d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NofSpeciesB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>60311084dd7840936cb494eb15b5004d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>myGrid</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>386f5f77655739dcd6d731b00bb6acd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadFunctorType *</type>
      <name>V0</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>a4bd40ee8cfdc3c4ac877393672543ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadFunctorType * &gt;</type>
      <name>Vat</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>500c45b5e187e98220f660e7d3b4c10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadFunctorType * &gt;</type>
      <name>Vspec</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>77d1f42b94b92b5aa92ee80ab2958780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>kcdifferent</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>2f5687bd1a1ab1a5c5c3dae1b85a409a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>minkc</name>
      <anchorfile>structqmcplusplus_1_1CoulombPBCABTemp.html</anchorfile>
      <anchor>8159b88172484fb12106beae9e47b43f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPotentialAB</name>
    <filename>structqmcplusplus_1_1CoulombPotentialAB.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotentialAB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>661720cc50a68c080c85df875f7f81ba</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>8f211565a50d518ddc381a1e3afa9f62</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPotentialAB</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>130446b92426b714ba400aaf9d51ba58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>5dddceb3a32163fe28c03dcdfa0ab6a8</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>760d9d0e631229a2df5341d365315aa6</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>8fff236563737a1060113bc275b0c6c5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>cdce37bbb6db7e9a5ff682e4d15c350f</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>712bca942a824cbdbe9daca8d055f133</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>42c673c7f837c8650d65d92dae2fcb49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Z</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>89e5a46da1707595d895ec1f9747ddf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>8c97289b86251ccd519353c035014495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>b045682238d0e119af1ff7a865b0cf46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::CoulombPotentialAA</name>
    <filename>structqmcplusplus_1_1CoulombPotentialAA.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotentialAA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>b7cf0887cfd50198deea6e1644c3a85a</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPotentialAA</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>5c30b7d1831353e98613bfe93c5f9ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>c3866ecd00c2893f3021e5d0e3fef104</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>66ab4285f46f617c66cdbbd598dfcf2d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>96f352f8d0d7eb006f8055e8c6a09abc</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>567d5c12a1590a82ea2eb7201a764bdc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>6ba37b65ae7f0faf20753a74bf87eb1e</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>4107a81f8c19b17db57b656e865eaa44</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>93037dd93e726bce5c8ee2d96d10a47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>026dd0f05621534c6d34f0e927e5d642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>PtclRef</name>
      <anchorfile>structqmcplusplus_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>355a0d90c888a43ef15e3dd49aabf6fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ECPComponentBuilder</name>
    <filename>structqmcplusplus_1_1ECPComponentBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>LocalECPotential::GridType</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>2fec599dee81befbf365416a44b2b438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalECPotential::RadialPotentialType</type>
      <name>RadialPotentialType</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>2224dbcbe68dc1f799ba3f98f372f7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ECPComponentBuilder</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>94ff58e4e9057002a7ca232f7106368e</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>8a2a92913e003d91938af7709c1dbc25</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>589fdaba40584d4d848340b0990a2fa2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSemiLocal</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>611d9f95ec6150ae4ec47c68bd4acd33</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildLocal</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>cc0f2d905e769dda0371fb51d9924eb3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSemiLocalAndLocal</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>99bd90e8e1d53430eaf2fa061426c3b8</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;semiPtr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseCasino</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>216c2ead79e6f47a444cee9f6058e4dd</anchor>
      <arglist>(const string &amp;fname, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetQuadratureRule</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>a9d52aa1c22aefdd33277c253947c592</anchor>
      <arglist>(int rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CheckQuadratureRule</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>f23e1d50e7352c9aab7c7005313de98a</anchor>
      <arglist>(int lexact)</arglist>
    </member>
    <member kind="function">
      <type>GridType *</type>
      <name>createGrid</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>c3cef9b4b0e4e3e3671c102b5744dad1</anchor>
      <arglist>(xmlNodePtr cur, bool useLinear=false)</arglist>
    </member>
    <member kind="function">
      <type>RadialPotentialType *</type>
      <name>createVr</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>f2448529ae84eaa37797e342d20c97a4</anchor>
      <arglist>(xmlNodePtr cur, GridType *agrid)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumNonLocal</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>f1b81f18bacd213adb18cccf1f698a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>2fd4832c32f0fb83d02ff3276899871e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Llocal</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>a2ae9b89dcc8b123f76d3a3af501963e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nrule</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>91672e3403300ea4f66661b99d2ff1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Zeff</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>b6b0aa1f734c5d62de1484cd8d7e0c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Species</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>e0e2c62834f270c8d2ff351e88ddaeec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>grid_inp</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>e99413fd1b71d7185c621ffa4003f22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadialPotentialType *</type>
      <name>pp_loc</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>49f5aa6b68ac63a9f567e9c0c8ff207b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NonLocalECPComponent *</type>
      <name>pp_nonloc</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>e892d53fc68218f30e460e961551de06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, int &gt;</type>
      <name>angMon</name>
      <anchorfile>structqmcplusplus_1_1ECPComponentBuilder.html</anchorfile>
      <anchor>6105e9b662714c6414ad08617dd2223e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ECPotentialBuilder</name>
    <filename>structqmcplusplus_1_1ECPotentialBuilder.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>LocalECPotential::RadialPotentialType</type>
      <name>RadialPotentialType</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>6be344ac32f38124b78549f3ea980f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalECPotential::GridType</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>db84745b33a851fb682710596778edf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ECPotentialBuilder</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>c8729fa10b97056dc9cf1745574b5495</anchor>
      <arglist>(QMCHamiltonian &amp;h, ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>185412c3156f8ee7345332256f630118</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useSimpleTableFormat</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>127cf5c582d33447cead33ff6273a18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useXmlFormat</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>7673840562ac638b2212ad995f82eb4f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasLocalPot</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>c94fad490ab2cd69ef9d300d6696b32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>hasNonLocalPot</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>9a3ffd87e1b93d402fd833025a0d58ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCHamiltonian &amp;</type>
      <name>targetH</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>0c5ac00d0a1443a5c7147cf2020cc3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>db281db1692d61b2b2cf9f0362a0fe03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>87600257aaf4f4bbc4c5c4d5ebacdba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>targetPsi</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>abe4f32b6cc2b845d725214c83909774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>localZeff</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>fd93fa1355cd0b2cc5ead81d37427df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>localPot</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>387741daf1e96af82648241a70760f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalECPComponent * &gt;</type>
      <name>nonLocalPot</name>
      <anchorfile>structqmcplusplus_1_1ECPotentialBuilder.html</anchorfile>
      <anchor>3c8bb9b4572e96dd7d02025f9c826d53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::EffMKineticEnergy</name>
    <filename>structqmcplusplus_1_1EffMKineticEnergy.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>EffMKineticEnergy</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>c70a1e957653a6358edc32311d8cf2e7</anchor>
      <arglist>(const Grid1D &amp;aGrid1D, const std::vector&lt; int &gt; &amp;intvals, const std::vector&lt; int &gt; &amp;priority, const std::vector&lt; double &gt; &amp;inveffm, RealType m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EffMKineticEnergy</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>e4a73676218c8cfcb083088fb4a1c026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>ff709117169cecc29463c81d52641106</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>10ffc18884570b6cd961dcac13999925</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>6b1d39b543b6d42143565d0c16d40d1f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>M</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>e9869745c906cf3d41aa9ffefdfa2da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatGrid1D *</type>
      <name>inveffm_grid</name>
      <anchorfile>structqmcplusplus_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>e8363571b817b84c8fd4e219cf86e509</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::FSAtomPseudoPot</name>
    <filename>structqmcplusplus_1_1FSAtomPseudoPot.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::OneDimCubicSpline&lt; T &gt;</base>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; T &gt;</type>
      <name>mybase_type</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>f9f96c87363f8db8d03e11cbf6348b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimLinearSpline&lt; T &gt;</type>
      <name>return_type</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>9a31a1b49c896a362a02137a6e0ec88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mybase_type::value_type</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>350e9f03b94d1f5983a1899063429554</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mybase_type::point_type</type>
      <name>point_type</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>c16fd63aded9003cc74483007de01e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mybase_type::data_type</type>
      <name>data_type</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>ac73a393d5dc3e0cc96be567f38d041b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>mybase_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>6f3d2ee3eee78e99c411c79250c1ca3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FSAtomPseudoPot</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>0bdc78cf69f0ebf443822c7007ccfc31</anchor>
      <arglist>(int l, T rc, grid_type *agrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FSAtomPseudoPot</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>7c37e60bd5e89252b503d0f4917f1fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2RV</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>fb63776f7a93bd0e11fb715135d60bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getCutOff</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>a785dc86e54c6caf8d715de598eab92c</anchor>
      <arglist>(T v0)</arglist>
    </member>
    <member kind="function">
      <type>return_type *</type>
      <name>getLocalPot</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>fd485f4dcaee1c28882e503d8268e9b4</anchor>
      <arglist>(T sc)</arglist>
    </member>
    <member kind="function">
      <type>return_type *</type>
      <name>getNonLocalPot</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>3a3f75e84d2e36ea940124436795df8a</anchor>
      <arglist>(FSAtomPseudoPot&lt; T &gt; &amp;vloc, T vFac)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>fe2c8a5aeea7eaff5fd5e530089e64f1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>AngL</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>7ae3b8ae5897f9550860bd2959264dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Rcut</name>
      <anchorfile>structqmcplusplus_1_1FSAtomPseudoPot.html</anchorfile>
      <anchor>97aec9a3e1c4501d5deb5e41ce04be3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HamiltonianFactory</name>
    <filename>structqmcplusplus_1_1HamiltonianFactory.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>08ad514adb575a9e8cd5a938ca421cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, WaveFunctionFactory * &gt;</type>
      <name>OrbitalPoolType</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>ec44632ba3e258b61736fa6a9755e2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianFactory</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>c9b3f0df790769ab2574a0105b65314f</anchor>
      <arglist>(ParticleSet *qp, PtclPoolType &amp;pset, OrbitalPoolType &amp;oset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HamiltonianFactory</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>fd3862b655344a488e941d69160ddb84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>8371c2e2f0c11980ca53775045fde44f</anchor>
      <arglist>(std::ostream &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>06247016b87be19c930daa9a7dffb179</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>277248a1f2e402209aa88754c29c1da9</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>ea0f326021dabdfc95c0ec4b08b2c714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>build</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>d6b176cd8dde0f3d8ddff9a91ec7fd8f</anchor>
      <arglist>(xmlNodePtr cur, bool buildtree=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoulombPotential</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>994d9f877be079cc765a4d0346bf94ed</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPseudoPotential</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>b3d90c4d185e36b11a2273d8bad874a7</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorePolPotential</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>a96adc21f8e4ce4c42d1ac87fa759a3d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstCoulombPotential</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>05973f4444d5601afeb1378afd227d47</anchor>
      <arglist>(xmlNodePtr cur, string &amp;nuclei)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addModInsKE</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>843341a210126f6029b79950dee643e3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renameProperty</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>52349b86067a2136ddfb7f7400454f36</anchor>
      <arglist>(const string &amp;a, const string &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renameProperty</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>820e81a8b68bd5d10e8bab31c6b9c580</anchor>
      <arglist>(string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCloneSize</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>a041caef0416bb17dc1e32ba0e8c4620</anchor>
      <arglist>(int np)</arglist>
    </member>
    <member kind="function">
      <type>HamiltonianFactory *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>74aeddc252d3d8a03a7b135120945ca7</anchor>
      <arglist>(ParticleSet *qp, TrialWaveFunction *psi, int ip, const string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>PBCType</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>4e66e427722126f894cdf1f8e45890a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet *</type>
      <name>targetPtcl</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>da8cbec726a4bb47c583d01d7f872207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCHamiltonian *</type>
      <name>targetH</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>0f5ab981931a765559fc2f70265a2e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>5089dcb7cd2365ae82d0f17f25f299bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrbitalPoolType &amp;</type>
      <name>psiPool</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>b56aaf442822be6468c4a9cde5d09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>313548262ee14dc1e895e1226fa36709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>psiName</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>a63bc86de32f681aca69a117af3b0ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, string &gt;</type>
      <name>RenamedProperty</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>629450229f1693237d77f2541bcdda8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; HamiltonianFactory * &gt;</type>
      <name>myClones</name>
      <anchorfile>structqmcplusplus_1_1HamiltonianFactory.html</anchorfile>
      <anchor>0dc0f275e0b6e50b5b03ccb9db82d56d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HarmonicPotential</name>
    <filename>structqmcplusplus_1_1HarmonicPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HarmonicPotential</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>8d35b69df1abaeaa2283645d43c4ef95</anchor>
      <arglist>(ParticleSet &amp;center, ParticleSet &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HarmonicPotential</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>9b45f26667b83161374e6a6d26d0dbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>af357a203712808a2d4bc5a246002f8e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>088cf28e9bb6a9460ef8feae2e3f3d7c</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>e1c5c09ebc3fb87896c28d94b3482a7b</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>c65698c2aa3b7eef085a59af8d7274c4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>080f2e91cc167412a4966e6d6c787805</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>e7dffcc83df39be05bdb5ebfa0e5d677</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>b1238b982e5013edb500cbadbf31b3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Omega</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>a8b6f1168738c842106b3f62da7e6395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>dfa3c188479b036c923577a01e09a6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>sourcePtcl</name>
      <anchorfile>structqmcplusplus_1_1HarmonicPotential.html</anchorfile>
      <anchor>fdc42c172fb395947756ad717e53c806</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::IonIonPotential</name>
    <filename>structqmcplusplus_1_1IonIonPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>IonIonPotential</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>66bb023474a166aaf302920c68570c21</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IonIonPotential</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>ee330443c3078c9daa233cd1309e28d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>7fe9eefd0094618faf317a5a6665c611</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>36c54f93af5071de5f09904af7e2c30d</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>02461653a53811b5f546b1df1d1b5289</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>6dafa970ec9728cac9698ac0edf200e7</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>e5ac5b8e4af202abe43586f4d7d333f1</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>5c8ee02f23140462a95a41b602a5abfb</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>10d4ebaabceea9f18ec4d7c36cf43608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ii</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>3ac8e6225bda804f136b35e93a647cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>6a303d1fc37a3cdc61636c437320ecea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Z</name>
      <anchorfile>structqmcplusplus_1_1IonIonPotential.html</anchorfile>
      <anchor>f06656e042773fe7efab5f0e30ae48b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalCorePolPotential</name>
    <filename>structqmcplusplus_1_1LocalCorePolPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>LocalCorePolPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>df231c7cade35d1c213582779424dde1</anchor>
      <arglist>(const LocalCorePolPotential &amp;cpp)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>b0fd16685220f5a6fcee026a28d44b75</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>69736699bf9edb84c4460bbb711dd04a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCorePolPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>b90d52fea590a161a5baf899d8edaef2</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalCorePolPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>5ba995400b705b1a5a351a1e17e0c623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>9a76f10043899a9a7910536a4a3678e8</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>7e5f2087c6bd06bd0686863762b0bb74</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>dbc50b9e72aaf621f0f846e2087dde87</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>d1ea38faddd5c8f2175a1e225fc309dc</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>58ed382ba28896ca36ad11b24faf19ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nCenters</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>d297dde65e9db2b6c19dc8c0ce93007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nParticles</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>eaf61773e5706ead75ad3ca817041bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>eCoreCore</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>31bce3ce2a565a78bde90ba984353ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>04db32bbe00510ca65a87a1acb99b393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ie</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>70e9fe87b061ace6250817eab7dfcf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ii</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>169c0aa2e9b3d859c74b82da04c11276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; CPP_Param * &gt;</type>
      <name>InpCPP</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>88e50e606f7626a3011aba21f05913c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; CPP_Param * &gt;</type>
      <name>Centers</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>50dbe444821c01b852c8ba45d20ae7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>CoreCoreDipole</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>897a641ff1bf4d3c8bc6599ec31988a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>CoreElDipole</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>20456b588da5504fb70429c639374f7a</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">qmcplusplus::LocalCorePolPotential::CPP_Param</class>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalCorePolPotential::CPP_Param</name>
    <filename>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</filename>
    <member kind="function">
      <type></type>
      <name>CPP_Param</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>044f46d3c15ef68eaa20bb555082c46e</anchor>
      <arglist>(RealType a=1.0, RealType r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>d4dc9a8115460e8734dca3b01840beb2</anchor>
      <arglist>(RealType a, RealType r)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>operator()</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>0212fbb3cfeb7754b2b6028c4890a456</anchor>
      <arglist>(RealType r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>4acc8a935a866297f3932b241a54bd31</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alpha</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>1466402a37b0a779f60ffa88248c1eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>c785821ad6fa17923d9baf1ff8eff467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r_b</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>39c876ce497b428e50d4185d86169167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>one_over_rr</name>
      <anchorfile>structqmcplusplus_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>4af4322f6b511c42235417956c80248f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalECPotential</name>
    <filename>structqmcplusplus_1_1LocalECPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>a4de736b321905f39b3f643d80914cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimLinearSpline&lt; RealType &gt;</type>
      <name>RadialPotentialType</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>20fba3ba339b46c82b29466dd8d4751d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalECPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>dab6379fccacca42ca0d0cf867bff2c2</anchor>
      <arglist>(const ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalECPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>a56deb5c606dabaff2cf77be42c7825e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>25498e8a745b83f47ce52e0b74f09869</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>60c3d5a2ae268161914586c8cf4b5da6</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>54f759923724d5127a7cb70d2643107f</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>53f008eb2a7ed7342327e6269cf6be94</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>4edc171c6cd304a30cd7c23d5bbd691f</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>fb9637a39170eaa5b6a1abf7f4b0088c</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>f801879945a5e65aef605f8175c2984e</anchor>
      <arglist>(int groupID, RadialPotentialType *ppot, RealType z)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>65c22758c4f89925f786afe3c7eb7faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>2bd35790cddeff81087e377093f1f2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, RadialPotentialType * &gt;</type>
      <name>PPset</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>5b108fd87d77e8d9e269a58d6af3dd76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>PP</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>05ef8a4e331af76445050722086fd2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zeff</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>8f9ffbd16bd73d843416e9024dc69672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>structqmcplusplus_1_1LocalECPotential.html</anchorfile>
      <anchor>08141f3e8cb79180a0d7147e8a8200f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalPPotential</name>
    <filename>structqmcplusplus_1_1LocalPPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; ValueType &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>41fc221b759aa96f1629431aa0bf9100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>LocalPotentialType</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>1eef1a31289d60e8de0c3d2c452a6df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalPPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>5e9e429661bbbc64f9c51b508909c44a</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalPPotential</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>5e72d83eee64bfe2010ad2052ad42970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>6cfe41369469409d86fe7d003f2d6764</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>ff4ae027351c88629931e0488082af8c</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>a02c7236a5cd402a93b94580c9469e20</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>61b59a4a72b509ab072ce584d82f713c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialSet * &gt;</type>
      <name>PP</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>fd712e352e9ae2261d2f0115ee8811a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet::ParticleIndex_t &amp;</type>
      <name>Centers</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential.html</anchorfile>
      <anchor>b12663f2d69751068dc5bb919459bbcd</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">qmcplusplus::LocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LocalPPotential::RadialPotentialSet</name>
    <filename>structqmcplusplus_1_1LocalPPotential_1_1RadialPotentialSet.html</filename>
    <member kind="function">
      <type></type>
      <name>~RadialPotentialSet</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>f8c03aa033237f67725ea9ab2ac396fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>eca45e63ffce07c0eae994e9a14bb2b8</anchor>
      <arglist>(GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>c74af5b31b27a6025d0616a49d4d5f8c</anchor>
      <arglist>(DistanceTableData *d_table, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; LocalPotentialType * &gt;</type>
      <name>lpp_m</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>4f611d1ee3c9e67abeeba09fbf8fd286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GridType * &gt;</type>
      <name>grid_m</name>
      <anchorfile>structqmcplusplus_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>ef4e2588d8263a147d63611b86e06c5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ModInsKineticEnergy</name>
    <filename>classqmcplusplus_1_1ModInsKineticEnergy.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ModInsKineticEnergy</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>1fbb77c92454a05e21b43fa101e51813</anchor>
      <arglist>(TrialWaveFunction &amp;psi, const Vector&lt; RealType &gt; &amp;DispersRelat, const MomDistBase *MomPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModInsKineticEnergy</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>05ca888f15cfd23c64567677e7dc4449</anchor>
      <arglist>(const ModInsKineticEnergy &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ModInsKineticEnergy</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>8c5360a1287319e1e045a34274340162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetAccumulate</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>ccc5e757371e8e9a1f2d395092d19c68</anchor>
      <arglist>(bool newValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>269e10ac6fe33e054660514a77ee1ca5</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>9787de958b39bf72abcab454e858f9e7</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>7f7ff961ea3cb2e991e673a32056f41a</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getEnsembleAverage</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>2898ea4e323dd8e600ac937cb5c2a4b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>6118861e08af593e170b0e241b825c10</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>1822280be01c7f7d539272086ad4981a</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>29afdda9cf7368b4e79ebc557ad76936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Accumulate</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>da4322adef21e1fbae18d4e1cd867ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumSamples</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>edc6b55d035506f59d1cbdb162bb6bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NumCycles</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>150a88c539ef2d7d6120fb6db22ea48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>OneOverM</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>8ac9d25a2d77549d4a94b04f374b4fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; RealType &gt;</type>
      <name>DispRel</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>ad0c7d5b1796bb8270e362c7743b2599</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MomDistBase *</type>
      <name>MomDistP</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>1c345dc2ac8f8f23bbed62c0b81b4507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction &amp;</type>
      <name>WaveFcn</name>
      <anchorfile>classqmcplusplus_1_1ModInsKineticEnergy.html</anchorfile>
      <anchor>e0e16078f51e8b308b7dc0a1c73edd4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PtclChoiceBase</name>
    <filename>classqmcplusplus_1_1PtclChoiceBase.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>PtclChoiceBase</name>
      <anchorfile>classqmcplusplus_1_1PtclChoiceBase.html</anchorfile>
      <anchor>4027cc6204f0c1ef65d7317a0b75a1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PtclChoiceBase</name>
      <anchorfile>classqmcplusplus_1_1PtclChoiceBase.html</anchorfile>
      <anchor>24da1c385ff120c0628c2475eef4d130</anchor>
      <arglist>(const PtclChoiceBase &amp;arg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>NewWalker</name>
      <anchorfile>classqmcplusplus_1_1PtclChoiceBase.html</anchorfile>
      <anchor>893fce4d220eb60c65bcff368e637699</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IndexType</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1PtclChoiceBase.html</anchorfile>
      <anchor>70256d6908009b7fc1f84cd4d7f6cd5d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PtclChoiceBase *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1PtclChoiceBase.html</anchorfile>
      <anchor>84780c6f7bd6e9bc86ed219275f8a231</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PtclChoiceBase</name>
      <anchorfile>classqmcplusplus_1_1PtclChoiceBase.html</anchorfile>
      <anchor>8f0f4c5ce6840d2e73bfb3de01398202</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomChoice</name>
    <filename>classqmcplusplus_1_1RandomChoice.html</filename>
    <base>qmcplusplus::PtclChoiceBase</base>
    <member kind="function">
      <type></type>
      <name>RandomChoice</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>dda6d9bea5ce5164d2dc30b4e101ce15</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomChoice</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>8f899e995412780a39e79f4298cbd112</anchor>
      <arglist>(const RandomChoice &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomChoice</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>9459b0a7aff7212235075ff25673641c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewWalker</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>a4cd3ee992f712db1a1609827901dc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>73fd851a29bf874bdc18d92eef1c64fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RandomChoice *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>11f2209a96d276ac6672db7107e97c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const IndexType</type>
      <name>NumParticles</name>
      <anchorfile>classqmcplusplus_1_1RandomChoice.html</anchorfile>
      <anchor>8b9ec5ba1a0b64c8f7a2f4ca63f83914</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomChoicePerWalker</name>
    <filename>classqmcplusplus_1_1RandomChoicePerWalker.html</filename>
    <base>qmcplusplus::PtclChoiceBase</base>
    <member kind="function">
      <type></type>
      <name>RandomChoicePerWalker</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>86643eade9cda6a6e710c7288f029d0e</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomChoicePerWalker</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>995b9e1d0fee9b4874f521d133b675dc</anchor>
      <arglist>(const RandomChoicePerWalker &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomChoicePerWalker</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>cf82bc000e262793aa2646bcb6939737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewWalker</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>fb14023d38c189ede5eaf66167910677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>1e3bee19928f05a25362a5a7b77dc67b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RandomChoicePerWalker *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>7a0398f7988a0a09016a0cd55759c7ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>CurrentChoice</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>046b05e91ce0a7f512a86deabd06befa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const IndexType</type>
      <name>NumParticles</name>
      <anchorfile>classqmcplusplus_1_1RandomChoicePerWalker.html</anchorfile>
      <anchor>93fffb3c62b4932b5aa57d3d9ab93bdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::StaticChoice</name>
    <filename>classqmcplusplus_1_1StaticChoice.html</filename>
    <base>qmcplusplus::PtclChoiceBase</base>
    <member kind="function">
      <type></type>
      <name>StaticChoice</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>c4b2a5fb5883ecc304d3837d7a842c29</anchor>
      <arglist>(ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticChoice</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>8ce527d328d2b57d0922eec0dd25f770</anchor>
      <arglist>(const StaticChoice &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StaticChoice</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>0aa0e97c8ac1041e4f046a9a06d862b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NewWalker</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>ae582818acb0132a6e5c204ffb5c7652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>operator()</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>8fc20b2ffc6bc96767c1da0d730809ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StaticChoice *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>019b3ec7db5307a1a1dd163104edc7a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>CurrentChoice</name>
      <anchorfile>classqmcplusplus_1_1StaticChoice.html</anchorfile>
      <anchor>ae03477c26cee8d3c7bba3a112bc1eee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MomDistBase</name>
    <filename>classqmcplusplus_1_1MomDistBase.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>MomDistBase</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>e79f76225ffbb97c1c3eb7eb9165e721</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MomDistBase</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>5abce7819c9320513ef76e58f89a484f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MomDistBase</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>f8fb53b1db2181bbd35f92b0d3451d9d</anchor>
      <arglist>(const MomDistBase &amp;arg)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual MomDistBase *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>3e4401d975106d0441505da012e790df</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDistribution</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>9b4df26f894e6a3ff9e8996050b4f309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateDistribution</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>b7ae95a23cc07b036843aadc7a026d1f</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumCycles)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>575fb8a051d8ea27e0b8f67a0a0ef2f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumParticles</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>c0d77680af4011455ee851f1426c688d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>totalNumSamples</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>81a73b9328e261178df378523563d818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>MomDist</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>2e9de283bf0e506282b7ee96f3342147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PtclChoiceBase *</type>
      <name>pcp</name>
      <anchorfile>classqmcplusplus_1_1MomDistBase.html</anchorfile>
      <anchor>5271fde885f61cc0f435fc0b78333f99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::FFTMomentumDist</name>
    <filename>classqmcplusplus_1_1FFTMomentumDist.html</filename>
    <templarg>dims</templarg>
    <base>qmcplusplus::MomDistBase</base>
    <member kind="function">
      <type></type>
      <name>~FFTMomentumDist</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>93fa13e9fac7036a017cfb074807ab71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>a893b31efed1bab79ef9d6603eea44fb</anchor>
      <arglist>(const FFTMomentumDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDistribution</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>d226bd9ef9697a8d8393e3a5d0541cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>b470166ffe2f8b7ec7ae1aaf60eca6e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>f404d922b67c2e7d66265900b0a692c3</anchor>
      <arglist>(const TinyVector&lt; IndexType, 2 &gt; &amp;LocInDist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>bccbc6ea75386f6abdcd127ff70ea638</anchor>
      <arglist>(const TinyVector&lt; RealType, 2 &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IndexType</type>
      <name>getIndex</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>e3f12b012d429bf1a05be04cb4eb9c7e</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;LocInDistribution)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>PlaceCloudInBin</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>66b7de75362a058f22feca148e2ee878</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeIntsInBin</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>c82929e72838d811ff748397a9f24101</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;Indexes, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>placeInBin</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>3482c17d2597bcf2308432bd7e73de48</anchor>
      <arglist>(const TinyVector&lt; RealType, dims &gt; &amp;FracDisp, ValueType RatioOfWvFcn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>0d2e0d868e618d74f5321d431b9dbb24</anchor>
      <arglist>(const TinyVector&lt; IndexType, dims &gt; &amp;inDimSizes, const TinyVector&lt; RealType, dims &gt; &amp;inInvRsLatSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FFTMomentumDist</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>90c4b35b5c625948d3e70abc09b45953</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; IndexType, dims &gt;</type>
      <name>NumPts</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>101b069bafc29ae04d099cf10473e706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FFTAbleVectorBase&lt; ComplexType &gt; *</type>
      <name>NofK</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>039ac49dca6593c0ba2c5c5597bf0212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>InvRsLatSize</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>a02e14bb85be8f274581b9a7249ba925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, dims &gt;</type>
      <name>Spacing</name>
      <anchorfile>classqmcplusplus_1_1FFTMomentumDist.html</anchorfile>
      <anchor>a6baee9b66390164973c0d251ca9095f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ThreeDimMomDist</name>
    <filename>classqmcplusplus_1_1ThreeDimMomDist.html</filename>
    <base>qmcplusplus::FFTMomentumDist&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ThreeDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1ThreeDimMomDist.html</anchorfile>
      <anchor>e12c83c666d5a87dacb6784ae19bb2d1</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; IndexType &gt; &amp;DimSizes, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreeDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1ThreeDimMomDist.html</anchorfile>
      <anchor>476640eedf661c378fad9161bc58f055</anchor>
      <arglist>(const ThreeDimMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreeDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1ThreeDimMomDist.html</anchorfile>
      <anchor>97104d36d3ca107fe93e3d4db965ee0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>classqmcplusplus_1_1ThreeDimMomDist.html</anchorfile>
      <anchor>4861a59205725791c43777709f0bdbfe</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumCycles)</arglist>
    </member>
    <member kind="function">
      <type>ThreeDimMomDist *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1ThreeDimMomDist.html</anchorfile>
      <anchor>44e8b28e4cb785ab91fd0884e5a3c9dc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::OneDimMomDist</name>
    <filename>classqmcplusplus_1_1OneDimMomDist.html</filename>
    <base>qmcplusplus::FFTMomentumDist&lt; 1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OneDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1OneDimMomDist.html</anchorfile>
      <anchor>4b974d45e3f27735c4c009b2ee7253f6</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; IndexType &gt; &amp;DimSizes, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1OneDimMomDist.html</anchorfile>
      <anchor>72cc34f810b963567c0bd76f2ff22c4f</anchor>
      <arglist>(const OneDimMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1OneDimMomDist.html</anchorfile>
      <anchor>6d8af7ffe40c06c8898bdce99fce379f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>classqmcplusplus_1_1OneDimMomDist.html</anchorfile>
      <anchor>068b03363ed13a94cb98239ce96c781e</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumCycles)</arglist>
    </member>
    <member kind="function">
      <type>OneDimMomDist *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1OneDimMomDist.html</anchorfile>
      <anchor>e5ae35dd50ce5d7bbcc0935ea860e305</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::AveragedOneDimMomDist</name>
    <filename>classqmcplusplus_1_1AveragedOneDimMomDist.html</filename>
    <base>qmcplusplus::FFTMomentumDist&lt; 1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>AveragedOneDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1AveragedOneDimMomDist.html</anchorfile>
      <anchor>f9b94b9b63bca97f509e8ed864e1b96b</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; IndexType &gt; &amp;DimSizes, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AveragedOneDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1AveragedOneDimMomDist.html</anchorfile>
      <anchor>2897deb6216ef4d7d9cc145a4c92c5a8</anchor>
      <arglist>(const AveragedOneDimMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AveragedOneDimMomDist</name>
      <anchorfile>classqmcplusplus_1_1AveragedOneDimMomDist.html</anchorfile>
      <anchor>11347dc2c52dbfe1808cbb422d5a8028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>classqmcplusplus_1_1AveragedOneDimMomDist.html</anchorfile>
      <anchor>2fa5fdeb36fbc5034c071581f15834e3</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumSamples)</arglist>
    </member>
    <member kind="function">
      <type>AveragedOneDimMomDist *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1AveragedOneDimMomDist.html</anchorfile>
      <anchor>94e8f21923f2fbd8a186eb1aa275722e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DirectMomDist</name>
    <filename>classqmcplusplus_1_1DirectMomDist.html</filename>
    <base>qmcplusplus::MomDistBase</base>
    <member kind="function">
      <type></type>
      <name>DirectMomDist</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>3458cf4af7130a422595d57c8398cbd3</anchor>
      <arglist>(const DirectMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DirectMomDist</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>f47ed59462be33be3e4f21e96848477f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDistribution</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>35191c5e756a4d7128d9e5e731fc23ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; RealType &gt; &amp;</type>
      <name>getNofK</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>7f12262e257ad033e846f19eb3589124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DirectMomDist</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>ebe6e0337b41d065e47a4bd4078e2a0d</anchor>
      <arglist>(PtclChoiceBase *pcb, IndexType NumPart)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; PosType &gt;</type>
      <name>GVectors</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>7979829c45927c53a79cc4a457478ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; ComplexType &gt;</type>
      <name>NofK</name>
      <anchorfile>classqmcplusplus_1_1DirectMomDist.html</anchorfile>
      <anchor>905d46bf5cac9b57e03b04e8eb6c4eab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RandomMomDist</name>
    <filename>classqmcplusplus_1_1RandomMomDist.html</filename>
    <base>qmcplusplus::DirectMomDist</base>
    <member kind="function">
      <type></type>
      <name>RandomMomDist</name>
      <anchorfile>classqmcplusplus_1_1RandomMomDist.html</anchorfile>
      <anchor>992f28449647a1ac5b486ad93062e2ac</anchor>
      <arglist>(ParticleSet &amp;PtclSet, const Vector&lt; PosType &gt; &amp;GVectors, PtclChoiceBase *pcb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomMomDist</name>
      <anchorfile>classqmcplusplus_1_1RandomMomDist.html</anchorfile>
      <anchor>3f205b850bc694fb82487f34a3230997</anchor>
      <arglist>(const RandomMomDist &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomMomDist</name>
      <anchorfile>classqmcplusplus_1_1RandomMomDist.html</anchorfile>
      <anchor>6eed1cf73728fe2963a4f50ecedf7d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDistribution</name>
      <anchorfile>classqmcplusplus_1_1RandomMomDist.html</anchorfile>
      <anchor>d9094ac6246ca38e62ca84ad1397984e</anchor>
      <arglist>(ParticleSet &amp;PtclSet, TrialWaveFunction &amp;Psi, IndexType NumSamples)</arglist>
    </member>
    <member kind="function">
      <type>RandomMomDist *</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1RandomMomDist.html</anchorfile>
      <anchor>e8ef5571ea931ba5b06a6ca5fe2e8594</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalECPComponent</name>
    <filename>structqmcplusplus_1_1NonLocalECPComponent.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>vector&lt; PosType &gt;</type>
      <name>SpherGridType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>5424b85ff3725c7ffc0c5030ebdd497f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>4ab419b3bf9a367ef6d3501476231f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimLinearSpline&lt; RealType &gt;</type>
      <name>RadialPotentialType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>dc281d109ec4d1cd962da3aeef4e0f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalECPComponent</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>dcd17e3836499f77a0ab40e07ee999ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonLocalECPComponent</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>8854ec5ac9cfad2fccc4df0fe2479e41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>753572c291b50dfee66373ce08c5c1b5</anchor>
      <arglist>(int l, RadialPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addknot</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>57ec1258456ce718275fdc362a3cfc89</anchor>
      <arglist>(PosType xyz, RealType weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_warrays</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>011b42e50d0ed7d0471ffc225f0aaea7</anchor>
      <arglist>(int n, int m, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_grid</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>eebe36d674158d29bb2b92f4a5396574</anchor>
      <arglist>(PA &amp;sphere, bool randomize)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>88b6917ac7f5f844457ec660a3d478e8</anchor>
      <arglist>(ParticleSet &amp;W, int iat, TrialWaveFunction &amp;Psi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>b85a8ca727e08c16905dbca21896daf8</anchor>
      <arglist>(ParticleSet &amp;W, TrialWaveFunction &amp;Psi, int iat, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>9ad5bb770b7073fc53cccef48924c389</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>5c968d06ccc1fccc9affd48ea1976ac4</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>fab1c1b5e475ab346c64879b3794cfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nchannel</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>48962a6883a7e89794c8b971ec5b4c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nknot</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>d496a128ac538c4952098d4d73d602f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rmax</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>8acb8160fb403b0429d51b2f6b87bedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t *</type>
      <name>myRNG</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>512c26c04bd36cbbbd0a06e44722bbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>angpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>71421495649490ec70eddeb6049e5868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wgt_angpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>38c29ba97672e7eb9e828bb574b8d287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Lfactor1</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>e0a0f39926b3555953bbaaf57a299551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Lfactor2</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>742e84587a406f2a5cfed9e0aa4d75fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialType * &gt;</type>
      <name>nlpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>d3bb6e7edd3a5dbf6a8aca969fd3e515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>sgridxyz_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>b1f7362b2b0a6b5c5d074c6a7189732c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>rrotsgrid_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>53128b04878f69d23b063bd961d1b00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>sgridweight_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>39ba1c560e714587b0133d01d5250f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>psiratio</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>ff6af9aa05a904b69797fbaa08db1f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>vrad</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>348a57df708a885d0f179ec5e518a9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wvec</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>90b099133194e20933618828b6361bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Amat</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>7d0f9ca3957fcb9b653763f6e6b30fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>lpol</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>1520dd82a48c8b884188840693f44fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPComponent.html</anchorfile>
      <anchor>a253e55ef33575aead63197f218d5b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalECPotential</name>
    <filename>structqmcplusplus_1_1NonLocalECPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>NonLocalECPotential</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>4be46e0a1d7be2e442f13e665feaa540</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonLocalECPotential</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>c81b70b52532c654ee2ffdb5efa3c8d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>42ff140905e69c03ac817935aa01d3bf</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>32b594ee991485ceec94f38405383ab7</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>e51acfe8a544b4389e5d99e7a06f9221</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>be0ab931cd0c7e7771516906f7f80fe2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>f48c33b6db655294a7e6a119807c45a4</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>fd826f9eb2a909b88e34324796df10c5</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>c9123fee76afe6c0bce00565ed82a8f8</anchor>
      <arglist>(int groupID, NonLocalECPComponent *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>8d747e58cb4a7d775275f44e28176fce</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumIons</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>ff55df48c434de9d235928607186ce0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>c2f8599d3f8df9d121075a464ade3a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalECPComponent * &gt;</type>
      <name>PP</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>db76ca22c5ac9b73dc712b6affd32a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, NonLocalECPComponent * &gt;</type>
      <name>PPset</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>f2c44f033b567c9f6e62bd0a38096a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>d836906718b726b23c372f44fd87c5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>structqmcplusplus_1_1NonLocalECPotential.html</anchorfile>
      <anchor>3b6299d9279a9493f12395d862e2c6e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalPPotential</name>
    <filename>structqmcplusplus_1_1NonLocalPPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>vector&lt; PosType &gt;</type>
      <name>SpherGridType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>4eb6a0a2ccdaa2cee2d97bc438a2a455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; ValueType &gt;</type>
      <name>GridType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>b5a18d31921d943575ec0beb764d81ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimCubicSpline&lt; ValueType &gt;</type>
      <name>LocalPotentialType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>ebbaff0cbf18ceb8afd4903154224763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalPPotential</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>b603ddb7fa89e5b7b276570e6deb8bd9</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonLocalPPotential</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>18d49149ad470e3e017899a4e7101406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>7b791fdaf0d708ef8ccd8e21b338d4a5</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>fd291a89724c0002b0297baf1c50784e</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>093d759fa709f6e552c90b2b975da49c</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>c6b96a0728dbd8a5225e9b25db967c2f</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>6ea1fb61b7864994a5cbd7600c02939e</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>2585e7531a6345b161428b705a33b710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxnonloc</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>9242b478483a6c429f387dd5f3ffabfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxsgridpts</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>c3faf060c4b01fbffe2343596af2874d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxangmom</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>23d0e7769afdcceca3c57b2350ff2a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>f62f9ccca8af21d25f3d96782b543c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialSet * &gt;</type>
      <name>PP</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>4d3dcbdc1f0a3f582cbed0955daf19e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonConfig</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>acbbdd0923aefd46c3918e81bc312e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleIndex_t</type>
      <name>Centers</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>7e59ff298e362f06cb39fe3a05d01fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction *</type>
      <name>Psi</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential.html</anchorfile>
      <anchor>005fdfd1d45bf76c67a3f8449fd87273</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">qmcplusplus::NonLocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalPPotential::RadialPotentialSet</name>
    <filename>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</filename>
    <member kind="function">
      <type></type>
      <name>RadialPotentialSet</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>4aeac2f9cd68d1495728295a36ec4af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RadialPotentialSet</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>2a6f1ff881137b28617166da9520eb37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>3fc605aa0a47f632626e8b6a4b8e92e3</anchor>
      <arglist>(GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>f2b9b00b080fd47a0840e4c4376c2223</anchor>
      <arglist>(int angmom, GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addknot</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>f6148621452502f92cc09e69b283d30c</anchor>
      <arglist>(PosType xyz, ValueType weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_warrays</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>06aadd8bc8f22f05671f6d1ca2538034</anchor>
      <arglist>(int n, int m, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_grid</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>776add6b66c8d3ae8282c3dd4a7fbb76</anchor>
      <arglist>(PA &amp;sphere, bool randomize)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>e72eb8071528e9733530cb8a78ca6770</anchor>
      <arglist>(ParticleSet &amp;W, DistanceTableData *d_table, int iat, TrialWaveFunction &amp;Psi, bool randomize)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>HasNonLocalPP</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>217b47fadfd3b4bcfe8b4f2ff01ed85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>b7a43fb460b2c9c4be3bbb1610a2fdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nchannel</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>ca4e840a2ba0bf12f4387000881d0425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nknot</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>cb6717832a38f42e2fc42e05c264fa9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rmax</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>0fa41701145b46100bf64e3e378a6f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>angpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>ca089156649f3139778be7cd49a87bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wgt_angpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>852a7b5cc257f7bfb37b674ae0588c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Lfactor1</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>61a501e7dd83f21082a829cf29eccb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Lfactor2</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>9223364d704bd8378e5be0425a9f8ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocalPotentialType *</type>
      <name>lpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>31ae61cbe37abed245aaf490d21de276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>lgrid_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>d2f9fbad71ccb3670e8f5256fdea8d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; LocalPotentialType * &gt;</type>
      <name>nlpp_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>01810ce50b8f7e3b9e974ed985a57f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GridType * &gt;</type>
      <name>nlgrid_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>4f6904632c86c3ce93d54ea2816d3521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>sgridxyz_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a7556459e022dff034a03b0c3b0a6323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>rrotsgrid_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>6f556e637f8a752b61ebcd88a49e95a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>sgridweight_m</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>1aa2545582cd971e71c4fa97eb5a079f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>psiratio</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>be0d520fe180cf3ce0ee6b15d6f78e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>vrad</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>6432dc30efbc4bb5f5ecc1033625987a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>wvec</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>906991048d288ec2244c06ffe7dcfa00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>Amat</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>c9b5fed73805d7cbf149e5ac74cb48dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>lpol</name>
      <anchorfile>structqmcplusplus_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>5aefa5c6d287002f2f4e8f16701fcadd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalTOperator</name>
    <filename>structqmcplusplus_1_1NonLocalTOperator.html</filename>
    <member kind="typedef">
      <type>NonLocalData::RealType</type>
      <name>RealType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>9fed26c4a0beae469e17a6380c3c65f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonLocalData::PosType</type>
      <name>PosType</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>98d778fa512e0c1d008ef174067d3e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalTOperator</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>8cf3a2b5181c7e4418b72f3d9386f747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>416942656e06c1d09e994f6730b4f3b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>6c1d0a49c0f80c61db28d21ce8ad1fee</anchor>
      <arglist>(int ibar) const</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>delta</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>70211f88204ab9c00c2a8c2b9fbf8254</anchor>
      <arglist>(int ibar) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>2429553034480466dfea02a673b78158</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>d27e75df21e58c57972dadcd696a5a97</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>af121afdff21008e8e15afdaaf49aff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>selectMove</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>78d3c483773840f65f7f42d2d6ae2a7c</anchor>
      <arglist>(RealType prob)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>77da760a4502fc5312be03e4a4357759</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Alpha</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>8e92bd8920a93e8377ccf79f4ec411f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Gamma</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>d77b540c7833c6a07616c95af1ae7c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>plusFactor</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>b8aeb80716668f21292de637a762edd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>minusFactor</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>822c4ea0335f093855fd1e137d0892a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; NonLocalData &gt;</type>
      <name>Txy</name>
      <anchorfile>structqmcplusplus_1_1NonLocalTOperator.html</anchorfile>
      <anchor>e1107530f8b7b8c70058fa0f96783a43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolarizationPotential</name>
    <filename>structqmcplusplus_1_1PolarizationPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>PolarizationPotential</name>
      <anchorfile>structqmcplusplus_1_1PolarizationPotential.html</anchorfile>
      <anchor>31feabe53d7c2001fa5afb087d9f7841</anchor>
      <arglist>(double field)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolarizationPotential</name>
      <anchorfile>structqmcplusplus_1_1PolarizationPotential.html</anchorfile>
      <anchor>44c0c6bcb0b9af8ee94a3e70baf39ab1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1PolarizationPotential.html</anchorfile>
      <anchor>78a3b67c549c114efcb67c4658f0c1c1</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1PolarizationPotential.html</anchorfile>
      <anchor>21c7df219472c62227214fd7eb25fa47</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1PolarizationPotential.html</anchorfile>
      <anchor>934ba0c506cc0195434d14c39ccf1459</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Efield</name>
      <anchorfile>structqmcplusplus_1_1PolarizationPotential.html</anchorfile>
      <anchor>52a2e9f92374a2c62b43787c675f5ba6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCHamiltonian</name>
    <filename>classqmcplusplus_1_1QMCHamiltonian.html</filename>
    <member kind="typedef">
      <type>QMCHamiltonianBase::RealType</type>
      <name>RealType</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>c0d3a04b075d20da270617d673189180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>e01ec75d2738747f770036995267774e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::Return_t</type>
      <name>Return_t</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>b9d0a56eb8d3dc832969621da82b604d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>b2b634a64ffa67e8274360344e9df230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>9fff0f3186c378e8ed5a104321db5536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOperator</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>0b340cc240436c53a4619454da798311</anchor>
      <arglist>(QMCHamiltonianBase *h, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>2a56a0032deb1a9b8416a21ad164b992</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2WalkerProperty</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>c0c3402992e88c09196e5fd071f0c223</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>startIndex</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>2c5ade4836fc1a13c4018c770ca48fe2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>15722b8ca789452f0c146a801d42efff</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator[]</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>24b656dc41377a32c9ce2d5b523c5509</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>e630a9cea66251608f02ff4d216c009b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveProperty</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>ce1da765c8042a1b3277da9390aabc71</anchor>
      <arglist>(IT first)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>getHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>14a1adf93e23bdf68dfb7ee8d7028b36</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>getHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>7303ab9327eb61d7eefdc2d098ab5df8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getLocalEnergy</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>882086558b07f469e904ceb45a4a5e68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getLocalPotential</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>3c475d2b6c333cf17e25420818558bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getInvariantEnergy</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a187f7471a8688eeca79540a6721c86d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a8580fb78419372027051d8104721b0f</anchor>
      <arglist>(RealType tau)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrimary</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>3c227261a83cfda1356a503915592f09</anchor>
      <arglist>(bool primary)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needRatio</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>d8624654427915d1d6ab748c75fd7abb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>4008c02b8a619f1812934d67a78b0e03</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>361961ef5f6ebe8611a6a691821c29b3</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getEnsembleAverage</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>205ca42df4b8d8c152e5bb09935946d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>6e935dfdec0b049af064e06f409e0e32</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>0864e5c145517760dc6fd190e13ead89</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>c6c5c7eb6dafaf28401be66a61b7d709</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>8617b9c3fc92dd5b9505ff6c1bc5bcc5</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomGenerator</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>24932c88d9f7fd265c7e6f61cf69cba6</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>QMCHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>6c52106f3de30b46d8f7cb216a32e70e</anchor>
      <arglist>(const QMCHamiltonian &amp;qh)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Return_t</type>
      <name>LocalEnergy</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>b16c0288c78b5454c38c44dfe69ad535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>myName</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>51c28adff319592ba4d82f2c09426bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; QMCHamiltonianBase * &gt;</type>
      <name>H</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>2f9916bfade790a46788123e3b9f8cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Hindex</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>7660759a65f3bcd9007b1be33450f247</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Return_t &gt;</type>
      <name>Hvalue</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>3d61175a14863cba3eab54a78a65d9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>Hname</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>ba699ee09d0bec36259d2d4067e9a1c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; string, int &gt;</type>
      <name>Hmap</name>
      <anchorfile>classqmcplusplus_1_1QMCHamiltonian.html</anchorfile>
      <anchor>fbaf2b22753e9cc0b4f9e8b218f178b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::NonLocalData</name>
    <filename>structqmcplusplus_1_1NonLocalData.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>NonLocalData</name>
      <anchorfile>structqmcplusplus_1_1NonLocalData.html</anchorfile>
      <anchor>190ec66590e765a0e15a854c4782027d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalData</name>
      <anchorfile>structqmcplusplus_1_1NonLocalData.html</anchorfile>
      <anchor>5da87ec7431d970822366acafc3790a4</anchor>
      <arglist>(IndexType id, RealType w, const PosType &amp;d)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>PID</name>
      <anchorfile>structqmcplusplus_1_1NonLocalData.html</anchorfile>
      <anchor>39e14f9bf4a24b85b14a5a95bd4ce38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Weight</name>
      <anchorfile>structqmcplusplus_1_1NonLocalData.html</anchorfile>
      <anchor>d1e2b484a8750ed8a387cd4059965038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>Delta</name>
      <anchorfile>structqmcplusplus_1_1NonLocalData.html</anchorfile>
      <anchor>4ec8e9dee6a89d7e795023dd545b609c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::QMCHamiltonianBase</name>
    <filename>structqmcplusplus_1_1QMCHamiltonianBase.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>PRIMARY</name>
      <anchor>382449b39ebca892ea311c556e8e037847856ed3b8750649f3ec8f5350e77b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZABLE</name>
      <anchor>382449b39ebca892ea311c556e8e03786eb8b955e9a35ec310eecf9eaf4e0bfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RATIOUPDATE</name>
      <anchor>382449b39ebca892ea311c556e8e0378f4d920b6ad9593f510f59a147f93f4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealType</type>
      <name>Return_t</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>f1206ed1f38f66bdd14df483ea3026de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCHamiltonianBase</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>78412cdd93f67c4b17789cd9bab241eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCHamiltonianBase</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>04919aee4d6b224b05d382dd7024e952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTargetParticleSet</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>4aa0f75ba9def85386b5d03f7143c1e9</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>ebd38d5ffbea8ae0642088617883db27</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>449c812307cda578f328a0d273385b59</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Return_t</type>
      <name>getEnsembleAverage</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>0df760af11474010f790a74b1b4c514f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>1476bd2ee8964ff8d87e391a891e80d0</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>0316f4f0000d818894cc682d1792fc62</anchor>
      <arglist>(std::ostream &amp;os) const=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>eabaabb3e4f674058d385cb245a68585</anchor>
      <arglist>(RealType tau)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getMode</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>78221524e23c9da1460080c29033142f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual QMCHamiltonianBase *</type>
      <name>clone</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>8cd201fb40f0f948bfe0a2b4c150f3b1</anchor>
      <arglist>(ParticleSet &amp;qp, TrialWaveFunction &amp;psi)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRandomGenerator</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>89e6c6748a1b8c6afcb4ce540b6ab9f7</anchor>
      <arglist>(RandomGenerator_t *rng)</arglist>
    </member>
    <member kind="variable">
      <type>bitset&lt; 3 &gt;</type>
      <name>UpdateMode</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>8b7702e65c8a31259bf86d6af5aca095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>b4c133ff180036f58cabe86ddcd8726e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Value</name>
      <anchorfile>structqmcplusplus_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>45a71a5f06a492c52861f590a4172093</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Spline3DPotential</name>
    <filename>structqmcplusplus_1_1Spline3DPotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>Spline3DPotential</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>8178e97627a8022678f50ec6ee019841</anchor>
      <arglist>(Grid3D *agrid, const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Spline3DPotential</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>dcbe55b40347781c4ef7a87e53054e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>bdc0baffb4a1f41f4e34e32ca1fd619f</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>80b05dc4f5a10e9ac6c713c8a97dd244</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>9a48d2319128b00d87e3bff27f2410a6</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>0e90dde4b86d56c00d527c68047f83c8</anchor>
      <arglist>(WalkerSetRef &amp;P, ValueVectorType &amp;LE)</arglist>
    </member>
    <member kind="variable">
      <type>Grid3D *</type>
      <name>full_Grid</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>5023da848912bef6406a879e1aaa1078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Spline3D *</type>
      <name>pot_m</name>
      <anchorfile>structqmcplusplus_1_1Spline3DPotential.html</anchorfile>
      <anchor>ef16a2f592c5848e8d60a130ee189ef1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::TriCubicSplinePotential</name>
    <filename>structqmcplusplus_1_1TriCubicSplinePotential.html</filename>
    <base>qmcplusplus::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>TriCubicSplinePotential</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>c89cfc0558e72ab507063c6401ce4562</anchor>
      <arglist>(double mbyepsq, Grid3D *agrid, const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TriCubicSplinePotential</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>1a31c1f3ad95a6993b02076898842180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>a5500c9bcbdbd3295cd6cf9555863d27</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>715bd041289c54db2fd097299b7a7f24</anchor>
      <arglist>(ParticleSet &amp;P, vector&lt; NonLocalData &gt; &amp;Txy)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>46cd2c0bf79f7c4d9d18b515fcdc54c2</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>ff7d7c25133772a15e18786d05cbf7c5</anchor>
      <arglist>(WalkerSetRef &amp;P, ValueVectorType &amp;LE)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Efac</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>0309e4d1b7564ecd1f4b3f0d02d528f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid3D *</type>
      <name>DeviceGrid</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>2963b72e9519794b63b72a2cd85b66fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TriCubicSpline *</type>
      <name>pot_m</name>
      <anchorfile>structqmcplusplus_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>8577ba11d2f08655cd80fad42a063aeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFWalkerMerger</name>
    <filename>classqmcplusplus_1_1HDFWalkerMerger.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerMerger</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>10877b0a4c3d63bc0ba60f4c7c3f99fe</anchor>
      <arglist>(const std::string &amp;froot, int ncopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerMerger</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>5dad407f793c183fb2a4cba1df2ff1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>a5a21303103e845b79aa16300bfaa1f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeHeader</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>ad2881d2d62177464e4f9f8a10812044</anchor>
      <arglist>(hid_t git)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>4b499576d9bb7d306b78ba66662adf3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Dimension</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>98d1bf4e571a44d626f21248cda2cda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCopy</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>cc2fb319cc2aa6c36e6d73a8bb188c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumConfig</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>d20b6ebe5c82c844519a67d8a70c101c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumPtcl</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>c4e38ee4ba9deac0d07245982a4b02c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hsize_t</type>
      <name>MaxNumWalkers</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>539ec3823964dee1235d3ad6227c3e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>FileRoot</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>65fffd12a90bcebe7669f629d89959f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; hsize_t &gt; * &gt;</type>
      <name>numWalkersIn</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>98475b64495ba2b13a231ae9667de88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; hsize_t &gt;</type>
      <name>OffSet</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>661956a454dd4a38261162c8c14f02da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>Summary</name>
      <anchorfile>classqmcplusplus_1_1HDFWalkerMerger.html</anchorfile>
      <anchor>cd3f7bf05e797d7e702bf06452050133</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DMCEnergyEstimator</name>
    <filename>structqmcplusplus_1_1DMCEnergyEstimator.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>c40167692c74ef2888aeecaaa3bbead64eb32f9c28559fad17bf61ad2c5f5f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>c40167692c74ef2888aeecaaa3bbead65f97850aa2ff3df40d21f527d0512ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WALKERSIZE_INDEX</name>
      <anchor>c40167692c74ef2888aeecaaa3bbead600255277ca71c1b9182a83def2267b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEIGHT_INDEX</name>
      <anchor>c40167692c74ef2888aeecaaa3bbead638d863b0db81bf6df1321e3fe126de19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EREF_INDEX</name>
      <anchor>c40167692c74ef2888aeecaaa3bbead6a823738113edefcafe7aee9ed8de2008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MAX</name>
      <anchor>c40167692c74ef2888aeecaaa3bbead6391733e15ab0ac0e80976cdb75b33c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMCEnergyEstimator</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>579bfbf4319b3d2fefa53e5b63ce1320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWalkerControl</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>e74eaf4e48e14f5f7b755c7546f6e894</anchor>
      <arglist>(WalkerControlBase *wc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>0f7e1d72bc0756f16c790e7191667ebe</anchor>
      <arglist>(RecordListType &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>ec6f14f399f19f1b33f009e3a12db993</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>8dd648bad11612f1a722e88305322081</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>c4c2d6a58db78929f89ef702b656c1da</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>f19008e83d2fccface0e4bb2b8f27680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2Buffer</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>d026e0aad95e73fe74ff600a7e1a1fe8</anchor>
      <arglist>(BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>9d84bb4b8e8e5d8270159022d94bf30b</anchor>
      <arglist>(RecordListType &amp;record, RealType wgtinv, BufferType &amp;msg)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>averageIndex</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>a6b7c7e65eb35cbca76d5319d10a343c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>varianceIndex</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>9a88ea62ed7558a1907f7632a1da468b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>popIndex</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>3f85f575f4bba622182bc875c4b86f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Current</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>e24f6fb22d2d840d299420626757ec93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerControlBase *</type>
      <name>walkerControl</name>
      <anchorfile>structqmcplusplus_1_1DMCEnergyEstimator.html</anchorfile>
      <anchor>23f19ed983c48fdb87670aa6d1e03096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LocalEnergyEstimator</name>
    <filename>classqmcplusplus_1_1LocalEnergyEstimator.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>LocalEnergyEstimator</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>452323e9e0d7c5451ec60e07075bf5c3</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>435c4847f01d37553f480d52142d01b4</anchor>
      <arglist>(RecordListType &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>1c50f23943ae732408347e1cabfc046c</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>13ea4c7894755ca13fceb33bf3a4834f</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>a1ed8dfce06436379416638346cdee93</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>44d72cb5bdb7b2d1b55e054f46cda9b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2Buffer</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>0646f386a28e31ab23b318e460dbc3fe</anchor>
      <arglist>(BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>1d72305530f6d063f845fc68485485bb</anchor>
      <arglist>(RecordListType &amp;record, RealType wgtinv, BufferType &amp;msg)</arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>e25988f506b8e31f33b1c558f0b0d48eaf83e9c048c962ae7017161707a80beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>e25988f506b8e31f33b1c558f0b0d48e6c975eb7930582a5cec427e080052a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POTENTIAL_INDEX</name>
      <anchor>e25988f506b8e31f33b1c558f0b0d48e7ded122c62a273d27c8063f714e396a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MAX</name>
      <anchor>e25988f506b8e31f33b1c558f0b0d48e137fccc27a380068318b648d153bc72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LocalEnergyIndex</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>d2c46b5d5a3d588f8c521ecf65e4758a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LocalPotentialIndex</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>4a2dedb44c5596e4f66f5092834f65e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>ebf45d6d139cae9ed0973dd759100315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>8ff83ba9108d67c423c7e37641fccd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian &amp;</type>
      <name>Href</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>44e1638cfa8f85d38fe8f226ce45ed22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>0efc8c2bffc79c4580cb64ea4aee9b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealType &gt;</type>
      <name>elocal</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>d1d0fd9ae790ffd7fd8d282bf1ee358b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::LocalEnergyOnlyEstimator</name>
    <filename>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="function">
      <type></type>
      <name>LocalEnergyOnlyEstimator</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>302e3792366365f6d1343b055bdc4ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>c42d2a0cc94bd96883673be51f3b1063</anchor>
      <arglist>(RecordListType &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>5f2162a3ad581d87981b265aa43a6159</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>17898dc34ba8098fb0f0da6d538869bf</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>91e716a44615c29b51e654ab1b62f89a</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>502619946ba081c81c43a03d751eddb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2Buffer</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>a76579e3cfb7a2693ef5dafaa973086a</anchor>
      <arglist>(BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>28796188b96afebeae8789597c1b9e98</anchor>
      <arglist>(RecordListType &amp;record, RealType wgtinv, BufferType &amp;msg)</arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>f256dd326d322b8a7c3d6e9ce3a48fdd16c8230533dcd28bd6805650fa0d2f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>f256dd326d322b8a7c3d6e9ce3a48fdd82c75e927cb85125a8b3d60f62e90f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MAX</name>
      <anchor>f256dd326d322b8a7c3d6e9ce3a48fdd00f0f3832b8be7e5f3022e7214c19080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LocalEnergyIndex</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>1849427e9e973e4e508c951fd5115571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>eSum</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>bd30e7b4c2360655dbf960780bb4a1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>e2Sum</name>
      <anchorfile>classqmcplusplus_1_1LocalEnergyOnlyEstimator.html</anchorfile>
      <anchor>96f52f2aa2887f935cb7f9bff4bcef31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultipleEnergyEstimator</name>
    <filename>structqmcplusplus_1_1MultipleEnergyEstimator.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>cc30213a77247f8077f4e69fa3d9bb057855a79d61010b25aa7408653a14547e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>cc30213a77247f8077f4e69fa3d9bb05db305eea24f51d197853c48db31a86ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEIGHT_INDEX</name>
      <anchor>cc30213a77247f8077f4e69fa3d9bb058983c5916a07e91f983aeec7e9077a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PE_INDEX</name>
      <anchor>cc30213a77247f8077f4e69fa3d9bb0530dd6bdb4d875b0035eb4b4d82ddef3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KE_INDEX</name>
      <anchor>cc30213a77247f8077f4e69fa3d9bb05c5f3c2ee24cdbbc8fefec4685b57f51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_INDEX</name>
      <anchor>cc30213a77247f8077f4e69fa3d9bb05d089979b54ac804b893ef0f335a1d9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleEnergyEstimator</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>9498809d8adf948822f040497df9e0aa</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>39acfd7521a2f7e7e04bf5023d8d811e</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>725bd1ada840a7168a13f068bf110368</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>14b71d03ebe86f612c5b967c0f0c05fa</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>fedabe9706381a0526f8b554cf01adf2</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2Buffer</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>67dccd6c663d25a4d2fca5cf74cde912</anchor>
      <arglist>(BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a312b427905fdf94a8e098fd7f362030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>e77429ed8ec0fe394e437c7f0e2fe901</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record, RealType wgtinv, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>d9f3ea5ddb625e1a7f694c4823d86907</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, vector&lt; RealType &gt; &amp;Norm, bool require_register=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>17d3f299a01e9be48b23d9d99ca1a727</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; ParticleSet * &gt; &amp;WW, SpaceWarp &amp;Warp, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, vector&lt; RealType &gt; &amp;Norm, bool require_register=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CurrentWalker</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>849d7156bb4c9931c711a58f5dffd0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>91e82d72cd8a8bc9803e172b69122d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstColumnIndex</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>28ae20b54215ea3cc7902793f53e90f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>0f7aea1bfdb7ae3f9249e680ce9ee9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>031044f145e07455ddb1b188eab4ae16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOperators</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>5672d1b1861b050ac711198a39d7fc30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>RatioIJ</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>270291d98b1cb285422f0b6f135808e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>esum</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>ed9f85a5a04b9f97a6d91fa4d79ebe70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>elocal</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>32853d17171d823b448408aafec01bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>esum_name</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>e151210279ecdacc2422e9b6c9463ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>3ad3073cefdc77e2d959238faa0cb441</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>ediff_name</name>
      <anchorfile>structqmcplusplus_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>85532d86748c07aa50845e1364ba3ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PolarizationEstimator</name>
    <filename>classqmcplusplus_1_1PolarizationEstimator.html</filename>
    <templarg>T</templarg>
    <base>qmcplusplus::ScalarEstimatorBase&lt; T &gt;</base>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; T &gt;::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>e46b82c4760bc024924bb89b05825da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; T &gt;::WalkerIterator</type>
      <name>WalkerIterator</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>94f7a7c73678beb21729cb9fcd039b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolarizationEstimator</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>50d2660bc64ffbcf5784f5cf85710763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>f33733700500e12b9aebf79d471a7f19</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>cd6f0613732bb5e3447d850369473c92</anchor>
      <arglist>(const Walker_t &amp;awalker, T wgt, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>cfa0269f48e566511e0a2f8f2f8c5d25</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>104c80d0a49c8e13a4bfb18cca0e7e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>130faacc603a78cf22d323da605357b3</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, T wgtinv)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; T &gt;</type>
      <name>z_sum</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>864f0d481defb898d0bd11e2ea063835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pindex_0</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>26f7f5847c1a4a725fe0d7b797e7cea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pindex_1</name>
      <anchorfile>classqmcplusplus_1_1PolarizationEstimator.html</anchorfile>
      <anchor>26cb670cbb92079d8800985312b3626a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::RQMCEstimator</name>
    <filename>structqmcplusplus_1_1RQMCEstimator.html</filename>
    <base>qmcplusplus::ScalarEstimatorBase</base>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>254a778bc50cac04ac2a8dd47b1b67c78943c73b63a1f3b0cd8ec7f6a0568bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>254a778bc50cac04ac2a8dd47b1b67c7a72d99c6ed013eb5df36ab2bd83e9100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEIGHT_INDEX</name>
      <anchor>254a778bc50cac04ac2a8dd47b1b67c725aeab56358296f375f15fe19272213a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_INDEX</name>
      <anchor>254a778bc50cac04ac2a8dd47b1b67c78995138a5afccf2cb8bc86237b4d8398</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RQMCEstimator</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>2db5fbe553bc5610fc1de0a670034625</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>0ea909e55323873928f28a45f6569703</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>d463d9580528acb6533217b1d8160367</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>b0c8946ad5481845b3a97bc361b2d888</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>385001c52779253052c5dcf1a592f978</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy2Buffer</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>3bd9580c31add498cd58d4235f382b2b</anchor>
      <arglist>(BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>85b4c99729109ad1def1e7bf6c0a80ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>9a4f458642cc2d6ece3366eaa300755d</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record, RealType wgtinv, BufferType &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>fd53652678047766ef60adde5db7f4b4</anchor>
      <arglist>(MultiChain *reptileRef, int setDirect, double setTau, int setSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>c5216581cbe65969dfc5febd87842d43</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, vector&lt; RealType &gt; &amp;Norm, bool require_register=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>f889d70dc3621a6d0ffc283799afa225</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; ParticleSet * &gt; &amp;WW, SpaceWarp &amp;Warp, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, vector&lt; RealType &gt; &amp;Norm, bool require_register=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CurrentWalker</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>fcac5699ed48a398b28633ea90c5cf25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>55ab7c07c4c9aa8b0eddca43e078d8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstColumnIndex</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>3d042f63e1804717e55ed356b5e0665b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>4d2ca784eb67d40ef1cdb72ed3ea1afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>f54f690224a1edb5fb24ca3d283a0c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOperators</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>6de0ded090dcbe4462e297eca573aa0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>AveEloc</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>ac28c9d25e32142ce54aede205df7310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>AveWeight</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>b004b9829a107925a0442727ef263c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>90ab47016cec8f1161a5f0cb1dba7f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Directionless</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>bcec0ac60e6df518c7f793d7016b9ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nSteps</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>dcf8c25b101e1f3fce06a7706ecd6b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Tau</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>17152b8d485f6c0f2960302590015835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>RatioIJ</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>8fbec84b6df9c64764ca0a8185faf1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>esum</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>d88db437fa3c910f0767faecca937a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>elocal</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>fa7c394671661559678b65814260f917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>esum_name</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>e7c2c9c4ce2583e93a9b50c22904d444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>0fd85c0c3c8c550982bb6cdadf3e6184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>ediff_name</name>
      <anchorfile>structqmcplusplus_1_1RQMCEstimator.html</anchorfile>
      <anchor>f41ce803e738c808cca3cbe3d06d8884</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::ScalarEstimatorBase</name>
    <filename>structqmcplusplus_1_1ScalarEstimatorBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>d1dab63facc301162395cd99ee4415eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::iterator</type>
      <name>WalkerIterator</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a9b7695b125506302f3ffd960841ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>RecordListType</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>40d015226b143ef463c73730b1cbcf9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>e34fc792b52f8b498556c23ef67fb410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarEstimatorBase</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>d19359b7d007da30b9e9414aa9db47aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>average</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>b639a4a521f96fbdb7087cf9259f5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>variance</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>87b3c91f3ff861b3d67a05a2f00a02c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add2Record</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>467d4c08115e2d7de5d4a84a84bbf4a0</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record, BufferType &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>3b4cbc3ed676da5e6948b495f80594bc</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealType</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>99032c12d114375029a0c26a49532d3a</anchor>
      <arglist>(WalkerIterator first, WalkerIterator last)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accumulate</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>bd2549a471b5c9bba5b29dc99a94f674</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>report</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>e410706f4e97e8813ce166d9d8ef648b</anchor>
      <arglist>(RecordListType &amp;, RealType wgtinv, BufferType &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy2Buffer</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>ec0210d05be6eddc214f9cfacd9b18be</anchor>
      <arglist>(BufferType &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>effbb89d6042250a1aa683d29775e536</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>CollectSum</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>f23cccae2177ed30880893c14126b414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>b_average</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>0a275817ee023b7261098490d9499422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>b_variance</name>
      <anchorfile>structqmcplusplus_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>12e8bd05900f97ff2546a1ada10f7cb6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ScalarEstimatorManager</name>
    <filename>classqmcplusplus_1_1ScalarEstimatorManager.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>WEIGHT_INDEX</name>
      <anchor>4690759ef5e018c6bd0f43b0d415a9f7cf66ab0d42604048827c27a43c71b27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BLOCK_CPU_INDEX</name>
      <anchor>4690759ef5e018c6bd0f43b0d415a9f77a30b240be5d9fc39443f5c0cb593faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCEPT_RATIO_INDEX</name>
      <anchor>4690759ef5e018c6bd0f43b0d415a9f7ec4a09e54964edfe33a7309949f549ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOTAL_INDEX</name>
      <anchor>4690759ef5e018c6bd0f43b0d415a9f77674b1a7cee7e133c17fd3b09b741429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarEstimatorBase</type>
      <name>EstimatorType</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>584d1566b3ed6106b5b7e5bade0fe25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EstimatorType::BufferType</type>
      <name>BufferType</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>b76e5bc3b4377e26c6430b96a78da9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarEstimatorManager</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>e8fdb65b3acdfc3e34fd51f72ee8ebf7</anchor>
      <arglist>(QMCHamiltonian &amp;h, Communicate *c=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarEstimatorManager</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>40b3a6975c02ee3ffa7aa85a1b176049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>4081c871787cefa8ed8ab9bc2509b9db</anchor>
      <arglist>(Communicate *c)</arglist>
    </member>
    <member kind="function">
      <type>Communicate *</type>
      <name>getCommunicator</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>241a0cf6ecb981611f1015450603a29a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>09a55552f049add3149868496069939b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addColumn</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>f7865fd38fb53a5c9d4adbdea5bf8527</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>e80a5b3faf8d9b9a551580715a15c353</anchor>
      <arglist>(int i, RealType v)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getColumn</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>7ab01bbd9f0d3c3fa02736082bd8aacb</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addObservable</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>0e5069bff341a6272f56c33640929bf0</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getObservable</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>4d9b68cd4fa373fd5dd7510c6d47ad91</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getData</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>b3e1d262479628054daaea33a1418352</anchor>
      <arglist>(int i, vector&lt; RealType &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>7f03f93b8b18c6a0eb90e17739218160</anchor>
      <arglist>(EstimatorType *newestimator, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>EstimatorType *</type>
      <name>getEstimator</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>b84f146066b619499c32b5e493261ccb</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>EstimatorType *</type>
      <name>getMainEstimator</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>4ec61784f148e7766c08cab63d2ccd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>average</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>c35370359790fbf124c8cf4b8300fe29</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>variance</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>e122e3e86cf85ff03c6ff88854cb6a5d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a2de078faef5b5a95034b3f5ee167b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopBlock</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>1e386a35940957455a112ad3ce5d3ba2</anchor>
      <arglist>(RealType accept)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollectionMode</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>0d9ce6d70009498570ae046c175da638</anchor>
      <arglist>(bool collect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulateMode</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>f95ba090670a7fd5edc7be4f548d4d0b</anchor>
      <arglist>(bool setAccum)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>b216e4165ab6f7c9dddc16c20a4d06f0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>fdd56dbe819ff9be05a778b827cb23f1</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>d7af4e70dfadf9c03fb25d1227f3f47d</anchor>
      <arglist>(ParticleSet &amp;P, MCWalkerConfiguration::Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReportSettings</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>cffc499b59762875e6bf572a93ef5306</anchor>
      <arglist>(const string &amp;aname, bool append)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReportSettings</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>008615b8bcfd3c84c3cbe6cc2c57c895</anchor>
      <arglist>(bool append)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportHeader</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a0f60a29a6909a72f3bfca0146c43f2a</anchor>
      <arglist>(bool append)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flushreport</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>e3aae267d31e2955e7f574faeb9ec226</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a8ac9f896350b8a4674b3f5d7d2fe706</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>2da6380897b303a37a4f46cd7dafc833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>e4d58f2bbd12672eb913723a3d1d6866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEnergyAndWeight</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>9e9b35bf3c44206def455e223125358f</anchor>
      <arglist>(RealType &amp;e, RealType &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>dc83aac38e47a72705c41e1a5c3bdd13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>MainEstimatorName</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>370b983bb733c5965f94cfcfec8fe1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>FileManager</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>5423187a5be7c9dd395f34fa2cae205f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>CollectSum</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>47e3479899b1cee486371fd8d77a7a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>AccumulateBlocks</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>de0785ef3551d624f17fbd11e844911d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>firstReport</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>3f13078eeeda96328966136d014852d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ManagerNode</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>39d529f233f404d5f854ca78fb2bf617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>BinSize</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>37efe66ac7008d9c1b70010393161df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>040108872808e6b7484c6b5e721bbf85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>1f5f7c9fc685e121ef4934ea83f3eb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myNodeID</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>0cef6a6add4ed8f2f5318c6b0097bbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numNodes</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>9dea3c426fcb10e8205144f4f9c1ce45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>msgBufferSize</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>16f9da7867f0691d7148afd9c7095f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Communicate::mpi_request_type &gt;</type>
      <name>myRequest</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>8a1392f1d59ade6cc568c27c715ed50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Communicate::mpi_status_type &gt;</type>
      <name>myStatus</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>1acf57e7e6eeac33b39e57974f0b0cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; BufferType * &gt;</type>
      <name>RemoteData</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>153582926f77bb078fe1f7d1743f69ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>7c5a52f256e70938dc566c4ee8ab564e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>NodeWeight</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a2c908b447e95b69dbaee4a6c6f7f0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; IndexType, TOTAL_INDEX &gt;</type>
      <name>MyIndex</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>d11ed565cc2a55db86311f6ab298f76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, TOTAL_INDEX &gt;</type>
      <name>MyData</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a55df1071085de238f3610d032bf2f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; RealType, 2 &gt;</type>
      <name>EPSum</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>1b53c2e8593d2d2be7a6659cd9a13da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream *</type>
      <name>OutStream</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>0d451630c684f74cb84c110e3990926f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>0ca879a85053c8dee27031b9e859a40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarEstimatorBase *</type>
      <name>MainEstimator</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>00432e1ad050dbe208a4a8a3f21eb314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>BlockAverages</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>8a57db7046f8f5c65029a097dede1a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>TotalAverages</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>899407aed5150c89ee51597dfae0269a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>TotalAveragesData</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>15f0b7bf71787afdc5cb89d1034a3ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>Block2Total</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>8453def48d580964d69963d129ef4e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; string, int &gt;</type>
      <name>EstimatorMap</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>88f21f3f387e7921da44cd613671ca00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; EstimatorType * &gt;</type>
      <name>Estimators</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>20daf986037566d3e65aca2ff018516c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>MyTimer</name>
      <anchorfile>classqmcplusplus_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>df05992735ef246a61c8873d69448f98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::CloneManager</name>
    <filename>classqmcplusplus_1_1CloneManager.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>CloneManager</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>96fc1f5c17477e0389bb8a2d78648cc8</anchor>
      <arglist>(HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CloneManager</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>3a5b518fbe6ef61b6ba73a8d9cbad8a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeClones</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>5bbe1c3f5a63bb0da232cada8ab2e117</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;ham)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>acceptRatio</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>07ea9dbfb04e7f1c6762ab1200b0f7cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HamiltonianPool &amp;</type>
      <name>cloneEngine</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>2a2eba4517530433dfaf7c859de9627d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumThreads</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>ed6527038768370c34a3ffd5f77f8e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RandomGenerator_t * &gt;</type>
      <name>Rng</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>37226d197f6db4eb2c73241648c9faf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; QMCUpdateBase * &gt;</type>
      <name>Movers</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>14f7c84a5211083e660c3357753782ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; SimpleFixedNodeBranch * &gt;</type>
      <name>branchClones</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>fdbfee4e80e201db742f9696a0095f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; int &gt;</type>
      <name>wPerNode</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>af865493fbce69286bd7a0e00c67e0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; ParticleSet * &gt;</type>
      <name>wClones</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>7d8d3255daeee266a700609459427cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; TrialWaveFunction * &gt;</type>
      <name>psiClones</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>3c756ceeccb39b2b62783a9bd7c4202e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vector&lt; QMCHamiltonian * &gt;</type>
      <name>hClones</name>
      <anchorfile>classqmcplusplus_1_1CloneManager.html</anchorfile>
      <anchor>1a2d9cc40d6c6c8c9b8178ae111a9460</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMC</name>
    <filename>classqmcplusplus_1_1DMC.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMC</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>485f7365f4c5a0498716ca10896f263b</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>5cc982caed9c3becc11068528abe2e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>ba4c966d52c7ac54bde0c0b221a37e58</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetUpdateEngine</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>0cb1e965a935f98d64e4701f7579ac0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMC</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>94477620963061414197ae2bf1ff19d8</anchor>
      <arglist>(const DMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>f3d3a829ea10360a0f082c244692ea64</anchor>
      <arglist>(const DMC &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>f763ba1182628e8fa6691618c5ec4701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>4ed27738b0a301b5a287b2269b8832fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>dbc8cc9287fc30b22200231578e9d203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>d8d9ddfe13f78504c97866b1c442c88f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>6f198ceb9237d189367d565c3001de7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>d8f10037a9543029c6c402ff96f81323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>12439a4865dc464d9a8563c8e68f8ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>01cb07b8c9562f7cb6f178155b53e3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>classqmcplusplus_1_1DMC.html</anchorfile>
      <anchor>21a4ac40a5891591086544733f2f9f1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::DMCFactory</name>
    <filename>structqmcplusplus_1_1DMCFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>DMCFactory</name>
      <anchorfile>structqmcplusplus_1_1DMCFactory.html</anchorfile>
      <anchor>942cf5e45691a7cfa22458c410fcaf04</anchor>
      <arglist>(bool pbyp, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>QMCDriver *</type>
      <name>create</name>
      <anchorfile>structqmcplusplus_1_1DMCFactory.html</anchorfile>
      <anchor>ef8b3e1a2844661933b154da690ed5a8</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>PbyPUpdate</name>
      <anchorfile>structqmcplusplus_1_1DMCFactory.html</anchorfile>
      <anchor>f65446ba7e120b2c16d8b6aa2647c20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>structqmcplusplus_1_1DMCFactory.html</anchorfile>
      <anchor>ae5b7854c403b3eb96822da1bd436699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCMoveAll</name>
    <filename>classqmcplusplus_1_1DMCMoveAll.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCMoveAll</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>33899302a69f8e3de42092c501b976fb</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCMoveAll</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>47f55568b032d35284d519e4fdda2bf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>eec18512986b6383d094eba118f4bcfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>0848744f6c8c5d6d2b8b93a57c24cdd0</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCMoveAll</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>04ad4927834ed8a73b657405a87a8d0d</anchor>
      <arglist>(const DMCMoveAll &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCMoveAll &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>11d90019ad8ba7fe1635b7ed77cdaca2</anchor>
      <arglist>(const DMCMoveAll &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dmcWithBranching</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>2ab2bb104be9d20bde5a2c8c84922f9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dmcWithReconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>3e0411735c57e4b9ae29fb99fc8036f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>c89d7d4ff0869dcfa28b801425ef9cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>119a9dbf4c49af871b4ebae241d4c764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>41f9da5951edb0420821a8942558dbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NonLocalMoveIndex</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>2d353ba09bfa2267ec27b5dd81e76387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>7b3d0bb4cb2b2606c5724c3cc84b74d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>ad7fd9d3779ec564cadc9572d23264b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>classqmcplusplus_1_1DMCMoveAll.html</anchorfile>
      <anchor>162f88698602ce2e08d6b222a0c58447</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCNonLocalUpdate</name>
    <filename>classqmcplusplus_1_1DMCNonLocalUpdate.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCNonLocalUpdate</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>055c6371d8cd2d22b73f89a1ed30e0c4</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCNonLocalUpdate</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>6fa7b6a76818ba368c30afb048067fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>a0b5ea1300af12ecd60a0c8bbc9ce6df</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>644eb9966634f02cf70b93adf0df6f5d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCNonLocalUpdate</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>adfb9629b2d170f2b83a6c5b89289043</anchor>
      <arglist>(const DMCNonLocalUpdate &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCNonLocalUpdate &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>f9c7ac6f4495b85178ea71dfe7d31f3d</anchor>
      <arglist>(const DMCNonLocalUpdate &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonLocalTOperator</type>
      <name>nonLocalOps</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdate.html</anchorfile>
      <anchor>f17f1f5385a1860724ae5fdbb52d106d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCNonLocalUpdatePbyP</name>
    <filename>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCNonLocalUpdatePbyP</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>d99f6d43bc47b26690dd858320246314</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCNonLocalUpdatePbyP</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>14cf3e4f490d9140a3b019bdd7b98e3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>8f0fbee6ac22949aa41ccc7b0d52a474</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>d5b46b4424f74633bb97fe6140419e86</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCNonLocalUpdatePbyP</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>3cd3a78f936df60748625c1a163df22a</anchor>
      <arglist>(const DMCNonLocalUpdatePbyP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCNonLocalUpdatePbyP &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>5c1fec21e5e78cef22f738f990fa770b</anchor>
      <arglist>(const DMCNonLocalUpdatePbyP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NonLocalTOperator</type>
      <name>nonLocalOps</name>
      <anchorfile>classqmcplusplus_1_1DMCNonLocalUpdatePbyP.html</anchorfile>
      <anchor>556c31f10630167e021ed6efd5229ecf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCOMP</name>
    <filename>classqmcplusplus_1_1DMCOMP.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>DMCOMP</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>e369c1c4078fe60e5cca28f5f5246e83</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>7612489cdff28cd2df50d48ea77b4ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>7bc7141ecf1a7d6a5ec266befa608676</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetUpdateEngines</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>c1bc73b8a8d53f21c88e3e52a178b9d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>b820d4631e3d646384fbe72a00eb097d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCOMP</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>452c3f02f8ce1052e02d6a88f9c20420</anchor>
      <arglist>(const DMCOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>dd53e10edc9be8ff29182aa2092ead60</anchor>
      <arglist>(const DMCOMP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>404623243fe9fb6006aa41e23049ba58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>cebe2fe45a7cf5d9f0d6782d216c8b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>1a5c06856deff01204439afee690a68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>f2df2b7ad98729df34a53c0422a2d3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>a028bba55835c43386f5422a143b69fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>1510f226ae6ea2245c8daf954c4fa925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>0209144ab0a60b57268dc2349e96c6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>classqmcplusplus_1_1DMCOMP.html</anchorfile>
      <anchor>4bfc5ae66dda595a30e75f0e940a0d89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCPbyP</name>
    <filename>classqmcplusplus_1_1DMCPbyP.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCPbyP</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>cfac6fff62ae44eaab1948cac1902ffb</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCPbyP</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>642acaa8b13cf46a112a60d86578a223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>8cc7945ca339a50d92c03f754d131d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>c803856f66f16fb77156b7564fecd495</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCPbyP</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>6d61a7b47200733111d9448600e05406</anchor>
      <arglist>(const DMCPbyP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCPbyP &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>7717b9f94e9c861f1ab01cdc8eaf9f0e</anchor>
      <arglist>(const DMCPbyP &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dmcWithReconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>3c48561369124270ccb17f8ba693b880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>dmcWithBranching</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>d0676e283cdac7a915a44947e558c882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>b972fc4152048db77763c096621af54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nAcceptTot</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>7f83a97c2adf831d6e308a2e02f40713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nRejectTot</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>551060ead5cd44bf1dedb4b0bdb2a066</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>BranchInterval</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>086f57eeca87cd6a76a2a60c4007abf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>NonLocalMoveIndex</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>95c3b3b45df0aadff28c2fa3e5d5ca63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>c200787eef710aa92c0b04de4e4842f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>3210d1c1f3da9a584011c6d76a1bc229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>9e54de82e06cf428a0cfe2d534a1304c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>70f58652d56377b5a11b45844cb50cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>NonLocalMove</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>2ada5d7685a4014792705894b68c22aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyP.html</anchorfile>
      <anchor>1fd427d5b101d73a1423900de2df6244</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCPbyPOMP</name>
    <filename>classqmcplusplus_1_1DMCPbyPOMP.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCPbyPOMP</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>f15d0c803197d862aebd22a37a585d83</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeClones</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>2b34f4ce61429baf5ffa22cfb148abfa</anchor>
      <arglist>(HamiltonianPool &amp;hpool, int np=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>6c8d1e408a869bed4de299ad411a2e35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>c94ad44ea32bd6e904ee30971d8a060a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCPbyPOMP</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>9bec76d5a7dbd6fd6220d09b2e267fb1</anchor>
      <arglist>(const DMCPbyPOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCPbyPOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>38029352c49e37db852f780619a4264d</anchor>
      <arglist>(const DMCPbyPOMP &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>1a2f3e6ef817eadf9c6e1cb630840eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>7e4552d9cfbdbd88378fa7367744d8ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dmcWithBranching</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>7c332ce9907f08fe87164383bd0da633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>dmcWithReconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>4207d0affb976bce428285baa472afed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>KillNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>e6b5ff1ae6949762a2a4b25a9d719b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>PopIndex</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>042952064d9aaaac9070b461645c97e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>EtrialIndex</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>dc50f6aede0f7509e760632a15ac74da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nAcceptTot</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>449b4ed6f9be483d38b61ae6c5f14e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nRejectTot</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>df9c7dc18a8149f0ed95901dee9a15b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>f3093cb38d03a8286c811eeace238d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>KillWalker</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>918bc84d02118feed838514c0e4b4deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>2eb824c6bb61aea978248b45f9d86509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumThreads</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>25fd90c2ce5467a6d832337a7b221b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>Reconfiguration</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>2dceca746f89e6b994d64efd1d570e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BenchMarkRun</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>55bcbcc08b91cbae10d28d8bfb1382e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; DMCUpdateBase * &gt;</type>
      <name>Movers</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>260fd33fb4a35faba930a394ece42c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>wClones</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>f06552ee4ea1046304fb8f4a924fab80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; TrialWaveFunction * &gt;</type>
      <name>psiClones</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>c08a37dd24cc98c67a402577e81cd781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; QMCHamiltonian * &gt;</type>
      <name>hClones</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>6de14c2a89f2fc3adaec5e92ecb7043e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RandomGenerator_t * &gt;</type>
      <name>Rng</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>2972beccbe3010d45da9d8c0d30e79d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; BranchEngineType * &gt;</type>
      <name>branchClones</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>a2c11459e5e49b1b1a7afb44fdc3d1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>wPerNode</name>
      <anchorfile>classqmcplusplus_1_1DMCPbyPOMP.html</anchorfile>
      <anchor>de4faadb7454a20b4f62550718fd2626</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdateAllWithRejection</name>
    <filename>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdateAllWithRejection</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>71d60681660d5cb5f7a8e65dc84080ea</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdateAllWithRejection</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>595ce932b0f5a433d39663ece0465953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>2c0e933fb158b3791eb3cfc6e7b5c442</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>32eade82f3e02be7e894bd41418d9bb8</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>355d5266698a9daa781397fba3fe1439</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdateAllWithRejection</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>12586adc928cbd5dfaf5edf7c3f66c85</anchor>
      <arglist>(const DMCUpdateAllWithRejection &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdateAllWithRejection &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithRejection.html</anchorfile>
      <anchor>bb80d0ca19a90c289c4c207570bb5e99</anchor>
      <arglist>(const DMCUpdateAllWithRejection &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdateAllWithKill</name>
    <filename>classqmcplusplus_1_1DMCUpdateAllWithKill.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdateAllWithKill</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>efad52648498700463753bf0e6961cb3</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdateAllWithKill</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>3df58302fd257fd7007007145e30a85f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>8d3db9144d61f5bda1f5ff61e4ad3e7d</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>aebc745a913ac8984130cb484c63ef36</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>fa6ed0ca89fd3c2578aa1a889b98767f</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdateAllWithKill</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>c4e50ab85fa156c2560bad34fe495a40</anchor>
      <arglist>(const DMCUpdateAllWithKill &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdateAllWithKill &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateAllWithKill.html</anchorfile>
      <anchor>ee10d7ee50f3f7f3c4c20c877beac29a</anchor>
      <arglist>(const DMCUpdateAllWithKill &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdateBase</name>
    <filename>classqmcplusplus_1_1DMCUpdateBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>08ce6c27adca6bef12b240591b8c0f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::iterator</type>
      <name>WalkerIter_t</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>45d2998a953d7353e954cc9567e7b895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>BranchEngineType</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>9668dbdee62101ac7bd723e93eade705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DMCUpdateBase</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>5df58b4f1c8152474a651241010ad00f</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DMCUpdateBase</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>2d8af1c886444a9cd2a729604ba4f0e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>acceptRatio</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>e55bc9540043ce5d0c002e22d3586ffb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>cf826a83878505aea68271404d5bc365</anchor>
      <arglist>(BranchEngineType *brancher)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetEtrial</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>839894b00c1da2f2b03af63aece6f487</anchor>
      <arglist>(RealType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>25d3bf1d761eb2a73afc329623b320db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiplicity</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>f7b9cd6f1a6a949b22afc707be4aa40c</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>aea09e33bd56c212a89f086e03b7071e</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>9faccec69e4cb59588001a4d43d8541c</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>eb1d1ed0e8464ebeb7ea1ddf1872f5dd</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, int ip)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>246992d84bab10537ce9773ad3a5674f</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)=0</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>MaxAge</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>95f5e2873ce82a2ca2d15cd0746aad91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nAccept</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>de908dc69c63414a556fe00a103a9905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nReject</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>344edd8ac9cea668e55c03d850b02164</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nAllRejected</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>f9b5cdc74edd2b71a2c6639d1a904c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>e191ae7082ba8947750f53004c092621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NonLocalMoveAccepted</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>6fc33bc37f5141bd253a6af29b4b2c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DMCUpdateBase</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>958ca70c02ea199411a09e70208501a2</anchor>
      <arglist>(const DMCUpdateBase &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DMCUpdateBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>99ce70f050f022daab57ec55cb53d86e</anchor>
      <arglist>(const DMCUpdateBase &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumPtcl</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>623332bb86744e708773af5e044be8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>7a17ce1c3d731c679622be390816e6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_oneover2tau</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>014827ae3485305e7603a269eeea3d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_sqrttau</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>d319fd99fa2fba3f62b4761091657a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>W</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>861e0556a52a19dd29bcef75e59f7613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>6502fdb64a4840beeaca580bac49e267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>929c8579d1ffed1288af4cbf0dbeb3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RandomGenerator_t &amp;</type>
      <name>RandomGen</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>8c39557e488f82bc24de057e8c50ebe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BranchEngineType *</type>
      <name>branchEngine</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>937f5d324cb676584880e100cd24fd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>4beb0824e85838d309d23c8abfb407b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>2e14403f7cf5cf863169c082168409c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>b3d253e14d3247df1f5a02300368bf06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>6e17a9adf0dd1b18b12bab5590ca7a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>5ce849f6f1e6ae74a6dab34729f34496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdateBase.html</anchorfile>
      <anchor>423c607f57161ce9437f5e67b2b95dcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdatePbyPWithRejection</name>
    <filename>classqmcplusplus_1_1DMCUpdatePbyPWithRejection.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdatePbyPWithRejection</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithRejection.html</anchorfile>
      <anchor>7876ab7a83a3cecd892e7d3319c07286</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdatePbyPWithRejection</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithRejection.html</anchorfile>
      <anchor>73b23297729cfabd7110a36c00497a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithRejection.html</anchorfile>
      <anchor>77315b7971083ce14f9542ce201584ba</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdatePbyPWithRejection</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithRejection.html</anchorfile>
      <anchor>c437f246268508525224243fe82f17c6</anchor>
      <arglist>(const DMCUpdatePbyPWithRejection &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdatePbyPWithRejection &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithRejection.html</anchorfile>
      <anchor>19a92e0b424fa79d66a44fcbbfed7483</anchor>
      <arglist>(const DMCUpdatePbyPWithRejection &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCUpdatePbyPWithKill</name>
    <filename>classqmcplusplus_1_1DMCUpdatePbyPWithKill.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>DMCUpdatePbyPWithKill</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithKill.html</anchorfile>
      <anchor>aaf003cdb60e27f0c5dd4c97d9c67b93</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DMCUpdatePbyPWithKill</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithKill.html</anchorfile>
      <anchor>e5a60d661f984da13bb79f9d4881a9f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithKill.html</anchorfile>
      <anchor>3e53a2bd45689b276ffdb058ae486c13</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCUpdatePbyPWithKill</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithKill.html</anchorfile>
      <anchor>8e1da57361ecce0b3c9b2f3b7bac20db</anchor>
      <arglist>(const DMCUpdatePbyPWithKill &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCUpdatePbyPWithKill &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCUpdatePbyPWithKill.html</anchorfile>
      <anchor>46738b6212940863573e7b5d3cc35f95</anchor>
      <arglist>(const DMCUpdatePbyPWithKill &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DMCWOS</name>
    <filename>classqmcplusplus_1_1DMCWOS.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCWOS</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>2f95c5580020a56f06277bfa0e6439d4</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>f3e82428438fa399cba14489de7476a6</anchor>
      <arglist>(BRANCHER &amp;Branch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceAllWalkers</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>dc364e4f1ff7404e169bf6a06640fb68</anchor>
      <arglist>(BRANCHER &amp;Branch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>c9fd400221ea92fb380e9cc1d1337bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>96340a42c90f5c232888c9c9275e6986</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBranchInfo</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>d779307126b19b1d469d6837d0fe1247</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCWOS</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>a29f795f36272eb5c74a41385315a09d</anchor>
      <arglist>(const DMCWOS &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCWOS &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>e6b3d32fd352656d060fccc1d340d6b5</anchor>
      <arglist>(const DMCWOS &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Tau_var</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>b6bb031584d8dbdccbd5b886b03075ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WOSPotential *</type>
      <name>wos_ref</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>e61c0f7f51e02c093956947617b4bed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>BranchInfo</name>
      <anchorfile>classqmcplusplus_1_1DMCWOS.html</anchorfile>
      <anchor>bd156032c2fdff408b56e118b77c8b4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerControlMPI</name>
    <filename>structqmcplusplus_1_1WalkerControlMPI.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerControlMPI</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>0a439f66a6dbaff383b72af5a8ddd426</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>2e1d67ccfb715c21cb1cae6d4304ce65</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>dbe3f1140289a75ab71cfd35369dd06a</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersSimple</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>40b8aa94ef582927fe151b6fe011160f</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersAsync</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>fda10e680d7f69204d159bb879fa1619</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersBlocked</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>756448cd50bf8d9eb9268184dcb88db1</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapWalkersMap</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>d0e92433b2a367b7c16292b880a197c4</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumSwaps</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>1cb3df2976407622c794e4a083d2cbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MyContext</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>c67e713af89c72c27eaef0602e534d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumContexts</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>f6f15fef3fcb90896539a86f66dd24c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Cur_max</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>f3e4a724829042965e2da6f35493ba76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Cur_min</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>c5cb8fda2b821bf5f88baff86beeb50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Cur_pop</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>bccfa63b1dc8f396bb14db52e40835eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>b4aa0824acb5c4665ac81a4bebdaf68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NumPerNode</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>a28de384c30c5b342dba79e48919c248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>OffSet</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>98ffc149f951fb456f5b87035811ab4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>FairOffSet</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlMPI.html</anchorfile>
      <anchor>12badbb5e7947df459b40d5415aac97e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerReconfiguration</name>
    <filename>structqmcplusplus_1_1WalkerReconfiguration.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerReconfiguration</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>275803b6c54ee7dc1ebedf3716a171c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>4898230920ee2af85861117fbba6577f</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getFeedBackParameter</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>2159f24bb00c13ec68484b431a66d472</anchor>
      <arglist>(int ngen, RealType tau)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexPermutation</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>cc66fa0d7f6e474b120c8176fd5a5f39</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>shuffleIndex</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>956f99f2b00ec5fba828dc2999ac7d4f</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumContexts</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>562c53f49a92189151c054ba417d3a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MyContext</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>3bd58b780bf220e9d58e6580c2f34369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>UnitZeta</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>7c74a24b44fee30b4f4d53fdb7af72a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>IndexCopy</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>9ce025257f453489d799b7c7927479c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wConf</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>021cb8d565b945397e7135c5d4dc0639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Zeta</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfiguration.html</anchorfile>
      <anchor>a5803fb11f1553f80beea62f97a4e3c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerReconfigurationMPI</name>
    <filename>structqmcplusplus_1_1WalkerReconfigurationMPI.html</filename>
    <base>qmcplusplus::WalkerControlBase</base>
    <member kind="function">
      <type></type>
      <name>WalkerReconfigurationMPI</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>d746583f1f71d3ee2df5a01b9d377e05</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>da1000927471f3389d9dd6dfabc6cf94</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>0e1c2f8140b70f3d990018ee5b1f5e17</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>swapWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>9fb88b1146618f17e6f71ba47a9dfb98</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>2cdb0d963273f691a621fbdff516cc8b</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const vector&lt; IndexType &gt; &amp;plus)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>e3981c9685874e6047d4564cafd7ab53</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, const vector&lt; IndexType &gt; &amp;minus)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumContexts</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>6062a6299bb4bc1e1bb96f60c49a8300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MyContext</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>5928e188b44b483e7f83bc5531c54212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TotalWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>e9548bf2efb9a6cdc37d8f47335bed3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstWalker</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>3da1dd05995e57dd2299946a5c11eb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastWalker</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>ae52447b3fb72d0ba4921e8dff960471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>UnitZeta</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>c2f8c9cda405f9f9a6e822c3702ee0ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>DeltaStep</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>1c99a02f778a717cbeb434fc6efb327f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>nwInv</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>184a5731255a322bf4c46386b6fbcb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>myComm</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>61d8f38009e25ffd631f66070a6de309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; IndexType &gt;</type>
      <name>dN</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>9d39b505442a1d6cbd90a50b01b4c430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wConf</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>622128d3136ce32b8e738b1b0d3fe3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wOffset</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>975fac5d41246ce05df86469245625da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>wSum</name>
      <anchorfile>structqmcplusplus_1_1WalkerReconfigurationMPI.html</anchorfile>
      <anchor>f96470a1ed1e5b106e00e6acf7c44443</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::DummyQMC</name>
    <filename>classqmcplusplus_1_1DummyQMC.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DummyQMC</name>
      <anchorfile>classqmcplusplus_1_1DummyQMC.html</anchorfile>
      <anchor>fab28b240988cbf85782ba04764f8923</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1DummyQMC.html</anchorfile>
      <anchor>2b138f498cbb2e7f7373887395824392</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1DummyQMC.html</anchorfile>
      <anchor>8ff66b86a6f3ff6bc22c7c7c38a38a21</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DummyQMC</name>
      <anchorfile>classqmcplusplus_1_1DummyQMC.html</anchorfile>
      <anchor>f236a85460d848f9525c535142339e80</anchor>
      <arglist>(const DummyQMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DummyQMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1DummyQMC.html</anchorfile>
      <anchor>0d0bb04c706b021350fa91b0b2160c13</anchor>
      <arglist>(const DummyQMC &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::GSLOptimize</name>
    <filename>classqmcplusplus_1_1GSLOptimize.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <base>CostFunctionBase</base>
    <member kind="enumeration">
      <name>FieldIndex_OPT</name>
      <anchor>37653f1f1dddf59a037d823959c26295</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI_FIXED</name>
      <anchor>37653f1f1dddf59a037d823959c26295fb469bc03d4fd468fe5a6c51601141fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI_FREE</name>
      <anchor>37653f1f1dddf59a037d823959c26295a74339b1cce450d262b461979b9cc86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_TOT</name>
      <anchor>37653f1f1dddf59a037d823959c26295cd641a41ee73a2caebfa293e57b14a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_FIXED</name>
      <anchor>37653f1f1dddf59a037d823959c26295f8f03c97f7903304621e5b7563b1c594</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_NEW</name>
      <anchor>37653f1f1dddf59a037d823959c26295560c370d4a8453b1fd9c1663bfcd10c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REWEIGHT</name>
      <anchor>37653f1f1dddf59a037d823959c262953dde57d652a5f1981fa8ce532dbb62a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SumIndex_OPT</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_E_BARE</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fdc46c87c1aadc6186187475148e44b68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ESQ_BARE</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd9bab04868985298022712d12566839af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ABSE_BARE</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fde52ce89a9911ddd00d14ebeedd0572dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_E_WGT</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd5b6ffc1479b3908c17234fa3160276f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ESQ_WGT</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd5636af82efbc6ed2562cb48c93632e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ABSE_WGT</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd30f4f4a696e47c2d9c4cc32a4da9df24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_WGT</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd5434dc7398df6925bf2c83eca4ca7df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_WGTSQ</name>
      <anchor>a5493c3339cd18d63bfa45b742d830fd8325cf44e27da31742e4d1f3b5792d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GSLOptimize</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>7f403cd4326aee72cc271ffb5907cc36</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GSLOptimize</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>1970df2189ab235f90a10ce65844d3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>51ca98331057c0b6ae69750eb11b7cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>8e294c26bcbd650a6d1927c32acc8dcb</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>Return_t &amp;</type>
      <name>Params</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>2e0dff0663e599d58d4692acbefae2d8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>Params</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>d67bbb1a796b64d578629424b46928f1</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>Cost</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>dcace086808560fb20ec7d85a63fe91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>correlatedSampling</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>212d57f0a52c4277933fabb8f3149c58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>2cc674e4bdc99494e4517d47e367fb6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>c13c3d62e0b26496e24a6b1ae72ddd9e</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionNode</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>c8291e068b1976abeeda3487776843b9</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Report</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>c62b3e8041f6931920fc81fd76839ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkConfigurations</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>6443d8dec9f3b13519cd99bdeb9f8669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>resetWaveFunctions</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>86950d0e47d35357ee6d8feb8ec37b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkParameters</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>83299128d4557bed5bb05425d35748f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>putOptParams</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>c3f316ed766b17ffaf9b338eba7c9606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GSLOptimize</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>95727599840a8e447ff831246ef4aee2</anchor>
      <arglist>(const GSLOptimize &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GSLOptimize &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>be680124fd6b2d8ba96e95a405bbb0c6</anchor>
      <arglist>(const GSLOptimize &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseWeight</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>3070f4cc841ab3802a28bc23e20ffc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>needBuffering</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>82bbc022007b356317065ad8db6b3f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>hamiltonianNeedRatio</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>8e9d5b9988ef6cd69c92b0aae4bda245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PartID</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>1999092e31107c2a9de9e4aab47906a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumParts</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>656c6738c51eb148ff7a9e5caf50d650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PowerE</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>7228f044c245f3a8e6df029dff7eaa93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCostCalls</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>4ec5051a2728f812330a3196dc68aece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSamples</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>ddc48a09a4d26d1e2e50fc008cd3ccc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>cg_tolerance</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>ab190e479b1a57ee7257fdd3004ebb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>cg_stepsize</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>614b9ecda665baf9d92fc9b0736282ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>cg_epsilon</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>b352beee92261f98de050d68999d614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_en</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>cccc92c672da1e086db8b3a11208ecef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_var</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>8449042588f441fee0990f64e0760c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_abs</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>22a765bd1b42e3df3281b1beaec54768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>CostValue</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>13940e9a62c9a6b95e0dae39495135d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>Etarget</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>b35698ccd5f542fa67e6f78f8565b648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>EtargetEff</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>f5e618eb0d674f6ca87d108e0ed80d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>MinNumWalkers</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>8d6a0d83840210b92d4319d3c7b62e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>CorrelationFactor</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>b0f20f7fd1acb5db3306db29bef87fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>m_wfPtr</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>ce31daf7699d803809a120decf1adc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlDocPtr</type>
      <name>m_doc_out</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>c2b2327a8e042f821a1d35c15aae8dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_param_out</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>0c0da4939810467f284ad2d170da971b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; Return_t &gt;</type>
      <name>costList</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>222715e2de73640ff647d5b535c5976c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; vector&lt; Return_t &gt; &gt;</type>
      <name>paramList</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>ce9b5f9ef2b0b1a808903fe10391b996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Return_t &gt;</type>
      <name>OptParams</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>5bb8857e5090200902a094b87f7af212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>IDtag</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>3e553e1d32d83469282d1a5e02e09256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>optmethod</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>daa19b00dee0303f9daf4e523a3ad347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>ConfigFile</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>36e8e4d33f60e5df1b08bab1737ae999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian</type>
      <name>H_KE</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>640fdfb04d1a14151b98a3dc4218d850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TinyVector&lt; RealType, 8 &gt;</type>
      <name>SumValue</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>13a3df357304d2a1e5015d4aec52f4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Records</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>36d38af013ea1c63f664cf22d35c7ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1GSLOptimize.html</anchorfile>
      <anchor>833a47fb3caf02dc00b94bb9fbc62cf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; PooledData&lt; double &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>PooledData&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>e23f6a14eed5c132d5a1f6be8f8639ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>78688de8bcdd0f63a667f1dbd7b40e2c</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>f492456437834000e4a85acb75b3ef6e</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>0c18368c20a05b157875b37033c59616</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01PooledData_3_01double_01_4_01_4.html</anchorfile>
      <anchor>cd7f5ac9a7da55a41394598341d23c40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::Bead</name>
    <filename>structqmcplusplus_1_1Bead.html</filename>
    <base>MCWalkerConfiguration::Walker_t</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>b61450af952a5984298bf3670baa25b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::RealType</type>
      <name>RealType</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>004b2d23bdb13e5fb4e451ed2cab747e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>8e9c909cc1a49ef6e919c42c3de7b971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bead</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>c16c4685abf5821efc2112083c51cba0</anchor>
      <arglist>(const Bead &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bead</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>53f1551b28e90550f9633f33ba6a5a2d</anchor>
      <arglist>(const Walker_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Bead &amp;</type>
      <name>operator=</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>1b97dc383cfc746c8baf78ae345a0d5e</anchor>
      <arglist>(const Bead &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopyBead</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>162922412ae423a9fbeb2d62a3ce69be</anchor>
      <arglist>(const Bead &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize_Grad_and_Action</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>77ab9f5469c735a515383cb10e4419d6</anchor>
      <arglist>(int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>9c582eebcc83a8498ab3dd3fffda79d7</anchor>
      <arglist>(Buffer_t &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>207c928e151d7f00f3cb5482cdb96084</anchor>
      <arglist>(Buffer_t &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>3d5329a93ff618ee360f7f59c4c9f412</anchor>
      <arglist>(Buffer_t &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDrift</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>8a5a4f362067c6daf5145cbc968aeacb</anchor>
      <arglist>(vector&lt; RealType &gt; &amp;LogNorm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDrift</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>006bd17d56a94567de532d12926da116</anchor>
      <arglist>(vector&lt; RealType &gt; &amp;Jacobian, SpaceWarp &amp;PtclWarp, vector&lt; RealType &gt; &amp;LogNorm)</arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>BeadSignWgt</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>20f89b40cedc3126687fec4edefd8fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>Gradients</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>2d122bc3be8457ae0e4a10b11c49ff81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Action</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>398d123ace82da574e51b553e7eea06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>TransProb</name>
      <anchorfile>structqmcplusplus_1_1Bead.html</anchorfile>
      <anchor>e891ad610d5014f2ad2874a44ea9de88</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::MultiChain</name>
    <filename>structqmcplusplus_1_1MultiChain.html</filename>
    <member kind="typedef">
      <type>std::deque&lt; Bead * &gt;</type>
      <name>Container_t</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>2a128844346b3b247348f8ae1b411504</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>74ac2671048bc27517d98d769f7ac1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>980f0ed08cec462ecf591e7543915292</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::reference</type>
      <name>reference</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>57b31f44aa15c885c2d82df5bb57b597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_reference</type>
      <name>const_reference</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>c96026fd482ad26bb4eabb14216d9893</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>de8f522b3975852a17165997d81c8cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::RealType</type>
      <name>RealType</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>bd097c400c4f37a79de3bba201b732ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Bead::Buffer_t</type>
      <name>Buffer_t</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>2cda90ebc609c9b960d1ed8479ecf061</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiChain</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>951e7bf3f371d11f5463401c250a7a03</anchor>
      <arglist>(Bead *abead, int len, int direction, int npsi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiChain</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>4e3e366d709ff9f4c99b3806b649b68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>535fc96b72311298a745512a40787f9e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>545cdc2d194c894d2e06c96769fe84e0</anchor>
      <arglist>(int n) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>9fd0b89fcd248739b8f1402b49f5e279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>a7e369f5096cf513bf44cf424c665543</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>1b48e3baeb905f561828e3054fd87f1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>03b02437bed9555a823c5d45e64b9572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_ALL void</type>
      <name>push_front</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>66338cb7a783239206de7cdcdb5c9be1</anchor>
      <arglist>(Bead *abead)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_ALL void</type>
      <name>push_back</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>c96b976e7fdf4a3f7f5913ac892457d3</anchor>
      <arglist>(Bead *abead)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_ALL void</type>
      <name>pop_back</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>cfbe0b3ec08bca9d80f1970c2f68095b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_ALL void</type>
      <name>pop_front</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>073107099a8a932ce6136f3be643bbc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>482d8e2e685807a2398f131d1619c35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefSign</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>2a055b185b5ac14b78223be2b419df52</anchor>
      <arglist>(int ipsi, RealType phase)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSign</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>348b25d8520f5bcb9e769c4123d58682</anchor>
      <arglist>(RealType phase)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>1dc19b0e7049c5afb7c7336f8c05a1f4</anchor>
      <arglist>(Buffer_t &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>5048bbf749dd4632af2f8298901febc8</anchor>
      <arglist>(Buffer_t &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>e423993575c00ffd91cafb78135c360f</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>680806fc91213f777cfaa13dd18bea5f</anchor>
      <arglist>(hid_t grp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>c9811f820933da5f7a726805c35aeb97</anchor>
      <arglist>(hid_t grp)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>GrowthDirection</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>a28dce374823993f4c1c5160ced4d4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Middle</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>b06eb417f2cf410711f2ac031e5bcabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>2a60e3a91aac2bd4d52e548d57745912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>5f25d7ec296adc185481cfe0c9c4c745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>GlobalWgt</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>4b53b89e49e56359259f4b5bbc880b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>GlobalAction</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>d6a1b342f0126abfb700dae6c9bd3d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>423071e1d1b4f263519d7cbac169098b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>GlobalSignWgt</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>0706407f7f274536ec5605e0f07724fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>RefSign</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>4a01044e224e8b3ef53d6650f17c0da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Container_t</type>
      <name>Beads</name>
      <anchorfile>structqmcplusplus_1_1MultiChain.html</anchorfile>
      <anchor>e3af1a6ef1ef1274b4cda74a3d265172</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFMultiChainOutput</name>
    <filename>classqmcplusplus_1_1HDFMultiChainOutput.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFMultiChainOutput</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>6aaed02f424d5a47629d15a1da777bc9</anchor>
      <arglist>(const string &amp;fname, int count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFMultiChainOutput</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>8ffc08db3a21fbd23a5b2c5a846f9b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>c84aa4039d8bb4417cab991f4640c33f</anchor>
      <arglist>(MultiChain &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>AppendMode</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>e2e502b266e143a716449ce362d8c150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>ec8cb6a1f99c67a23a76fb3f7c2566bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_version</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>5125295b4995eb38690036617f231c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>h5file</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainOutput.html</anchorfile>
      <anchor>117ee495ba8fcb4fe70dfc083270aabf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HDFMultiChainInput</name>
    <filename>classqmcplusplus_1_1HDFMultiChainInput.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFMultiChainInput</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>b32e45bf44a1df109ef5e9dc1f0ba435</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFMultiChainInput</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>c73d606e4be9692064e030cd33c75dea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>ff6c4fcc9d18256bc0c9cb2092c2aca2</anchor>
      <arglist>(MultiChain &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>bfde9742e1eab6d5c3f524f4fd56d3f6</anchor>
      <arglist>(CT &amp;anything)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_version</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>be3ae11cf3d15e50d5e4ad38ed2d0970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>h5file</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>cbf4348ee341244306ccb1c99d9e470f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstSet</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>1b656d9a6a1212f7acd93e7ff2a50f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LastSet</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>77644e4d0def7d669ce87400417710d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>c228846014ea91fb80a80bfa11f94372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hsize_t</type>
      <name>NumSets</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>41488ba7f832d6021b1bed51f82f0f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_file</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>6d047e580e69161e8d987bf863390969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_config</name>
      <anchorfile>classqmcplusplus_1_1HDFMultiChainInput.html</anchorfile>
      <anchor>e8b69c4d664d62c442f2acd9353a3242</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::PolymerChain</name>
    <filename>structqmcplusplus_1_1PolymerChain.html</filename>
    <base>std::deque</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>0be40744ece8647d4f4b889a5fa891d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>8d9aef61bc0c060c721ec25fa3af9647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::RealType</type>
      <name>RealType</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>0deaf3d7bcc7a829a4f93b755f076f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolymerChain</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>ce50beee621dd98902448bcddc54fb2a</anchor>
      <arglist>(Walker_t *awalker, int len, int movables)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolymerChain</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>3c2c1430c3c259621f6a18947981ca80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getID</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>97e2991df33963c176edd4d0ec4f1920</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subCuts</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>f181d1d81610ee336671134bc8081379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCuts</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>5a7eac07b4cecd96c7fd74a4f8b4a027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeArrays</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>1d9fc6be3f0236553e6c7b69ea9de11e</anchor>
      <arglist>(int npsi=1)</arglist>
    </member>
    <member kind="function">
      <type>Walker_t *</type>
      <name>makeEnds</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>3f8e38dc877cf053a8a650dd796c8a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEnds</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>1e9bd897f6b4d1434813335fe852dc04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>9ce42197569d984c606968638567c956</anchor>
      <arglist>(Walker_t &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>193e8e45ad8de24427b298d5f6df194a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MoveHead</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>9578aab2e469f63a52bce20c4da816d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCuts</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>2d1d346279f7ae7a89f9ee25fe594bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Middle</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>07c431b417d590177ee4d32c06cdb65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>1d3050523e60278372d96686788a002f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>f6c8ec32d7a1add38f4ccc32473253cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>NumMoves</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>c55b688f8753ac1b2a695f381018b674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>AcceptedMoves</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>4738f718e828a4c0b2059f00a998891c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>SumRatioPrimary</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>3ceea5424f973a910e12709804248d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>RefSign</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>ca46ed90b3df91b000feb750e51db6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>TotalSign</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>92f2a3c98d2203fa806484627a94af29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>a60ab1120214d5b1846510f367866a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>LogRatioActionIJ</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>905cb4c11f7a48f18ac847239a4916d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>heads</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>f9248ab07b8e9bfd46fddb7fbe8883c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>tails</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>a7af043051801bbdd4e0e3202ede2210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>repository</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>0d92a79c4a432e19dbe272722d26d221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ParticleGradient_t * &gt;</type>
      <name>Gradients</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>d69c773e103f2a18442b3ef5e142648c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ParticleGradient_t * &gt;</type>
      <name>HeadGradients</name>
      <anchorfile>structqmcplusplus_1_1PolymerChain.html</anchorfile>
      <anchor>0220430288d1ec63df0b9a5345eb887f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::PolymerEstimator</name>
    <filename>classqmcplusplus_1_1PolymerEstimator.html</filename>
    <member kind="function">
      <type></type>
      <name>PolymerEstimator</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>9239c97b4306b3adfe90f15d2e1d316b</anchor>
      <arglist>(PolymerChain &amp;reptile, int npsi=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolymerEstimator</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>dc2f8288f21648f4c5a6f8f0a901602c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>0d757738d29c61a1868c42680603b4ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReportSettings</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>f339199518a9b793df2e556f1ff26acd</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>c30e05ee168d25bcc97ab2778feda4fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>30f13eddb04042a5bee82e0d13d5e601</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>be3382e88f9f2290d9124b328634cd6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PolymerChain &amp;</type>
      <name>Reptile</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>19e15a0b607b9165ee2d75fa1808f644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Middle</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>b52f4eed71de720fae57aad811866efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>cdbcab90ec38273e5c6b42c57d394ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ReptileLength</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>bc825d87e19fefac46940daacf872ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>31bfdfa042303d13e0da49762bfba404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>EpotLength</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>1ba1ee8c7c79b103374188b558ad2f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>EpotSize</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>eda465378d5ace5e4f9e8fba040ff766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ElocSize</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>de5d6b1e76a7fb94e8bd9897878fc0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>fout</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>2c21c1477940b9d2cb933d7b6aa3a757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>OutLocEn</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>afc164c2167915075300fe3e0a606608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>OutPotEn</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>f3f036352082c91416888069b4dccdde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; double &gt;</type>
      <name>AvgLocalEnergy</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>bbcfe3c95f1ad490d8030e0911e270fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; double &gt;</type>
      <name>AvgPotentialEnergy</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>75af992c83f9a9d094b6eaac916bbda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; double &gt;</type>
      <name>TotalWeight</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>a79af166aa38e04e043b906160ba45ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>PEavg</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>39239c5e595ac28561d013016f560e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>PE2</name>
      <anchorfile>classqmcplusplus_1_1PolymerEstimator.html</anchorfile>
      <anchor>5ac37e9bbea05fcbae1cef47eab7928d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCCostFunction</name>
    <filename>classqmcplusplus_1_1QMCCostFunction.html</filename>
    <base>CostFunctionBase</base>
    <member kind="enumeration">
      <name>FieldIndex_OPT</name>
      <anchor>8be733be45bc0829a383d1a6145b30c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI_FIXED</name>
      <anchor>8be733be45bc0829a383d1a6145b30c147bdd18c1ab0e69e13442caa3086fafe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI_FREE</name>
      <anchor>8be733be45bc0829a383d1a6145b30c1bb7318b8371ef9075becc097f3fb2833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_TOT</name>
      <anchor>8be733be45bc0829a383d1a6145b30c16c9577cbe126bb293c2e695372bfb0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_FIXED</name>
      <anchor>8be733be45bc0829a383d1a6145b30c13af30b055b825f3b8503c1eba0713c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_NEW</name>
      <anchor>8be733be45bc0829a383d1a6145b30c1f7a959ff11dfe47f5e35b23914b72d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REWEIGHT</name>
      <anchor>8be733be45bc0829a383d1a6145b30c13f9c9344da9574a6127dfee532d90a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SumIndex_OPT</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_E_BARE</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891f629b6cbcb5f792613444aa33889027f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ESQ_BARE</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891295c4742d575625c27f3a7452686baab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ABSE_BARE</name>
      <anchor>a08843bda86ccc5eb108f9d9ea38889174511d797debe17fb2d0998263041721</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_E_WGT</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891aeab4c7a5d803d3e8f7b755a016058e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ESQ_WGT</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891ccbc46014e7c693012b07d53ac450d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_ABSE_WGT</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891fcfea4ff80c247b4b684e1723e431bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_WGT</name>
      <anchor>a08843bda86ccc5eb108f9d9ea388891ed3441e4dd3a54aaddf7f36c903d96be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_WGTSQ</name>
      <anchor>a08843bda86ccc5eb108f9d9ea3888914ee2c5047ba82806cbcb128eb2232d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCCostFunction</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>cabc87dddefb8f5641afbd39a4302d51</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCCostFunction</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>cb7442338d686341cd2d6825bf3cc184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>9a1095ea8233e7ba1ae5d357269f81a8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>Return_t &amp;</type>
      <name>Params</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>230f0abd613c2d989201c91b160d4090</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>Params</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>b8b010fc589457ba76db1149f0e28163</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>Cost</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>f72ce4e42409d53c79030cdd6ff2656a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>4ace357c2ee9a98bc8dc4b937936c59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Report</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>6dbd561e54811acfd5ad252b5b35a11e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>correlatedSampling</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>1b24fef51f3d565bc4aa8af2aa4be1bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionNode</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>c1c1db50728b767dc04e294a27b5f941</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConfigurations</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>c43577bd500696c91bb3075c4e03ac8d</anchor>
      <arglist>(vector&lt; string &gt; &amp;ConfigFile, int partid, int nparts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConfigurations</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>a03c098fba22ff59a501ebb980f9fe2d</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConfigurations</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>b9130b260d880ed4c9ae6a587dff58cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetEnergy</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>b25911cf503ef73ddc1dcb764d9f6fa3</anchor>
      <arglist>(Return_t et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootName</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>70d893ae21cc1b4ab8d6919cc01f3e38</anchor>
      <arglist>(const string &amp;aroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStream</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>06f28596f3825283aeb286a438ff10fd</anchor>
      <arglist>(ostream *os)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>resetWaveFunctions</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>3639c2ef247fda33e9f1539b41f1bfbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkParameters</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>8ac5cacb9358d9b1b9c2517054509de1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putOptParams</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>2d3fabc8302194f0d647a81d741e6dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>626103da9510436b8e11f8d682cad68b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>94a5c6f808c8a227b9d274b701cbe610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>d89ae902296e332c4f8bb3b63e10bbb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseWeight</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>e88fd86ae509be467c149be71bc295b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>needBuffering</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>471e63cc8a26b9799b86fd1671dc7894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>hamiltonianNeedRatio</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>6d79ee17b0eae52a25087ef4c12bfa74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PowerE</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>2de9ccbcc365d4a3b97155025c726001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumCostCalls</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>dcface69ac173d0c2b5aa845bcfcab87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumSamples</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>8e05dca1cc9e56bb10f926e0e48213cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_en</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>139b5e0db9566a312a540a77aa730684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_var</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>40aa7a4bbf138eb898cd46b532ecb920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>w_abs</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>f12d08a9abab1c4042131d6ce03642be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>CostValue</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>34ea17dd1f77535f0a3fe95ff56389b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>Etarget</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>b6fb300d0c1d727e53c69849a47bb38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>EtargetEff</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>751fde8d0f12f4f46e90df40caced6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>NumWalkersEff</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>c170b66bbd330c8a3e972ea0af83b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>MinNumWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>d845545a3d4dac4fd8bb3f66c5cf5f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>MaxWeight</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>9077e7d41589f2459fb41aa1162dfd71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curAvg</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>fbd94adc4418b2fea3da68b38047e208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curVar</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>214ec7decb5fd1c0d29feeaa221796f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curAvg_w</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>24a439a60e33e4a49e37417f077a5f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curVar_w</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>97e058c4377f612c38ed2ec24b12a1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>curVar_abs</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>77e57428a006a68eba262654b1f5de95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Return_t</type>
      <name>CorrelationFactor</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>6e581459c1b38f7c8628dfdeb0a415b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>m_wfPtr</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>3464c73e3dfe91815288b80478c94b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlDocPtr</type>
      <name>m_doc_out</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>81f1969ef364d42d2b9a2847e9544e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_param_out</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>1bbebda39928004f4171575305dd5424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; Return_t &gt;</type>
      <name>costList</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>96a6dbd5a530bd859d5ad3f0871e1695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; vector&lt; Return_t &gt; &gt;</type>
      <name>paramList</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>5339a567f37ddc243b78d64bb95ec202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Return_t &gt;</type>
      <name>OptParams</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>f75f7ae00fece5c49c998082c26f6dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; string &gt;</type>
      <name>IDtag</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>8c6031201775530055b77347aea42670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>c3d30d0936dd40ba44df56e725a54922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian</type>
      <name>H_KE</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>08c02000dd1e1f04e8608c2d54deb2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream *</type>
      <name>msg_stream</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>5def7fc4b7dd0a5a4c47c2114c07cf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TinyVector&lt; Return_t, 8 &gt;</type>
      <name>SumValue</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>445acbfe4d26e384b0986f6941cccd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; Return_t &gt;</type>
      <name>Records</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>f961ce98d86599303e29d069f10cb664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1QMCCostFunction.html</anchorfile>
      <anchor>ed6c97f608ad169770b5442c1da62849</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCDriver</name>
    <filename>classqmcplusplus_1_1QMCDriver.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>QMC_UPDATE_MODE</name>
      <anchor>0f77908389148007519a12f6358070da16445334829bd889baa8f568f729c998</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QMC_MULTIPLE</name>
      <anchor>0f77908389148007519a12f6358070da5f1e46bc59ee76b7df83ae75ed8760da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QMC_OPTIMIZE</name>
      <anchor>0f77908389148007519a12f6358070da1c8c8125182f18a62eb2f5145ab3f89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>4913738601feb821563606b9f3b73186</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::Buffer_t</type>
      <name>Buffer_t</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>8dd9ce16244b7cbd8c47bf6d92458fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>BranchEngineType</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>b0db86d69b0f9fbc0e4c1a590a77d1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCDriver</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>32a973786b7a6d76a905396f7e9d681e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCDriver</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>2aa19da5ae382006b1f9c331c9cb3427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>c9ddef4f1858ae381b9d58859f9b5907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateMode</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>680bf321230860b3c3c9a817d7c402af</anchor>
      <arglist>(bool pbyp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStatus</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>423a2fc2260b6a346c83127f5c16c3e4</anchor>
      <arglist>(const string &amp;aname, const string &amp;h5name, bool append)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>95eaab81f31fabe7befe684ac0312f6a</anchor>
      <arglist>(Communicate *c=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_H_and_Psi</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>4793107506961444132bfdb43340a436</anchor>
      <arglist>(QMCHamiltonian *h, TrialWaveFunction *psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>c889c31d79d9f91e26e1bc7c368a470e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>0572270de328d3d52b10fad08dcc9615</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>getQMCNode</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>5bfdb6573c25947870d7b121f06c90ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>390fd218c827636fa2a3fa9360a1ff05</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;wset)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>b0444cb6245cd19fb08cbabcbdcf9cac</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>e2b4a20db28641bb0dbc852ae921fd2f</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getEngineName</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>27c8063613308fe2a635db647eac1a7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>24598cce29823a7b773194ab1c18acfe</anchor>
      <arglist>(const string &amp;aname, PDT x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBranchEngine</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>0d295a2f69726172966c076a1bfc4ee1</anchor>
      <arglist>(BranchEngineType *be)</arglist>
    </member>
    <member kind="function">
      <type>BranchEngineType *</type>
      <name>getBranchEngine</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>1fc508c8319cf29ea5a0091dd41bf49b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addObservable</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>1cf2e344ff67699dfad23520910606ce</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getObservable</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>787c5f894dfb5ecc8e22802972d7968f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable">
      <type>ScalarEstimatorManager *</type>
      <name>Estimators</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>f1304d966d79358b37d7a89a361da22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QMCDriver</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>6cb2fdb5c132b56f1357d2e869de61b4</anchor>
      <arglist>(const QMCDriver &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putQMCInfo</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>ba08ee849f32cf76a263525439e47d49</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>3cda5d6135d448ce29c82fd3498128d6</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>recordBlock</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>f66ca539923ddf146f8ca21087f8ba55</anchor>
      <arglist>(int block)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>finalize</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>285d764578c19208256a8ba2977d5682</anchor>
      <arglist>(int block)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BranchEngineType *</type>
      <name>branchEngine</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>cf14fa86c8eefa270d018a9ca09befdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ResetRandom</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>b840043810bd22299deb248166f84826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>AppendRun</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>3cc1eee883541fa7f416e60edb175fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MyCounter</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>73874e2f1d3ad70053b302aa67138a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>RollBackBlocks</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>c41d0bc82b9943542cfabc84a306e6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Period4CheckPoint</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>325a3049711e80839ac38b682e5b3588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Period4WalkerDump</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>9ddfe80c682473efb81f60777d9fade4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitset&lt; 4 &gt;</type>
      <name>QMCDriverMode</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>f437342de8e8e01dc06f54e89efc3dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>CurrentStep</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>81489744498fa75df4e5d5b7fba98fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nBlocks</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>219b683bd8653940c1ca571ef28debf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nSteps</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>9315cb12983afd6043e712ca55791543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nAccept</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>1380f65eb8378adee1054ff87d628350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nReject</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>f95f7ef8efa8e89369e98ebb7b146c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nTargetWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>12bf923f54439de0682a8c570b387113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>e6dcc2d10907c61ef10c83558e6cb9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_oneover2tau</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>845a6a4a8a5ac65b521fdab34e377f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_sqrttau</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>8eec3b22bc4a1f6e676e9576e385f457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>qmcNode</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>4904bde2f91bf43181bff4908254f86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>QMCType</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>989682572b2e83b54ce14156faceb265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>h5FileRoot</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>c86553c1e9a48e1023885ab9a436623b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>a5f8a1311c5c4cfc1d8cb117c7888068</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>b957fe0b395ff1333004382fec1fcbde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Communicate *</type>
      <name>qmcComm</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>5cf8496ef56e668dfd971062d63ffbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>6f708b401b55d6a0889e9f27d4d1f05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>61dcd67ad942d029fc0868b27c43d1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>ce2bd67c1807ceedac39625593cf312d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TrialWaveFunction * &gt;</type>
      <name>Psi1</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>b194852f462685a7659290e08c474933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; QMCHamiltonian * &gt;</type>
      <name>H1</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>cbdccd338ddcd2437a67366be695f6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>mcwalkerNodePtr</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>fed40c6720f12106a9e5f2dd94b285f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>c2c8457a47b8af1d9b57565f04c5d390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>classqmcplusplus_1_1QMCDriver.html</anchorfile>
      <anchor>7f64a375558e034eeb42a02453e1ab0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCOptimize</name>
    <filename>classqmcplusplus_1_1QMCOptimize.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>QMCOptimize</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>858b8c13588ba9855b9b08c207f52e37</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCOptimize</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>6a4c6fb54c850b793c07b327ef02935a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>9b70f07f646c6c18501a41534e1a24a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>9bbfa0039d5e6298262800f1486df121</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>bf2f53d0c00d5c74d77fab188b437366</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionNode</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>fbfd2bd0e72dc9502a708879f5b36867</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>QMCOptimize</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>cd5399dce719bea493ecb6df2c39c188</anchor>
      <arglist>(const QMCOptimize &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>QMCOptimize &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>02b280fcc4db6b96c61d554227f6ba01</anchor>
      <arglist>(const QMCOptimize &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>PartID</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>7bd751836a2c3d8a447e16346e27b836</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumParts</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>65b039fbc89022f22b0decd194802936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCCostFunction *</type>
      <name>optTarget</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>1af9ee87509187189c3325c94f8dbfa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>wfNode</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>779740950ba796f39f1751f832f86381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>optNode</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>656377959a74656fc9561b0d8fedf727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>optmethod</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>3ca2abefdd7f511b30c70469394e0f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>ConfigFile</name>
      <anchorfile>classqmcplusplus_1_1QMCOptimize.html</anchorfile>
      <anchor>b54f07f37f3cde6799aab39d9751c69f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCUpdateBase</name>
    <filename>classqmcplusplus_1_1QMCUpdateBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>8abf903b20266990aeb30622ab23e0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::iterator</type>
      <name>WalkerIter_t</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>7693fb6151296419b8b949d65f216835</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>BranchEngineType</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>eca9b2c50d3771cfffe1e7cb53797064</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCUpdateBase</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>7b8a41e9f0d8e437fef4f9b17cf92c50</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCUpdateBase</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>78efb022b29d56b8405f5c683226e26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>acceptRatio</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>015bc578819e6cc6b4190b4af8fbd8e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>bae5ca9b11eb43ffe2d86d12fb4ad7d1</anchor>
      <arglist>(BranchEngineType *brancher)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetEtrial</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>d7769f1725fd3ed9d1dee0a45abd4d71</anchor>
      <arglist>(RealType et)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBlock</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>6c96f2505de8aaab62ddd2782c854004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultiplicity</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>421e6cb3ca379622ef99bee722406a43</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkersForPbyP</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>da2ddf6719e82adbfb136c61e3664526</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>6a610931381efac60518c89707b03cb8</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>3bd90c110d157de75cfd6af836e18eba</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>benchMark</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>a33fce70d98242cc6a943f6823d25a63</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end, int ip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>f3330db888c9a1bc3f8c8907aa27bed3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>59b3372941eb58742c6de4376d9f9bc0</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)=0</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>MaxAge</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>d4d864155663f7856fd9ba67f8c4cc83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nAccept</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>7ee58595aba13842412d42a11bc43c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nReject</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>0276393e61335a1fb485290cfe24ac82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nAllRejected</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>7c2c913de04e32c5835e26626bdda3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>nNodeCrossing</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>d1bf876ef20049ec333738e21701eb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NonLocalMoveAccepted</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>8aab3fd6726d4ca601a6a4293687df71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QMCUpdateBase</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>0111689e9dd3684b148115878beb495c</anchor>
      <arglist>(const QMCUpdateBase &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>QMCUpdateBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>3c65a82650c2b6779f9b7f8c8f130399</anchor>
      <arglist>(const QMCUpdateBase &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>NumPtcl</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>32bba7b5e6e32bab597bf2bfeb1a8223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>71778af32821c2de1d662a1264abc985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_oneover2tau</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>b377ab809c9d4d1e2f0806c77fc05c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>m_sqrttau</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>e07e12402def6723dd65b2ff9a1b5fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>W</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>b7495cf48aa10bbcb7fe95448b6f4455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>b6ca05e68ad0367ed43c9d50c3c8588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>9023cb774b67a6b91e800246c4732852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RandomGenerator_t &amp;</type>
      <name>RandomGen</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>e5e1ade5a5628acab2273fb1ea07076e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BranchEngineType *</type>
      <name>branchEngine</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>0bcb5e329ce216a3ee09e23cd914a44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>0759bd2db80065c017862897fba22daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>7f845db37fe9095a7d012e8688935055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>906948859ab64f879749911bb2d1c843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>6a6ca74e00f6d3f29b36a69d31dc44cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>51c6191a0d5de4ad480f8a4bf068d930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1QMCUpdateBase.html</anchorfile>
      <anchor>6d5b0b8a18a8c049bce9752c19413684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ReptationMC</name>
    <filename>classqmcplusplus_1_1ReptationMC.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>ReptationMC</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>31ec6bd4db08ec4adad977b4e2843db9</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReptationMC</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>8c771b73f539528e7a8eeda07ed317d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>fed04a9ab74861b39e9a967d61528376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>d2e0b1235953a095f12bb82682d4d4b7</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>baa3e5f27a6bd1a82c06ded8fc65673b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveReptile</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>863291eab3531646d69710f8695fb618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initReptile</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>2dd05be156641d6c65f00c43e2b1a224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseBounce</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>0f78a547bc510001278236d9026201e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ClonePolymer</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>e6f42c11583a3a2cdde8567b6a571e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PolymerLength</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>07ff255c24f33cdf4c8b8543c61ecb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumCuts</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>b4785265413c298653c13a498bf3f47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumTurns</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>d4b862f2e15013c2f2b5130ed64342fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolymerChain *</type>
      <name>Reptile</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>efb6c8bb86d31bbdd495276d75cd27a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ReptationMC</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>c03ffbd764ee64b731744bbac2fa8d97</anchor>
      <arglist>(const ReptationMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReptationMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1ReptationMC.html</anchorfile>
      <anchor>8a5bd5199a9b6e6ec6ea62469e3a9469</anchor>
      <arglist>(const ReptationMC &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RQMCMultiple</name>
    <filename>classqmcplusplus_1_1RQMCMultiple.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>RQMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>fd372587949e3b9cfc652ca85dbf98cc</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RQMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>3806fe00c4bdab823a811873ba48e034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>e5c2f0c549853fb7fead14fe1960ac98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>1173815195ebdf8a75420f2c0d355060</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveReptile</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>277bc9c08086e0e6d672a3a034ce9732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initReptile</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>0c2e3a36e9253507c61359846420b29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReptileProperties</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>969a2fef27f0865c3bda4a4c749f6e56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkReptileProperties</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>6e8dae00f641f7d20f9ade5ef4202a05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeArrays</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>457bfcb9dbdd66f07c584ea4537a65db</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordBlock</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>d31845efd5f724d247ede779e565faa7</anchor>
      <arglist>(int block)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ReptileLength</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>17b41c9c1c2546f3329f8bb6f45e94a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RQMCEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>a927225a5b7a00a559d647f6cc39cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MinusDirection</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>f027170c4e9407db89071a858393d382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PlusDirection</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>4558a656f3b317167445d663d55bcc75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Directionless</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>11636d9fe312d754e4f1bbd13e27b6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>forward</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>a65b7310d49b7e050c2e44c9c35535c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>backward</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>e5f5f489c7067e5761b7ab7f05a73d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itail</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>6b872b2906b952f927aec5e39e441834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inext</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>6d9aaabcc2dceca1ab9ca9e529fdf853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumTurns</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>e35cef59c1437c9e8b6cdc6b26dcfcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>9dd31eee77df7e7cabad7594c7ee92d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>db8b84f6ca3e68207dab532ce0c76e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>177d803a946927e72950e90077a964bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bead *</type>
      <name>NewBead</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>5be40474fe441b53c5b96fa9035b384f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>NewGlobalAction</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>b660159c63e83e8fcd3b20f5f99fe589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>DeltaG</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>5cb3d86cabfa7cd4cc53ff018a0c0043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>NewGlobalSignWgt</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>5734e1cef5a338418bf6662ae20769c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>WeightSign</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>8db9955133bb3789ca9a909e6418bd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RQMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>774c197257d1b2e2bcdfa16ff59ddb19</anchor>
      <arglist>(const RQMCMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RQMCMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>6a97a213d9413ae48bbe702acb08fc21</anchor>
      <arglist>(const RQMCMultiple &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>gRand</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiple.html</anchorfile>
      <anchor>b06108e5ae2f1017b12c81e7168f6c3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::RQMCMultiWarp</name>
    <filename>classqmcplusplus_1_1RQMCMultiWarp.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>RQMCMultiWarp</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>ae0403fa5888eac691f8e98072e15d52</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RQMCMultiWarp</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>9b5e80ca66f9eda41ebfabe71d3531f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>3aecd3a431f2f1bd19733f4aeb1c5908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>52e4976563aae35ac45bfcaedb061453</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveReptile</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>7778852a7fa1565f9fbe387185944822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initReptile</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>890a1c1f989077cf1a4e5329ace9b7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReptileProperties</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>ed576e91bd1d5e8c8d0f5b2c5bb92e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkReptileProperties</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>0a7a3827250a54c02dc116e07d4a293e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeArrays</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>308a272318f82484b7a67b8d7b926156</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recordBlock</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>834c7681add3650096d6d648656f5d3b</anchor>
      <arglist>(int block)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSetPool &amp;</type>
      <name>PtclPool</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>7c86cbf83f4d58f877c2f259d4a6ab51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ReptileLength</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>65f9951694432834c936e15e9ca13c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MinusDirection</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>bf23aea0943880013c50619b32870874</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PlusDirection</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>17c786340d0a82c188fc3a4494d571ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Directionless</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>31e7e7e809e74b2e27701f5bd188a3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>forward</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>7568a2c7275ac1174b8bf3453b7b8c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>backward</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>87b13a0b7e200f4e028bcf78d013826f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itail</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>517bb9e8f66cba775b73f1aba7ed0de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inext</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>f79e4992ce222b8a2f21f05c126695b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumTurns</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>2ea0500315abc7b21386467f18f15e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>f1dfcd362dd2f50cb50a070541f583b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>bbd776c0f819d0c729ec289934e01bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LOGJACOB</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>23134ac3206d0081c1d04581b7040094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>refSetName</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>9d6272d86e4e7bf7f5fc9392ac2feef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; RealType &gt;</type>
      <name>Jacobian</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>2634bca2e0a7a7a06a1546e126ae767c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SpaceWarp</type>
      <name>PtclWarp</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>5d549d94cc6fc7620673a71cb606b4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>1430529cbbc20ab3b08ae333bf7d0252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bead *</type>
      <name>NewBead</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>1fbdd72573d9cd12c502aaf93abd63cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticlePos_t &gt;</type>
      <name>Warped_R</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>24498af63cefe9e464ea339d441818b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticlePos_t &gt;</type>
      <name>Warped_deltaR</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>c2b3fbf6b1e1650f25cebbe8f2aab58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>WW</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>4160de0c16df5043ed365922d351b332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>NewGlobalAction</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>a86519b5a2b353c0102460327689a29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>DeltaG</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>6b6d1bd9af975891dbc886fb0d8a5c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>NewGlobalSignWgt</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>eb8959b9ba44756e6a7505b89d538812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>WeightSign</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>7c49b69456e90e456d750494582aa19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>MCWalkerConfiguration::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>ec2a8d2ec4da42abd2f44a70ff287f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RQMCMultiWarp</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>1ec3faf6fdf8f33fa560acfc5b239e06</anchor>
      <arglist>(const RQMCMultiWarp &amp;a, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RQMCMultiWarp &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>d7e574027b64b5326eeed11b9fabbb21</anchor>
      <arglist>(const RQMCMultiWarp &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>gRand</name>
      <anchorfile>classqmcplusplus_1_1RQMCMultiWarp.html</anchorfile>
      <anchor>710527987f9d3cc474585733e0d2ef2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::SimpleFixedNodeBranch</name>
    <filename>classqmcplusplus_1_1SimpleFixedNodeBranch.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>SimpleFixedNodeBranch</type>
      <name>ThisType</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>920dc8f99a3bb4c760531a77c37b483c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFixedNodeBranch</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>ac5813cdb6c98dd60e82a78fff4ac8b4</anchor>
      <arglist>(RealType tau, int nideal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleFixedNodeBranch</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>f7194a0af3e8af8dcf1c6f67a30ac5f2</anchor>
      <arglist>(const SimpleFixedNodeBranch &amp;abranch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>phaseChanged</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>93f0db9fc3a96be1355f6ed12d7b774a</anchor>
      <arglist>(RealType psi0, RealType psi1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceQMCCounter</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>4fe0213252b21ebd450902d00646d30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEstimatorManager</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>91316d89992093ca5ed501d83e7c205e</anchor>
      <arglist>(ScalarEstimatorManager *est)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWalkerController</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>489e0285ade6e4701dc1b646c304d240</anchor>
      <arglist>(RealType tau, bool fixW=false)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>branchGF</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>06d3f039fa16d9b2c36c033c8984bdcf</anchor>
      <arglist>(RealType tau, RealType emixed, RealType reject) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEguess</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>4f4c6a0cdd2d8bc0175239f76b124dfe</anchor>
      <arglist>(RealType eg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrialEnergy</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>1e601ad73e824648a8c0b4feba82e83e</anchor>
      <arglist>(RealType etot, RealType wtot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>branch</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>323e8300497a16c9e37dada8b60aa2bf</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>branch</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>661287bb05a7aeec818aa48b8e769312</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;w, vector&lt; ThisType * &gt; &amp;clones)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>25e6cf58e71695239f89880553cacf89</anchor>
      <arglist>(int counter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>695157a0a23b6c7476de0cad6dea7856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>b2f690702ec19b5afa22a19ba1ab962b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>483125da6c22c1a05fe38bae907c3d71</anchor>
      <arglist>(hid_t grp, bool append=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>3897782e3be443be4ab372191d31e860</anchor>
      <arglist>(hid_t grp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>6ab72787745fad9582758aeeb3f867a0</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerParameters</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>02dd68ccbfc1fddf2709d76617efe1a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>2ce2b5173024e1924b23c7289a2c9c01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FixedNumWalkers</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>4e42309f72a3fa76df8e063ff436c432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>QMCCounter</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>6d43da8f70ebe777050ce3105de936bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SwapMode</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>e6724eaf78346a581c48d01287109469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>38a15643da6cb45c77bfd2207e101d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nideal</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>129f1b80d7a118d2f23099d88471d3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nmax</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>271a895c9bc2a74e6db871a21a01b192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nmin</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>5976fdb407f56376276473de476b0031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MaxCopy</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>ae7be20ebbbc668e51bd196430c059ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGeneration</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>e7b909ec130868eb6bab6036ea5bfd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ETrialIndex</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>2cfd7826439245e027c13fe8774767b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>83c79b1dd521d85f5da7215e6880b881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Feed</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>e8af3ca5d06d30bfb1b4c53bb1973246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>E_T</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>d43e7f7b866242db2d9a8052489ed354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>logN</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>5ad3eb9a368ca929dbbea5d340cdf334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>EavgSum</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>9cc7f5cfef413a97b57a50c7f81bb10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>WgtSum</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>85b826ad8d4e65131e81c6933a08245c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>PopControl</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>530813bcb93c3c544c08b2c3fe288f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>LogJacobRef</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>a5fce64fc1881b6d9e5343cef94078ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>TargetEnergyBound</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>5cf6f620595f991b81faf8df1b7d373a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>LogNorm</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>843dd0070d21a49e3f6f5523b90a8a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WalkerControlBase *</type>
      <name>WalkerController</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>18d01f8590ad006b085e964e0141049c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ScalarEstimatorManager *</type>
      <name>MyEstimator</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>3b0d474708a9ae46086e7198527fbde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>SwapWalkers</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>778cc62f8a9801bf236b73023ea589e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>0f7f72626ddae641185654a5fe8b2acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SimpleFixedNodeBranch</name>
      <anchorfile>classqmcplusplus_1_1SimpleFixedNodeBranch.html</anchorfile>
      <anchor>06e59a73e0f10349e67bf01c6501a3a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SinglePtclWarp</name>
    <filename>structqmcplusplus_1_1SinglePtclWarp.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>SinglePtclWarp</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>5762e9b9f2e4becfb381d5945c6acce1</anchor>
      <arglist>(int nCenter, int nPsi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>warpFunction</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>3aee4b0de649c3f25241a7c8cc606dc0</anchor>
      <arglist>(RealType r, RealType rinv)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>warpLogGrad</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>6de8640d86255fc8819b80aee036c598</anchor>
      <arglist>(RealType r, RealType rinv)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>warpLogGrad2</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>1d2e908dc5a7c911dfa85e8322dd8744</anchor>
      <arglist>(RealType r, RealType rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_warp_disp</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>4c05d37a7b479f639e9b15d298187874</anchor>
      <arglist>(const vector&lt; RealType &gt; &amp;R, const vector&lt; RealType &gt; &amp;Rinv, const vector&lt; PosType &gt; &amp;dR)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_displacement</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>c2ccc5cd28d0aebfb3bc2b26c2b6953d</anchor>
      <arglist>(int ipsi, const vector&lt; PosType &gt; &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_warp_jacob</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>ca7e09dc32be0c3c821885f00d3004f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>get_Jacobian</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>1a37269016d00696a372f6771b915ecf</anchor>
      <arglist>(int ipsi, const vector&lt; PosType &gt; &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_warp_grad</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>4618f5efc620cb38e63bd9d053b9a30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_grad_ln_Jacob</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>7c5ef8a3359cdc2b40f81a2303291545</anchor>
      <arglist>(int ipsi, const vector&lt; PosType &gt; &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>TensorType</type>
      <name>getCof</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>45d8cbe16f9736feaa95708b0f5344c5</anchor>
      <arglist>(TensorType a)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ncenter</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>68eece4604e25218587937ce58bca483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PosType</type>
      <name>nusum</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>f0806a87b86198042cbd46ce33c26d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>r</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>3ff337bbdbe4b32a441811de44a2fea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>rinv</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>285c3a6953ea9926a8d3641a7e45ef62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>omega</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>cd5b8f8f5ccd3525a1d989500abf508b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>g</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>2b6f52555ce48f8d8f26b6924043e6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>dr</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>2ac1919a2ae3d2884d42320660e8ab37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>d_omega</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>48ac561cdc26cc3316f558946a63f133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>nu</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>b7fb53f6be87199b5ccbbba0586cef40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TensorType &gt;</type>
      <name>d2omega</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>c9aaa620016bf6f8e298b3231a5ab200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Jacobian</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>d5b797749d11062e40dcceacc75ea4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>Deltax</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>b335919c95c178e103b38fb77b9bfc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TensorType &gt;</type>
      <name>Jacob_matrix</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>00fcfda599f0417777eda6d6f1ac46fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; TensorType &gt;</type>
      <name>Jacob_cofactor</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>21366430264de3646714f93aedb158e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TensorType</type>
      <name>unitMatrix</name>
      <anchorfile>structqmcplusplus_1_1SinglePtclWarp.html</anchorfile>
      <anchor>6beac6ae12cfae2f8aee5e2a74f0497f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::SpaceWarp</name>
    <filename>structqmcplusplus_1_1SpaceWarp.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type>void</type>
      <name>resize_one_ptcl_Jacob</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>adee7b01803ff9548eb6232a8d567b6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_one_ptcl_Jacob</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>ce743e8566947e45d36049e6199b5fe8</anchor>
      <arglist>(int iel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>319da444000beb72354435f7a4467285</anchor>
      <arglist>(vector&lt; ParticleSet * &gt; &amp;IonSets, DistanceTableData *dtprime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warp_one</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>be7623938aa6af81d979da31e2c30aa0</anchor>
      <arglist>(int iel, bool require_register)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_displacement</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>baba55b682c5ed2246016d877c36f28a</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>get_Jacobian</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>0ebe064a42fbbe4eb8e9f86437756f01</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>TensorType</type>
      <name>get_Jacob_matrix</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>e04e76fb9a06770d408cfa7abf2c0fc4</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>TensorType</type>
      <name>get_Jacob_cofactor</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>8db869f5cbbb7c8d3892eecf9f083e07</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_grad_ln_Jacob</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>f810030758edbfa899fb7d3ac57affbe</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>get_grad_ln_Jacob_num</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>ce0ba97281670aaa5e249c749ed73ef6</anchor>
      <arglist>(int iptcl, int ipsi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>6f3203d1a09fb5858d71e8899536c174</anchor>
      <arglist>(vector&lt; ParticleSet * &gt; &amp;plist, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>bf7e982aa9164777ddcec2eadd537b39</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>e7175e25a5d688f54be8776bd29f082d</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>c1cd14d56943995df61e607fcee91b04</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>dtPrimary</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>23a039e4d00fb952ccba1558e434d3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>80c544b45e484b137465def25e3b27c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ncenter</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>3a3bbd5d729a030547be3884db77206e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>npsi</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>cf2a4e4a74296cf1937d9068d8cbdee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SizeOfR</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>3ab1b54d0a6afd60c1f55d577ebb4af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>r</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>fab13855b7b11ecdf1dca829dd2ec253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>rinv</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>70926d25f732fe9139d2e016d4120a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>dr</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>27fb629ec82bf71f322bc42007693b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; PosType &gt; &gt;</type>
      <name>Delta</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>45287ca52f1480ec8a0b7416a307e99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>PtclRefs</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>1d5905f8fde6d798730dc72eca8f22b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SinglePtclWarp * &gt;</type>
      <name>WarpVector</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>71695ff9a1ba3833d67793b2f2c1df61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>one_ptcl_Jacob</name>
      <anchorfile>structqmcplusplus_1_1SpaceWarp.html</anchorfile>
      <anchor>3126c5c85141c02394b53e6043c702a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMC</name>
    <filename>classqmcplusplus_1_1VMC.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMC</name>
      <anchorfile>classqmcplusplus_1_1VMC.html</anchorfile>
      <anchor>df887e40ae666488e7165d32842ab329</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMC.html</anchorfile>
      <anchor>2d3c73385264f1cda8bfaffeb0a5fff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMC.html</anchorfile>
      <anchor>7d82e52c48673016eec99137f50eb4cd</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMC</name>
      <anchorfile>classqmcplusplus_1_1VMC.html</anchorfile>
      <anchor>8af04268f35002cc3aa1815cf7bac071</anchor>
      <arglist>(const VMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMC.html</anchorfile>
      <anchor>fdcaad4468578da5329a4dcdc66f9cb3</anchor>
      <arglist>(const VMC &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classqmcplusplus_1_1VMC.html</anchorfile>
      <anchor>8267091ef065db82fa5f9b2610c0d0d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::VMCFactory</name>
    <filename>structqmcplusplus_1_1VMCFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>VMCFactory</name>
      <anchorfile>structqmcplusplus_1_1VMCFactory.html</anchorfile>
      <anchor>591d38ebdcdfe5e18616acd6b40bd38b</anchor>
      <arglist>(int vmode, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>QMCDriver *</type>
      <name>create</name>
      <anchorfile>structqmcplusplus_1_1VMCFactory.html</anchorfile>
      <anchor>bb366bd6f822ade9d26271a5596f42e8</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclpool, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>VMCMode</name>
      <anchorfile>structqmcplusplus_1_1VMCFactory.html</anchorfile>
      <anchor>f89c68911cf1c4ed6cf94ee3797421ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>structqmcplusplus_1_1VMCFactory.html</anchorfile>
      <anchor>c425e283e6000562d1b371db191cd395</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCMoveAll</name>
    <filename>classqmcplusplus_1_1VMCMoveAll.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCMoveAll</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>07eda2d0d65870158372b723c307f58e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, xmlNodePtr q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>a2ecb7d9e0ae5edfd6c03f09009d6cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>5a27536c5cb0db1e43b71a7957f04e4a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCMoveAll</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>fe7d1bed34d25a83d72847289f361b0d</anchor>
      <arglist>(const VMCMoveAll &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCMoveAll &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>eae61196b649905560d3547c74669ae2</anchor>
      <arglist>(const VMCMoveAll &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>advanceAllWalkers</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>f83944217f27552cc8dde37e206a1c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>943ff09a919ac531cc9869c5d35410cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>classqmcplusplus_1_1VMCMoveAll.html</anchorfile>
      <anchor>93d8ab467b9f2c2f5daca540583f3795</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCMultiple</name>
    <filename>classqmcplusplus_1_1VMCMultiple.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>34d33d2e3cd544bbcce6c22b8378b7b5</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>64f229a903099ae77c000599f07f6dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>1e6cb3ca4ebc3241df753c2253a9f42f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>c12f0ea70503bd67d792a513857e176c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>8a74f670ee335569cb1d2884ccdb9f8b</anchor>
      <arglist>(const VMCMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>ab93f1b2f9d7a34393b302c48c0e561b</anchor>
      <arglist>(const VMCMultiple &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>2cf485efd12eca33ee57adc80bf9b6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>86199ffdf642eb314b0783b9d41dc92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>8bce8a1903c0071f275d8f82a76b0e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>3bbcd04cf1a34512be722e090f182205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>27669f52ea2d8ae510e0a4ba7009d424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>66ae9ae092d1dfef96405e822d0cfce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>Norm</name>
      <anchorfile>classqmcplusplus_1_1VMCMultiple.html</anchorfile>
      <anchor>b9929724fb40e2a41441f5395e854fe9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCMultipleWarp</name>
    <filename>classqmcplusplus_1_1VMCMultipleWarp.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCMultipleWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>d46c6ec0dd37c85acd451497a4797089</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>ceed94dbdb7574231095c6b1ba0887ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>24d773cced2b91e18c1fffbd3ad70102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>51a9ae04faa22f8c6a323989a8b76946</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCMultipleWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>26de799b666babc498496041f87112b7</anchor>
      <arglist>(const VMCMultipleWarp &amp;a, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCMultipleWarp &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>2b9bfcb47fa8ad86c35116cf43c3d166</anchor>
      <arglist>(const VMCMultipleWarp &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool &amp;</type>
      <name>PtclPool</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>f6e2613fed2e5fcb975dcf44df1b2192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>8c0a896ed3c76caa09a58d5ed5fc537b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>refSetName</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>6acd91001359636834541bddc5c5138e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpaceWarp</type>
      <name>PtclWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>c5b18bc249119c9bc1a206de9daf88dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>b5759e07a6b0a38bbcdcac5ce0b64336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>e0d4747a6881b3df7369e1bf63456d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>6afb8741d31f314deca66eefc71990b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>JACOBIAN</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>9ad0708e59adbb80c99d2ee4852790ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>81301e5b17358bc74371a467dad007f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>a6b9394736be9361bde43acb326f8584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>72a1e0a7ef07ef748c4ef74a412f7e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>Jacobian</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>bf1fc2891065465357caedf0a7b7e69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>Norm</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>e82a35e174fe1094bec642921e01e170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>WW</name>
      <anchorfile>classqmcplusplus_1_1VMCMultipleWarp.html</anchorfile>
      <anchor>9b9b74494514914bfdaf4f6565954be5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCParticleByParticle</name>
    <filename>classqmcplusplus_1_1VMCParticleByParticle.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCParticleByParticle</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>0149ef7fe7807d0baa333775d9ced60e</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>448142289913bf57b9ec97d61603d827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>9b3da744cc4942e5ff836c9e32bff7ea</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runBlockWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>dbbe29d6ef238d397ec9636c0d396ef1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runBlockWithoutDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>02f44b0d1ebb457af36a7ea1ff926a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCParticleByParticle</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>33da8c01e9f226a982a9d09ebb397f0c</anchor>
      <arglist>(const VMCParticleByParticle &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCParticleByParticle &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>0a28bfa73698f6809dd0da64f08b617d</anchor>
      <arglist>(const VMCParticleByParticle &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nAcceptTot</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>2ea1a3646f4438f910a129c9a2ea72ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nRejectTot</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>e443d6ab87565dcaa8d9227602a364cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nAllRejected</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>ee8a6c5b4fd45841a502420a9c46a14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>nSubSteps</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>ec23a67175202acdd7dcf6cc3c2915a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>92541d132ebbdeef4cd0a61df5960f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>cc6c1aee5f24ce80f1ccf5e0f6c22109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>c5a1c1d18271356d188f06f9e6563c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>cd8f39f4436d04bd94629f5719ea0a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>6fe38007f5ec2d2f204b48105f44763d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiple</name>
    <filename>classqmcplusplus_1_1VMCPbyPMultiple.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCPbyPMultiple</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>5ebc8267284b4351e821ed4eb397e9d2</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCPbyPMultiple</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>385e082b42b087cbe3e7c7a0f2f68073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>1a33d9b9c1efeac5c8ada7d0c09aa171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>8f324cd1f53d380d898597b2c67cb919</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>47fc14766fa422086ecadd828166c633</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>5c03a0a54e984e806eddcfe511b8cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>5c5972e00e489978e410842c2e96f973</anchor>
      <arglist>(int ncopy, int nptcls)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCPbyPMultiple</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>d57782bbc4289808e3dfe3cc1ce74ccb</anchor>
      <arglist>(const VMCPbyPMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCPbyPMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>f7420e5a05203314abc83a4be5a285a1</anchor>
      <arglist>(const VMCPbyPMultiple &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>2cb93112b88aca621859d003b165708e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>de876fb79f2d02ed74e3e3b07333cf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>useDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>194457b2793585746c36ec3c6aa14c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>useDriftOpt</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>6af1d129ab9163420139bf091ac77041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>d6aa2999a7079e1c98930ccce99a4c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleGradient_t * &gt;</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>05a30ea28160bd731e607e3a623f6668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleLaplacian_t * &gt;</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>db5a6f6ac355352295382bdf3b0f058e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>152ca92aac83a7760c0aaaf748c4be2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratioij</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>60622a4f5a8905da09598097d99bf2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi2</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>9125d9acb8c8a4f816c52ea21cb1c51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>e94d8eb5a1fcf92433d70b27f5b231d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>b4294c3e70260d0a091a844df945b3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>c16251419b573a4289d76d5bbf2875c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>50928fc5958db25d02765bf6e4c952ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCPbyPMultiWarp</name>
    <filename>classqmcplusplus_1_1VMCPbyPMultiWarp.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCPbyPMultiWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>7c84a4d855e644d1b171363ceb190492</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCPbyPMultiWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>3aeca86e5b4cf8f96c1a9bcf9ae92d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>a0f770b2617f44850438d96cfa251cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>b7675da0669ab032c0f5895bca49685c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>12367047eba11be15f3dc37eedbe4e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>fed1cd36d1f066c6e597d8287a2f6469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCPbyPMultiWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>ebcfb02b0a6dac747a19de8411a5a22e</anchor>
      <arglist>(const VMCPbyPMultiWarp &amp;a, ParticleSetPool &amp;ptclPool)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCPbyPMultiWarp &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>e1847e5c626682e86f2d26d95c7f19a2</anchor>
      <arglist>(const VMCPbyPMultiWarp &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>ce6f6e1b53405fcb08c63d151653bca7</anchor>
      <arglist>(int ncopy, int nptcls)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool &amp;</type>
      <name>PtclPool</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>f15d835409636de1144cd9233354ccde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>c9ef915c5cab220168538555af89a7f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>d41e9cb162baf7703c859062995e8e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>JACOBIAN</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>f8e3f7603f42f452446b9b98cc0e8401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>equilBlocks</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>b6e2da1790b78cd82d418d725288ed62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>ca9a0748aacaf4616c4e1825108d82be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleGradient_t * &gt;</type>
      <name>G</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>f8b845febe33a400eda36500066ba083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleLaplacian_t * &gt;</type>
      <name>dL</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>20d445b585a919cabe584238dbc39495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratio</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>311b69c38fd25caf42b1bf323bf656a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratioij</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>5add6a9c60884e85467508e14a72f714</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi2</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>5cf1611e2ebad124015eff1736a3cc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>19500a2abac506ef29d2d6f5bc0e1664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>0f5f5a9e47d395f237a2e6d0d14a867a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>5230ad147264dac23b0e03820cbd2e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleSet * &gt;</type>
      <name>WW</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>30281098b78190d19514c7e0cb4624db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>a9b2750ec68c60ac3f325d069377853f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>refSetName</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>855b6e72c25f955c3d284feb5feeef30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpaceWarp</type>
      <name>PtclWarp</name>
      <anchorfile>classqmcplusplus_1_1VMCPbyPMultiWarp.html</anchorfile>
      <anchor>ef89693f0307213348abdc3c2b31b1bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCSingle</name>
    <filename>classqmcplusplus_1_1VMCSingle.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCSingle</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>e5caecb1ed392d646e7f7ec26dce5475</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>b224afaa0fc57bff84df1626e2225995</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>10c199c96aa9dd551694cba741edbf50</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCSingle</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>3af04f38c6c093bef702d332ec6e6134</anchor>
      <arglist>(const VMCSingle &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCSingle &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>f0afc331c090a3ea7965ca3b715f3f8e</anchor>
      <arglist>(const VMCSingle &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCUpdateBase *</type>
      <name>Mover</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>7103f3ba7121c665f38d3cad41877b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCSingle.html</anchorfile>
      <anchor>dc5cb8c16713c1491972e427beb8c7c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCSingleOMP</name>
    <filename>classqmcplusplus_1_1VMCSingleOMP.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <base>qmcplusplus::CloneManager</base>
    <member kind="function">
      <type></type>
      <name>VMCSingleOMP</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>bbf85ebae90b2283beb1d38fbb6754fb</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, HamiltonianPool &amp;hpool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>1dec6e5bcb68957e20d7a16d2dc63681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>022b71de9f82ff63ab3437eb3f0fb9ab</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetRun</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>020f09526fb8e36bd92d6d79b14b2542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCSingleOMP</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>5999654368d03ca5d684d92dab5fd3cc</anchor>
      <arglist>(const VMCSingleOMP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCSingleOMP &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>1b20565fd8c94652c116e7b7a6a64ce7</anchor>
      <arglist>(const VMCSingleOMP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>UseDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCSingleOMP.html</anchorfile>
      <anchor>6089789e12b409e92da727c623838c90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateAll</name>
    <filename>classqmcplusplus_1_1VMCUpdateAll.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdateAll</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>d611f0dbc27399a730a71e7b9a17c34b</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdateAll</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>a83180d08d53f343e89316f4fda9080a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>169ff530b14437b46a32a3824d884412</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>7ec256117e20b4b18fdb22ef55837361</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCUpdateAll</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>d8fef23c788f8e843b7346377467a7f6</anchor>
      <arglist>(const VMCUpdateAll &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCUpdateAll &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>239c0740899ce029c40f6ef8f4209542</anchor>
      <arglist>(const VMCUpdateAll &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nSubSteps</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAll.html</anchorfile>
      <anchor>7b8c3fbf3d2e671da280a76e1575cc5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdateAllWithDrift</name>
    <filename>classqmcplusplus_1_1VMCUpdateAllWithDrift.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdateAllWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAllWithDrift.html</anchorfile>
      <anchor>5b3563780af30880456518da422fe21c</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdateAllWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAllWithDrift.html</anchorfile>
      <anchor>ddede28273bfb4b6c46a7a5f05d0d114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAllWithDrift.html</anchorfile>
      <anchor>fb1c3f651c3bd6393056ecda2bbed173</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCUpdateAllWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAllWithDrift.html</anchorfile>
      <anchor>cf7813887bcb1dab2d990b0e63b76266</anchor>
      <arglist>(const VMCUpdateAllWithDrift &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCUpdateAllWithDrift &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdateAllWithDrift.html</anchorfile>
      <anchor>d423fa3ae14646ccb789ca68241f93fc</anchor>
      <arglist>(const VMCUpdateAllWithDrift &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyP</name>
    <filename>classqmcplusplus_1_1VMCUpdatePbyP.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdatePbyP</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>dbb101a0653aa172e4d9f04e9828442c</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdatePbyP</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>a05a93374ab6d9fc0a75cd47f1d6021a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>1b0aba046384b2b5bcc4ab79777b1f20</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>9c1d39bb73d197f7f12b7d090ba6e55c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCUpdatePbyP</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>18a739bfa04f5971e21309bb0a83161d</anchor>
      <arglist>(const VMCUpdatePbyP &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCUpdatePbyP &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>7e005cd9770b709c79fdb57c66262c1f</anchor>
      <arglist>(const VMCUpdatePbyP &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nSubSteps</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyP.html</anchorfile>
      <anchor>544fb8bc7129d46e061a3826edb62412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::VMCUpdatePbyPWithDrift</name>
    <filename>classqmcplusplus_1_1VMCUpdatePbyPWithDrift.html</filename>
    <base>qmcplusplus::QMCUpdateBase</base>
    <member kind="function">
      <type></type>
      <name>VMCUpdatePbyPWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyPWithDrift.html</anchorfile>
      <anchor>959ad1b5c5a767b29940eb2b72af71bf</anchor>
      <arglist>(ParticleSet &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, RandomGenerator_t &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCUpdatePbyPWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyPWithDrift.html</anchorfile>
      <anchor>7f0d786369fdd3d9737da61fa2adc02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkers</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyPWithDrift.html</anchorfile>
      <anchor>543e421cd20408a3ac9fb93a0ba7b4ff</anchor>
      <arglist>(WalkerIter_t it, WalkerIter_t it_end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCUpdatePbyPWithDrift</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyPWithDrift.html</anchorfile>
      <anchor>aecfdd217cc2e00966da417d31263d4b</anchor>
      <arglist>(const VMCUpdatePbyPWithDrift &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCUpdatePbyPWithDrift &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1VMCUpdatePbyPWithDrift.html</anchorfile>
      <anchor>992ff5ca1a120e9bb7dadac6f6676e87</anchor>
      <arglist>(const VMCUpdatePbyPWithDrift &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::WalkerControlBase</name>
    <filename>structqmcplusplus_1_1WalkerControlBase.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>fe7aed0b08994d7f91eb99e61256a5b93e2c58f47e169e0105333c5c3f370440</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>fe7aed0b08994d7f91eb99e61256a5b97fa20d43bb9c8501a1bc1b34cd15ef43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WALKERSIZE_INDEX</name>
      <anchor>fe7aed0b08994d7f91eb99e61256a5b98da16668957443a498c8f39e1af05ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEIGHT_INDEX</name>
      <anchor>fe7aed0b08994d7f91eb99e61256a5b92bcc0f898c0f0c747d894240b76c8cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EREF_INDEX</name>
      <anchor>fe7aed0b08994d7f91eb99e61256a5b9b4bedd5a16a8bf254db6b428d13ab6ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MAX</name>
      <anchor>fe7aed0b08994d7f91eb99e61256a5b99187f3de3daa336469178076291eb705</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>9000d5ffdc83494e1560e86c74d72e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WalkerControlBase</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>cf75c546ee6171c077c9e06b8840ddce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getValue</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>e9ffecb87f29bf68bf4ae52a376164e3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getCurrentValue</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>4631b9d3e585fef2246a548bffebfef8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyAndVariance</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>f58d700a374f69e2eb9ee71730b8b8f9</anchor>
      <arglist>(RealType e, RealType v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyBound</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>73b8092d9145794593679bc631200d9e</anchor>
      <arglist>(RealType de)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>1f1862f2c66bbc73781427d88ae860bf</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>copyWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>dae09008ab8067656ca75554564e4ced</anchor>
      <arglist>(MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WalkerControlBase</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>4f2530ac7a8b071928d2e17a3b595be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>fe4790389152d728c4139a68dc4c0781</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>branch</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>11877fba1e56a3c9eedb75c26826545d</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;W, RealType trigger)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealType</type>
      <name>getFeedBackParameter</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>9360fb0b3925218d006148352fb43099</anchor>
      <arglist>(int ngen, RealType tau)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>SwapMode</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>ca0301804f67c5231478720077324909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>Nmin</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>1f5fbba040b6f97d35c6db4a179142ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>Nmax</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>4babc66a168411d2171a7d0e83c7a98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>MaxCopy</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>477598e840c75580755523e3d5b01963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>NumWalkers</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>4563a6df16adb6f55d1cfd9a564bec6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>DummyIndex</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>b499315aea29f1ea12d45516ebd535d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetAvg</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>4c6007de712cc49035a5972e0873ef6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetVar</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>53bbb38848883ed8850f5d836ec1f271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>targetEnergyBound</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>ce3d078b6e8f63a80f9018dc2b9e5860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>curVar</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>d79d86592ac82848bc41ae612dc2fd63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>accumData</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>47cdf09141fa33e91010907b964586ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>curData</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>3e07eb23531d5035071da6b0811a8c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Walker_t * &gt;</type>
      <name>good_w</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>917a79a967399d572d49fa43e054c283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>ncopy_w</name>
      <anchorfile>structqmcplusplus_1_1WalkerControlBase.html</anchorfile>
      <anchor>7e57dec2f901912552bdfdb75e48b2ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::WaveFunctionTester</name>
    <filename>classqmcplusplus_1_1WaveFunctionTester.html</filename>
    <base>qmcplusplus::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>WaveFunctionTester</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>b19434c7d4bb467a09b377aa8868f4d4</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>c1d3dfa52a851908283fe24179e0dbaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>69ec397a8dac4b1822144d24389efff1</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WaveFunctionTester</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>d0cbeb2525e8e4628aefd341caaeeff9</anchor>
      <arglist>(const WaveFunctionTester &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WaveFunctionTester &amp;</type>
      <name>operator=</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>7171f8b124167fb7cb4adb486572e9b0</anchor>
      <arglist>(const WaveFunctionTester &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runRatioTest</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>5f60118a8be5df69055904a17792fc84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>runBasicTest</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>19f12866ce1b6ff98876d29cd0a07dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>checkRatio</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionTester.html</anchorfile>
      <anchor>8964804eb4759219b63a72926c093611</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::HamiltonianPool</name>
    <filename>classqmcplusplus_1_1HamiltonianPool.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, HamiltonianFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>34dfa671fde3eae0767e9ad4874a1e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianPool</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>b8e065b44f0be84f2682275eaf04b2d7</anchor>
      <arglist>(const char *aname=&quot;hamiltonian&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>6d6c1369b399bf86da23620e44ce4240</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>02241bbe04bd02eee2929dae108a7ecc</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>ffdeb40e82bd3262be5d29d49b38f11d</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>57416d568543b92ca5c8b70f6c609d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>1677d604485e5fe4fbdf366c812b6aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>getPrimary</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>aeb8cefb3436824f5b656335bb91acff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>getHamiltonian</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>eb72bc1be4dc84e4d5acbff474ac59c3</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDocument</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>9630f9d220eea0ad77d60c0d2c9e35cb</anchor>
      <arglist>(Libxml2Document *doc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetPool</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>cddbe4a5163fe4c3d1ab42f329584953</anchor>
      <arglist>(ParticleSetPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionPool</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>b51544543a6167fe9b05a3e155066945</anchor>
      <arglist>(WaveFunctionPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clone</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>0a4693b7a346030cdefc8c8dd35bf4d2</anchor>
      <arglist>(const ParticleSet &amp;qp, const TrialWaveFunction &amp;psi, const QMCHamiltonian &amp;h, vector&lt; ParticleSet * &gt; &amp;plist, vector&lt; TrialWaveFunction * &gt; &amp;olist, vector&lt; QMCHamiltonian * &gt; &amp;hlist)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian *</type>
      <name>primaryH</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>c795dc56172568a26c15abaceafcd5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian *</type>
      <name>curH</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>694a187dd9431f0792f2d549fb565334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>476b7d23a0d9fd2c61fa91dc57004b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WaveFunctionPool *</type>
      <name>psiPool</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>80f618d1fc082014a1866898205c7055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Libxml2Document *</type>
      <name>curDoc</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>8de02f98a5a9e39f02c2d8eccdff0bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PoolType</type>
      <name>myPool</name>
      <anchorfile>classqmcplusplus_1_1HamiltonianPool.html</anchorfile>
      <anchor>8e84f2c23e27f2d55b2992b78e5be566</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::LoneElectron</name>
    <filename>structqmcplusplus_1_1LoneElectron.html</filename>
    <member kind="function">
      <type></type>
      <name>LoneElectron</name>
      <anchorfile>structqmcplusplus_1_1LoneElectron.html</anchorfile>
      <anchor>4f4bc851c190a7eb0bf8cd0594174373</anchor>
      <arglist>(int id, double bl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structqmcplusplus_1_1LoneElectron.html</anchorfile>
      <anchor>38fe989c78bf715614bcd4ab5c42eb24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>BondLength</name>
      <anchorfile>structqmcplusplus_1_1LoneElectron.html</anchorfile>
      <anchor>62a86259ab6590d3bd547fef81fc5d15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::InitMolecularSystem</name>
    <filename>classqmcplusplus_1_1InitMolecularSystem.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>InitMolecularSystem</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>c3488dba1f53a5ab7b37284ea897cc96</anchor>
      <arglist>(ParticleSetPool *pset, const char *aname=&quot;mosystem&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>14586996c80e1eacd3df591ebeca8bcb</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>fe20bae89b1f09eca1427f9c7c737527</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>7fc5fc16cb1e7467c64ffcb83ea2e9d6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>5ec763b739ff05a3a0c8a1025cad41e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAtom</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>c63e96bb884b51b6fa99def2d8c8b344</anchor>
      <arglist>(ParticleSet *els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initMolecule</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>62eaef362c72f389a8e2928258b9e0c0</anchor>
      <arglist>(ParticleSet *ions, ParticleSet *els)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1InitMolecularSystem.html</anchorfile>
      <anchor>abe0fe33e3d1db5c78eea06574800572</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::BasisGroupType</name>
    <filename>structqmcplusplus_1_1BasisGroupType.html</filename>
    <member kind="function">
      <type></type>
      <name>BasisGroupType</name>
      <anchorfile>structqmcplusplus_1_1BasisGroupType.html</anchorfile>
      <anchor>7fb4a32d2bca602c4bcf15824a36e686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisGroupType</name>
      <anchorfile>structqmcplusplus_1_1BasisGroupType.html</anchorfile>
      <anchor>1fe73cc9582901259e981e7a8dcc20fc</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structqmcplusplus_1_1BasisGroupType.html</anchorfile>
      <anchor>52b3b81efc032eab2173d4f26cd594cb</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Excluded</name>
      <anchorfile>structqmcplusplus_1_1BasisGroupType.html</anchorfile>
      <anchor>c4aae1de83490ed394e17473edae3bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structqmcplusplus_1_1BasisGroupType.html</anchorfile>
      <anchor>5b6d7f0c8ab355ab7530ae4aa0eac94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>curPtr</name>
      <anchorfile>structqmcplusplus_1_1BasisGroupType.html</anchorfile>
      <anchor>779abf6cccb857445e34bb5cc3a0d758</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::MO2Grid3D</name>
    <filename>classqmcplusplus_1_1MO2Grid3D.html</filename>
    <base>qmcplusplus::QMCAppBase</base>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>0686ee9e9706c0031f96b98a43588ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>4a24d4252a1d6d27dd06e6b72505f436</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::PosType</type>
      <name>PosType</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>b78bd1192409afb77e80d337b63912d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MO2Grid3D</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>08a18ee0ce648cec6159e6aab22b2ce4</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MO2Grid3D</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>5d0fb285cfe6d1502e0749f2994c75ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>b6067f380a73d667ace7c8ed225db4c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>f82d5125456b1726bae7f82978d61784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>generateNumericalOrbitals</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>a4c8e5386f76f77b21ecfa5be74a707b</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOrbitalSet</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>1d36d2a54ca9876b50109f04805445d1</anchor>
      <arglist>(map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>selectCore</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>4cf7a4ffe3d78cdf450ab59674e3e2ff</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getEigVectors</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>3b8cf669edc60badbb80f33a8521204e</anchor>
      <arglist>(xmlNodePtr cur, const Matrix&lt; RealType &gt; &amp;A)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>xmlNodePtr</type>
      <name>copyDeterminant</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>eb2fb4531a7b9f81b49991a534ee4477</anchor>
      <arglist>(xmlNodePtr cur, bool addg)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>xmlNodePtr</type>
      <name>copyDeterminantSet</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>91d0f148272d130c673a067dfc569ec2</anchor>
      <arglist>(xmlNodePtr cur, xmlNodePtr splinePtr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>InFileRoot</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>5714332f9cdfd57c310aba1f579f15d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>ec9582bb66c642e231eb9fad7c476fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration *</type>
      <name>Electrons</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>a91187dd32b625af87bdb6b1ab5128a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet *</type>
      <name>Ions</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>08f89cb42bc4a888d442c05a555d2c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>dsetPtr</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>af8e7df56039320a2a861d3dadad50f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>normalPtr</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>e52d3d0d6d8d91ec81617bb2ac659962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>corePtr</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>248df9ea91273d50f5052f0285ff4faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classqmcplusplus_1_1MO2Grid3D.html</anchorfile>
      <anchor>ac2ef61794f84737fa5744986f8ae833</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::ParticleSetPool</name>
    <filename>classqmcplusplus_1_1ParticleSetPool.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PoolType</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>7e47044f8ea224befa6712bea8f66729</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSetPool</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>0cdcd3161c54fead26148d5ca9e38280</anchor>
      <arglist>(const char *aname=&quot;particleset&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>47ef98ae604304897f1dc035db0a7c37</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>00a67d25f940f9998e7b1ab791e7d273</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>51480449996ba68eed31419dab5c9906</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>1d7264f9f474f9939812bd3f5e4a5691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>1846bf3fc4d191a52342da7cf7e3bd34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>e62f28684f5ca8af4c136d3b5ea58cf5</anchor>
      <arglist>(ParticleSet *p)</arglist>
    </member>
    <member kind="function">
      <type>ParticleSet *</type>
      <name>getParticleSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>5ea292fa45894b3e437df302a7a5925e</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>MCWalkerConfiguration *</type>
      <name>getWalkerSet</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>dc13d280eee4cea96860911ae9eedb59</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>PoolType &amp;</type>
      <name>getPool</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>e5d150819bb74388d1ba9a3fb6ff1cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>myPool</name>
      <anchorfile>classqmcplusplus_1_1ParticleSetPool.html</anchorfile>
      <anchor>46d5bf456afa56ca7858ec0a36964862</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCAppBase</name>
    <filename>classqmcplusplus_1_1QMCAppBase.html</filename>
    <member kind="function">
      <type></type>
      <name>QMCAppBase</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>ae400e21b4705d2d61ce00bc3cb8ed81</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCAppBase</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>cf13d7738cf6209acb9e198bf536ccdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>8a0188094b350dce2cc22101ece6264b</anchor>
      <arglist>(const string &amp;infile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveXml</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>831f4a1e8c53a532237e5ebdc713e5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validateXML</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>8de5743353d2b962e36c655d863ebd1e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>b5fac397cf5fbd75244e3b9f5fdc5fb4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>pushDocument</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>485c4b6fe1a54159c45eca0a2cb562cc</anchor>
      <arglist>(const string &amp;infile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>popDocument</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>873aa0f0e7cbbcd05b530cacb111a809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; Libxml2Document * &gt;</type>
      <name>XmlDocStack</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>8378ae3070b86e58df8653ed45b87c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OHMMS::ProjectData</type>
      <name>myProject</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>1ef7b17597ba826c7e696f890f4c30bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OHMMS::RandomNumberControl</type>
      <name>myRandomControl</name>
      <anchorfile>classqmcplusplus_1_1QMCAppBase.html</anchorfile>
      <anchor>f6d12b02538243e16f88a347b1aa0d2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::QMCDriverFactory</name>
    <filename>structqmcplusplus_1_1QMCDriverFactory.html</filename>
    <member kind="enumeration">
      <name>QMCRunType</name>
      <anchor>aff89fbb49f91396d3e2498919ee54a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUMMY_RUN</name>
      <anchor>aff89fbb49f91396d3e2498919ee54a6d04e4ce0ac1356d5f7dbdbcf4c943378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMC_RUN</name>
      <anchor>aff89fbb49f91396d3e2498919ee54a6ed2ea8dc6df9126d00e9b5a802d1a777</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DMC_RUN</name>
      <anchor>aff89fbb49f91396d3e2498919ee54a6e2b36e4d3013f24989a7471195506996</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RMC_RUN</name>
      <anchor>aff89fbb49f91396d3e2498919ee54a612b00fc7ce7f38771719a18a4531f4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZE_RUN</name>
      <anchor>aff89fbb49f91396d3e2498919ee54a6024f83f8bdd5c214ed28e6620e297346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>QMCModeEnum</name>
      <anchor>d374a4af2dc8f534533c34ae00f1087a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPDATE_MODE</name>
      <anchor>d374a4af2dc8f534533c34ae00f1087ab0fc2059b9a204398274c4530373a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLE_MODE</name>
      <anchor>d374a4af2dc8f534533c34ae00f1087a9b907dccba2ee500b14e61beb3484b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACEWARP_MODE</name>
      <anchor>d374a4af2dc8f534533c34ae00f1087ae19f4887e3972ffcb808b90332e953b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCDriverFactory</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>de24bcc4bfae29faa2b08dbd10ff9513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putCommunicator</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>defe966e34a090d278137664dac3629e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setQMCDriver</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>fe425ae73cc3871a2e1e4409cc1e2b25</anchor>
      <arglist>(int curSeries, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createQMCDriver</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>b63bf05d62899a1b231ef924b82360c2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCDriverFactory</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>ac78f87bc6b56fcba6084aabc8c50b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>curQmcMode</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>496960fc46d1cf5c4347f81084181188</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::bitset&lt; 3 &gt;</type>
      <name>curQmcModeBits</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>d5381c1a52006e0061d8bd76f8f5be43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCRunType</type>
      <name>curRunType</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>479fbbfe1d1b2ff6bd3f8d97030df728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>curMethod</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>5fa0ac4c3e843098310b95ba279b0b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Communicate *</type>
      <name>qmcComm</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>4f4f2d9ffa10ca3f91b9ef03ba9a286e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MCWalkerConfiguration *</type>
      <name>qmcSystem</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>f1746febf1ec79e675c82ba91403dbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QMCDriver *</type>
      <name>qmcDriver</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>3c81660ac4a87e8a6c0d9e4111cd7ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>de0982720c287df52f287eb6b3652225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WaveFunctionPool *</type>
      <name>psiPool</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>a2d2360c07454f83503ac32d4329a270</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HamiltonianPool *</type>
      <name>hamPool</name>
      <anchorfile>structqmcplusplus_1_1QMCDriverFactory.html</anchorfile>
      <anchor>21222c3439ec08a788928f586f25d80a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCInterface</name>
    <filename>classqmcplusplus_1_1QMCInterface.html</filename>
    <base>qmcplusplus::QMCDriverFactory</base>
    <base>qmcplusplus::QMCAppBase</base>
    <member kind="function">
      <type></type>
      <name>QMCInterface</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>dce54d886d08fc25fd9fdfe3bd6ef2b7</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCInterface</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>2c065f9d27e041b04b249a5fda3b3259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>e619327b709eef54cbc6b7cb8b8e78fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>eeec1ae74606030135eeadd433ad961e</anchor>
      <arglist>(int myProc, int numProcs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetVMC</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>a6abc42733dc049ae3b66b346061594f</anchor>
      <arglist>(double dt, int w, int steps, int nblocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetVMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>dd7be486221f18d11b9e052b62dfe984</anchor>
      <arglist>(double dt, int w, int steps, int nblocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SetRQMCMultiple</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>664ecb1ea723f9eefa0474efad8a11f7</anchor>
      <arglist>(double dt, int chains, int steps, int nblocks)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>process</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>936431aecf53d403c50f722e466c090c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>4cb829bffb60b7d880397881d004ae19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPtclPos</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>907869056057d838d9b76fb144edd9f5</anchor>
      <arglist>(int id, double *newR)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPtclPos</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>8cf437c0761e7485e880b48bc7048ef5</anchor>
      <arglist>(string set, int id, double *newR)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>runQMC</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>1137ba80a1fe52b75a0cfd559acec79c</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setMCWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>86dc8062f6e335dbdbee4c81f8605a86</anchor>
      <arglist>(xmlXPathContextPtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processPWH</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>f5b4be4d790dffa50edfcafcf53cfd0a</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>runInfoNode</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>885b33ce8d04201dcda751e1ff1fcdf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>FirstQMC</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>fd407f27da756cd4f63692bad995128e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>PrevConfigFile</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>437498bfd12059057fc7afc28545b9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>b25af2dc8bb5893c3722bbe2c7b7cd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset_in</name>
      <anchorfile>classqmcplusplus_1_1QMCInterface.html</anchorfile>
      <anchor>53a51d70ff3f2674e5b40a5887f89579</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::QMCMain</name>
    <filename>classqmcplusplus_1_1QMCMain.html</filename>
    <base>qmcplusplus::QMCDriverFactory</base>
    <base>qmcplusplus::QMCAppBase</base>
    <member kind="function">
      <type></type>
      <name>QMCMain</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>6f5ccbf9e2ded6499e1bfe14675a5c0a</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCMain</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>9745247be0469f894fea75295217c21f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>ecd1a5be447840c36850dc14a65c0888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>15eab89762d188d2647edbd4dc08a67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>runQMC</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>5e5124359401024896fbb846dbd3ff5e</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setMCWalkers</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>371cfe9e45a2eb8a3ff87db9b317ee8b</anchor>
      <arglist>(xmlXPathContextPtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processPWH</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>c5e89ceb4e942d92b867093736549ee9</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>FirstQMC</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>2549157edd941d972ce5b96e042a0f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>PrevConfigFile</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>90f2c983f73fd69b50848e9eedd3a1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>dfc7e6092cc80d3fcc8effc7a84dcf98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset_in</name>
      <anchorfile>classqmcplusplus_1_1QMCMain.html</anchorfile>
      <anchor>dc62d22affe14e7d8b491a5797e64b42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>qmcplusplus::WaveFunctionPool</name>
    <filename>classqmcplusplus_1_1WaveFunctionPool.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, WaveFunctionFactory * &gt;</type>
      <name>PoolType</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>045513e5a53cc89e99760a299c38125d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WaveFunctionPool</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>f8017bf05083ce433b36cfa94691762d</anchor>
      <arglist>(const char *aname=&quot;wavefunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>1dc450b5cfe0fd682b80185c1001a85e</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>835a367a71ee02306ddac5b30e3062e4</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>6ad2c691b68bf5530994d36c12d59e15</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>5a1630f962f663882306104b9b2726f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>5848a01bf903f6b8212e34eec5537ce6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>getPrimary</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>c585c3f9d404cbf9af17ce432659f37a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>getWaveFunction</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>721efc636bae0451d489293a42422862</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>WaveFunctionFactory *</type>
      <name>getWaveFunctionFactory</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>dbb3d0174b197c24779545c6e76c1d08</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetPool</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>5994975be622aa517a8cd59158abe301</anchor>
      <arglist>(ParticleSetPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>getWaveFunctionNode</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>cebef08da55589855314080dd2419704</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>PoolType &amp;</type>
      <name>getPool</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>f70e3ec9f9c8783ed071a4fc648324ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactory</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>85242c9f12c23744c32f938f94c5de40</anchor>
      <arglist>(WaveFunctionFactory *psifac)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction *</type>
      <name>primaryPsi</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a74e90de8ae3a579ab22e80338fbe377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PoolType</type>
      <name>myPool</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>c1a846acb5ba4960753fc1008831570a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classqmcplusplus_1_1WaveFunctionPool.html</anchorfile>
      <anchor>614b24b29012e29f683901e8f359894d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; TinyVector&lt; int, D &gt; &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01TinyVector_3_01int_00_01D_01_4_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; TinyVector&lt; int, D &gt; &gt;</type>
      <name>data_type</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01TinyVector_3_01int_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>e9460544abc31d3758b6f91a0895281d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01TinyVector_3_01int_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>36df8acc6f0ee9a74fb68fc995a0c262</anchor>
      <arglist>(data_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01TinyVector_3_01int_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>d4317a8b0890eccc97cc98f8bec8a365</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01TinyVector_3_01int_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>433caa43dbd7479e661cd93da95dbe32</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>data_type &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01TinyVector_3_01int_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>3113faddaf426647e2a43beccddc4431</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>caaae38c2cee8c0b1977555808a7bbe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>f2ec820307b152b09a98898a62b2f7cc</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>8409c383c76ecdd2c43fdd8e0382c78c</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>68a48102b20ea9441269eecd177724ff</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a61b40f7bc7fd46bc4911756765dd11f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>67d3c26234748b132ee3cdf40611a6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>15958b9e00d1c7ec24dacb124c64597a</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>19d12ac9998ff65a119ed73dcefb60e0</anchor>
      <arglist>(ArrayType_t &amp;a, std::vector&lt; int &gt; &amp;dim, int offset=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>27f59803e8b16cedd0abc66542b5e4a0</anchor>
      <arglist>(ArrayType_t &amp;a, hsize_t ndim, hsize_t *dim, int offset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>8ff32277d9a2b87e48b6b9e5b26d47fc</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>9918f208aa7a836bcd945fa5adf6352c</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>Dim</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>0f734e50b992a0664edb848d11f1a6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>0ab81475e8ec7a53aa8cc69e807e51c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>offset_</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>414574dad39ba55f654182cbdb2f6490</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::OrbitalTraits&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>structqmcplusplus_1_1OrbitalTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>real_type</name>
      <anchorfile>structqmcplusplus_1_1OrbitalTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>1300ce8657d443562fbb7ee724ad4884</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>value_type</name>
      <anchorfile>structqmcplusplus_1_1OrbitalTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>c9124545103f607fb1da7c1ed7617b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>complex_type</name>
      <anchorfile>structqmcplusplus_1_1OrbitalTraits_3_01std_1_1complex_3_01double_01_4_01_4.html</anchorfile>
      <anchor>c8a68eef5f897c3fb85f41f473ac02d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>qmcplusplus::HDFAttribIO&lt; std::vector&lt; std::complex&lt; double &gt; &gt; &gt;</name>
    <filename>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</filename>
    <base>qmcplusplus::HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</anchorfile>
      <anchor>aba477a1561acdc2ce54b18874a55a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</anchorfile>
      <anchor>44e52c62ce23e20a666f298d5217d932</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</anchorfile>
      <anchor>32344cd9dc756d12441d66467cb94e20</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</anchorfile>
      <anchor>b04852c68d9ea6507ff2be7a53550e3b</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>Dim</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</anchorfile>
      <anchor>9ec0d8fd9d6f0f2711d5e77a865af847</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structqmcplusplus_1_1HDFAttribIO_3_01std_1_1vector_3_01std_1_1complex_3_01double_01_4_01_4_01_4.html</anchorfile>
      <anchor>501695e4d66dbd34a428c9c11b1c0f01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
  </compound>
</tagfile>
