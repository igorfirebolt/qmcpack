<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>qmcPlusPlus main page</title>
    <filename>index</filename>
    <docanchor file="index">intro_sec</docanchor>
    <docanchor file="index">license</docanchor>
  </compound>
  <compound kind="file">
    <name>Any2GridBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>Any2GridBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::PadeOrbital</class>
  </compound>
  <compound kind="file">
    <name>Any2GridBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>Any2GridBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::Any2GridBuilder</class>
  </compound>
  <compound kind="file">
    <name>Any2Slater.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>Any2Slater_8h</filename>
    <class kind="class">Any2Slater</class>
  </compound>
  <compound kind="file">
    <name>Assign.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>Assign_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>Assign_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsymmetricDistanceTableData.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>AsymmetricDistanceTableData_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::AsymmetricDTD</class>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_QMC_ASYMMETROCDISTANCETABLEDATAIMPL_H</name>
      <anchorfile>AsymmetricDistanceTableData_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AttributeSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>AttributeSet_8h</filename>
    <class kind="struct">OhmmsAttributeSet</class>
  </compound>
  <compound kind="file">
    <name>BareKineticEnergy.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>BareKineticEnergy_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::BareKineticEnergy</class>
  </compound>
  <compound kind="file">
    <name>Blasf.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>Blasf_8h</filename>
    <member kind="function">
      <type>double</type>
      <name>ddot</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;n, const double *dx, const int &amp;incx, const double *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>sdot</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;n, const float *dx, const int &amp;incx, const float *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>daxpy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;n, const double &amp;da, const double *dx, const int &amp;incx, double *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saxpy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;n, const float &amp;da, const float *dx, const int &amp;incx, float *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zaxpy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; &amp;da, const complex&lt; double &gt; *dx, const int &amp;incx, complex&lt; double &gt; *dy, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dnrm2</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;n, const double *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>snrm2</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int &amp;n, const float *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dznrm2</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *dx, const int &amp;incx)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dscal</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int &amp;n, const double &amp;, double *x, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const double &amp;alpha, const double &amp;a, const int &amp;lda, const double *x, const int &amp;incx, const double &amp;beta, double *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ssymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const float &amp;alpha, const float &amp;a, const int &amp;lda, const float *x, const int &amp;incx, const float &amp;beta, float *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zsymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const complex&lt; double &gt; &amp;alpha, complex&lt; double &gt; *a, const int &amp;lda, complex&lt; double &gt; *x, const int &amp;incx, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>csymv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char &amp;uplo, const int &amp;n, const complex&lt; float &gt; &amp;alpha, complex&lt; float &gt; *a, const int &amp;lda, complex&lt; float &gt; *x, const int &amp;incx, const complex&lt; float &gt; &amp;beta, complex&lt; float &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zcopy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int &amp;n, const complex&lt; double &gt; *x, const int &amp;incx, complex&lt; double &gt; *y, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dcopy</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int &amp;n, const double *, const int &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsyr2k</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsymm</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *A, const int &amp;lda, const double *B, const int &amp;ldb, const double &amp;beta, double *C, const int &amp;ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgemm</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgemv</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const char &amp;trans, const int &amp;nr, const int &amp;nc, const double &amp;alpha, const double *amat, const int &amp;lda, const double *bv, const int &amp;incx, const double &amp;beta, double *cv, const int &amp;incy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dsyrk</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const char &amp;, const char &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const int &amp;, const double &amp;, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgetrf</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int &amp;n, const int &amp;m, double *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgetrf</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int &amp;n, const int &amp;m, complex&lt; double &gt; *a, const int &amp;n0, int *piv, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dgetri</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int &amp;n, double *a, const int &amp;n0, int *piv, double *work, const int &amp;, int &amp;st)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zgetri</name>
      <anchorfile>Blasf_8h.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int &amp;n, complex&lt; double &gt; *a, const int &amp;n0, int *piv, complex&lt; double &gt; *work, const int &amp;, int &amp;st)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoostRandom.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>BoostRandom_8h</filename>
    <class kind="class">BoostRandom</class>
  </compound>
  <compound kind="file">
    <name>CasinoParser.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>CasinoParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>CasinoParser.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>CasinoParser_8h</filename>
    <class kind="class">CasinoParser</class>
  </compound>
  <compound kind="file">
    <name>ChebyshevJastrow.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>ChebyshevJastrow_8h</filename>
    <class kind="struct">ChebyshevJastrow</class>
  </compound>
  <compound kind="file">
    <name>Clebsch_Gordan.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>Clebsch__Gordan_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>Clebsch_Gordan.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>Clebsch__Gordan_8h</filename>
    <class kind="class">Clebsch_Gordan</class>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>Clock_8h</filename>
    <namespace>Pooma</namespace>
    <class kind="class">Pooma::Clock</class>
  </compound>
  <compound kind="file">
    <name>ConservedEnergy.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>ConservedEnergy_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::ConservedEnergy</class>
  </compound>
  <compound kind="file">
    <name>ConstScale.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>ConstScale_8h</filename>
    <class kind="struct">ConstScale</class>
  </compound>
  <compound kind="file">
    <name>CosineFunction.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>CosineFunction_8h</filename>
    <class kind="struct">Sine3D</class>
    <class kind="struct">Cosine3D</class>
  </compound>
  <compound kind="file">
    <name>CoulombPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>CoulombPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::CoulombPotentialAB</class>
    <class kind="struct">ohmmsqmc::CoulombPotentialAA</class>
  </compound>
  <compound kind="file">
    <name>CubicSplineFunctions.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>CubicSplineFunctions_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>CubicSplineFunctions.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>CubicSplineFunctions_8h</filename>
    <class kind="class">CubicSpline</class>
    <class kind="class">RegCubicSpline</class>
  </compound>
  <compound kind="file">
    <name>DataParserTemplate.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>DataParserTemplate_8h</filename>
  </compound>
  <compound kind="file">
    <name>DeterminantOperators.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>DeterminantOperators_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>LUFactorization</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;n, const int &amp;m, double *a, const int &amp;n0, int *piv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>InvertLU</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;n, double *a, const int &amp;n0, int *piv, double *work, const int &amp;n1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Invert</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double *x, int n, int m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>invert_matrix</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(MatrixA &amp;M, bool getdet=true)</arglist>
    </member>
    <member kind="function">
      <type>MatA::value_type</type>
      <name>DetRatio</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const MatA &amp;Minv, Iter newrow, int rowchanged)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DetUpdate</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(MatA &amp;Minv, VecT &amp;newrow, VecT &amp;rvec, VecT &amp;rvecinv, int rowchanged, typename MatA::value_type c_ratio)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt;</type>
      <name>dot</name>
      <anchorfile>DeterminantOperators_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const T *a, const TinyVector&lt; T, D &gt; *b, int n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DetSetBuilderWithBasisSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>DetSetBuilderWithBasisSet_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::DetSetBuilderWithBasisSet</class>
  </compound>
  <compound kind="file">
    <name>DiracDeterminant.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>DiracDeterminant_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::DiracDeterminant</class>
  </compound>
  <compound kind="file">
    <name>DistanceTable.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>DistanceTable_8cpp</filename>
    <class kind="struct">NoBConds</class>
    <class kind="struct">PeriodicBConds</class>
    <class kind="struct">PeriodicBConds&lt; T, 3 &gt;</class>
  </compound>
  <compound kind="file">
    <name>DistanceTable.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>DistanceTable_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::DistanceTable</class>
  </compound>
  <compound kind="file">
    <name>DistanceTableData.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>DistanceTableData_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::TempDisplacement</class>
    <class kind="class">ohmmsqmc::DistanceTableData</class>
  </compound>
  <compound kind="file">
    <name>DMCParticleByParticle.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>DMCParticleByParticle_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>DMCParticleByParticle.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>DMCParticleByParticle_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::DMCParticleByParticle</class>
  </compound>
  <compound kind="file">
    <name>DOMProcessor.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>DOMProcessor_8h</filename>
  </compound>
  <compound kind="file">
    <name>DummyQMC.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>DummyQMC_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>DummyQMC.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>DummyQMC_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::DummyQMC</class>
  </compound>
  <compound kind="file">
    <name>EffMKineticEnergy.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>EffMKineticEnergy_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::EffMKineticEnergy</class>
  </compound>
  <compound kind="file">
    <name>EwaldSum.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>EwaldSum_8h</filename>
    <class kind="struct">EwaldSumTraits</class>
    <class kind="struct">EwaldSumTraits&lt; T, true, true &gt;</class>
    <class kind="struct">EwaldSumTraits&lt; T, false, false &gt;</class>
    <class kind="struct">EwaldSum</class>
  </compound>
  <compound kind="file">
    <name>extfunct.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>extfunct_8h</filename>
    <member kind="function">
      <type>herr_t</type>
      <name>file_info</name>
      <anchorfile>extfunct_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(hid_t loc_id, const char *name, void *opdata)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FastParticleOperators.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>FastParticleOperators_8h</filename>
    <class kind="struct">ConvertPosUnit</class>
    <class kind="struct">ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</class>
    <class kind="struct">ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</class>
    <class kind="struct">ApplyBConds</class>
    <class kind="struct">ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</class>
    <class kind="struct">ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>SUPERCELL_BOUNDARY_LIMITS</name>
      <anchorfile>FastParticleOperators_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>THREE_DIM_BOUNDARY_BLOCK</name>
      <anchorfile>FastParticleOperators_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(X, Y, Z, EPS, PLUSONE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FileUtility.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>FileUtility_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>Tokenize</name>
      <anchorfile>FileUtility_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const std::string &amp;str, std::vector&lt; std::string &gt; &amp;tokens, const std::string &amp;delimiters=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getExtension</name>
      <anchorfile>FileUtility_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GamesXmlParser.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>GamesXmlParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>GamesXmlParser.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>GamesXmlParser_8h</filename>
    <class kind="class">GamesXmlParser</class>
  </compound>
  <compound kind="file">
    <name>GaussianBasisSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>GaussianBasisSet_8h</filename>
    <class kind="struct">GaussianCombo</class>
    <class kind="struct">GaussianCombo::BasicGaussian</class>
  </compound>
  <compound kind="file">
    <name>GaussianFCHKParser.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>GaussianFCHKParser_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>GaussianFCHKParser.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>GaussianFCHKParser_8h</filename>
    <class kind="class">GaussianFCHKParser</class>
  </compound>
  <compound kind="file">
    <name>GaussianTypeOrbital.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>GaussianTypeOrbital_8h</filename>
    <class kind="struct">RadialGaussian</class>
  </compound>
  <compound kind="file">
    <name>GridMolecularOrbitals.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GridMolecularOrbitals_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>GridMolecularOrbitals.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GridMolecularOrbitals_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::GridMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>gto2grid.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>gto2grid_8cpp</filename>
    <member kind="function">
      <type>void</type>
      <name>buildBasisSet</name>
      <anchorfile>gto2grid_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gto2grid_8cpp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GTO2GridBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTO2GridBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>GTO2GridBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTO2GridBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::GTO2GridBuilder</class>
  </compound>
  <compound kind="file">
    <name>gto2slater.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>gto2slater_8cpp</filename>
    <class kind="struct">GTO2Slater</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>gto2slater_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GTOMolecularOrbitals.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTOMolecularOrbitals_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>GTOMolecularOrbitals.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>GTOMolecularOrbitals_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::GTOMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>HamiltonianPool.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>HamiltonianPool_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>HamiltonianPool.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>HamiltonianPool_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::HamiltonianPool</class>
  </compound>
  <compound kind="file">
    <name>HarmonicPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>HarmonicPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::HarmonicPotential</class>
  </compound>
  <compound kind="file">
    <name>HDFAttribIO.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>HDFAttribIO_8h</filename>
    <class kind="struct">HDFAttribIOBase</class>
    <class kind="struct">HDFAttribIO</class>
    <member kind="typedef">
      <type>int</type>
      <name>hid_t</name>
      <anchorfile>HDFAttribIO_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFNumericAttrib.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>HDFNumericAttrib_8h</filename>
    <class kind="struct">HDFAttribIO&lt; hsize_t &gt;</class>
    <class kind="struct">HDFAttribIO&lt; Vector&lt; double &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; Vector&lt; int &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; string &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFParticleAttrib.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>HDFParticleAttrib_8h</filename>
    <class kind="struct">HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFSTLAttrib.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>HDFSTLAttrib_8h</filename>
    <class kind="struct">HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</class>
    <class kind="struct">HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFTriCubicSpline.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>HDFTriCubicSpline_8h</filename>
    <class kind="struct">HDFAttribIO&lt; TriCubicSplineT&lt; double &gt; &gt;</class>
  </compound>
  <compound kind="file">
    <name>HDFWalkerIO.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>HDFWalkerIO_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HDFWalkerIO.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>HDFWalkerIO_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::HDFWalkerOutput</class>
    <class kind="class">ohmmsqmc::HDFWalkerInput</class>
  </compound>
  <compound kind="file">
    <name>HeSTOClementiRottie.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HeSTOClementiRottie_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>HeSTOClementiRottie.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HeSTOClementiRottie_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::HePresetHF</class>
    <class kind="struct">ohmmsqmc::HePresetHFBuilder</class>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSet.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSet_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSet_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::ComboSTO</class>
    <class kind="struct">ohmmsqmc::HFAtomicSTOSet</class>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSetBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSetBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(std::ostream &amp;out, const ComboSTO&lt; T, POS &gt; &amp;asto)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HFAtomicSTOSetBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>HFAtomicSTOSetBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::HFAtomicSTOSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>InitMolecularSystem.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>InitMolecularSystem_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>InitMolecularSystem.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>InitMolecularSystem_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::InitMolecularSystem</class>
  </compound>
  <compound kind="file">
    <name>IonIonPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>IonIonPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::IonIonPotential</class>
  </compound>
  <compound kind="file">
    <name>IteratorUtility.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>IteratorUtility_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>delete_iter</name>
      <anchorfile>IteratorUtility_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JastrowBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>JastrowBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>JastrowBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>JastrowBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::JastrowBuilder</class>
  </compound>
  <compound kind="file">
    <name>LCOrbitals.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>LCOrbitals_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::LCOrbitals</class>
  </compound>
  <compound kind="file">
    <name>libxmldefs.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>libxmldefs_8h</filename>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T &amp;a, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getContent</name>
      <anchorfile>libxmldefs_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const T &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LibxmlNumericIO.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>LibxmlNumericIO_8h</filename>
    <member kind="function">
      <type>bool</type>
      <name>putContent</name>
      <anchorfile>LibxmlNumericIO_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Vector&lt; T &gt; &amp;a, xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocalCorePolPotential.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>LocalCorePolPotential_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>LocalCorePolPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>LocalCorePolPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::LocalCorePolPotential</class>
    <class kind="struct">ohmmsqmc::LocalCorePolPotential::CPP_Param</class>
  </compound>
  <compound kind="file">
    <name>LocalEnergyEstimator.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>LocalEnergyEstimator_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::LocalEnergyEstimator</class>
  </compound>
  <compound kind="file">
    <name>LocalPPotential.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>LocalPPotential_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>LocalPPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>LocalPPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::LocalPPotential</class>
    <class kind="struct">ohmmsqmc::LocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="file">
    <name>MatGrid1D.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>MatGrid1D_8h</filename>
    <class kind="class">MatGrid1D</class>
  </compound>
  <compound kind="file">
    <name>MCWalkerConfiguration.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>MCWalkerConfiguration_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>MCWalkerConfiguration.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>MCWalkerConfiguration_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::MCWalkerConfiguration</class>
  </compound>
  <compound kind="file">
    <name>MO2Grid3D.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>MO2Grid3D_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>MO2Grid3D.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>MO2Grid3D_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::MO2Grid3D</class>
  </compound>
  <compound kind="file">
    <name>mo2grid3d_main.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>mo2grid3d__main_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>mo2grid3d__main_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MolecuDMC.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>MolecuDMC_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>MolecuDMC.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>MolecuDMC_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::MolecuDMC</class>
  </compound>
  <compound kind="file">
    <name>MolecuFixedNodeBranch.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>MolecuFixedNodeBranch_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::MolecuFixedNodeBranch</class>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBasis.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularOrbitalBasis_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::MolecularOrbitalBasis</class>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularOrbitalBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>MolecularOrbitalBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>MolecularOrbitalBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::MolecularOrbitalBuilder</class>
  </compound>
  <compound kind="file">
    <name>MultiChain.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>MultiChain_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::Bead</class>
    <class kind="struct">ohmmsqmc::MultiChain</class>
    <member kind="function">
      <type>void</type>
      <name>delete_iter</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultipleEnergyEstimator.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>MultipleEnergyEstimator_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>MultipleEnergyEstimator.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>MultipleEnergyEstimator_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::MultipleEnergyEstimator</class>
  </compound>
  <compound kind="file">
    <name>MultiSlaterDeterminant.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>MultiSlaterDeterminant_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::MultiSlaterDeterminant</class>
  </compound>
  <compound kind="file">
    <name>NDimGridBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>NDimGridBase_8h</filename>
    <class kind="struct">NDimGrid</class>
  </compound>
  <compound kind="file">
    <name>NoCuspJastrow.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>NoCuspJastrow_8h</filename>
    <class kind="struct">NoCuspJastrow</class>
  </compound>
  <compound kind="file">
    <name>NonLocalPPotential.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>NonLocalPPotential_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>NonLocalPPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>NonLocalPPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::NonLocalPPotential</class>
    <class kind="struct">ohmmsqmc::NonLocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="file">
    <name>NRSplineFunctions.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>NRSplineFunctions_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSpline</name>
      <anchorfile>NRSplineFunctions_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const T *x, const T *y, int n, T yp1, T ypn, T *y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplinePBC</name>
      <anchorfile>NRSplineFunctions_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const T *x, const T *y, int n, T *d1, T *d2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplineFirst</name>
      <anchorfile>NRSplineFunctions_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const T *x, const T *y, int n, T *d1, T *d2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NumericalMolecularOrbitals.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalMolecularOrbitals_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalMolecularOrbitals.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalMolecularOrbitals_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::NumericalMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>NumericalOrbitalSetBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>NumericalOrbitalSetBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalOrbitalSetBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>NumericalOrbitalSetBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::NumericalOrbitalSetBuilder</class>
  </compound>
  <compound kind="file">
    <name>NumericalRGFBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalRGFBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>NumericalRGFBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>NumericalRGFBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::NumericalRGFBuilder</class>
  </compound>
  <compound kind="file">
    <name>ohmms-config.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/docs/</path>
    <filename>ohmms-config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBHDF5</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBBOOST</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBBLITZ</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBXML2</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_LIBGSL</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_DIM</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_INDEXTYPE</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_PRECISION</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_ORTHO</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QMC_FASTWALKER</name>
      <anchorfile>ohmms-config_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsBlas.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>OhmmsBlas_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsBlas.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>OhmmsBlas_8h</filename>
    <class kind="struct">BLAS</class>
  </compound>
  <compound kind="file">
    <name>OhmmsElementBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>OhmmsElementBase_8h</filename>
    <class kind="class">OhmmsElementBase</class>
    <member kind="define">
      <type>#define</type>
      <name>xmlDocPtr</name>
      <anchorfile>OhmmsElementBase_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlNodePtr</name>
      <anchorfile>OhmmsElementBase_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>xmlNsPtr</name>
      <anchorfile>OhmmsElementBase_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsInfo.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsInfo_8cpp</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>log</name>
      <anchorfile>OhmmsInfo_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>error</name>
      <anchorfile>OhmmsInfo_8cpp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>warning</name>
      <anchorfile>OhmmsInfo_8cpp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>debug</name>
      <anchorfile>OhmmsInfo_8cpp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsInfo.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsInfo_8h</filename>
    <class kind="class">OhmmsInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>LOGMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERRORMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARNMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XMLReport</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUGMSG</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>log</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>error</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>warning</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>debug</name>
      <anchorfile>OhmmsInfo_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsInform.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsInform_8cpp</filename>
    <namespace>std</namespace>
  </compound>
  <compound kind="file">
    <name>OhmmsInform.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsInform_8h</filename>
    <class kind="class">OhmmsInform</class>
    <member kind="function">
      <type>OhmmsInform &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsInform_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(OhmmsInform &amp;o, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsIOBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>OhmmsIOBase_8h</filename>
    <class kind="class">OhmmsIOBase</class>
    <class kind="class">StreamIO</class>
  </compound>
  <compound kind="file">
    <name>OhmmsMatrix.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>OhmmsMatrix_8h</filename>
    <class kind="class">Matrix</class>
    <class kind="struct">CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</class>
    <class kind="class">SizeLeaf2</class>
    <class kind="struct">LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</class>
    <class kind="struct">LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsMatrix_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ostream &amp;out, const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>OhmmsMatrix_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::istream &amp;is, Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>OhmmsMatrix_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Matrix&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsMatrixOperators.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>OhmmsMatrixOperators_8h</filename>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const T1 &amp;, const Matrix&lt; T2, C2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Matrix&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;l, const Matrix&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Matrix&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const Matrix&lt; T1, C1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T1, C1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>OhmmsMatrixOperators_8h.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(Matrix&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsObject.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsObject_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsObject.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsObject_8h</filename>
    <class kind="class">OhmmsObject</class>
  </compound>
  <compound kind="file">
    <name>OhmmsParameter.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>OhmmsParameter_8h</filename>
    <class kind="class">OhmmsParameter</class>
    <class kind="class">OhmmsParameter&lt; bool &gt;</class>
  </compound>
  <compound kind="file">
    <name>OhmmsSpecies.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsSpecies_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>OhmmsSpecies.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>OhmmsSpecies_8h</filename>
    <class kind="class">SpeciesBase</class>
  </compound>
  <compound kind="file">
    <name>OhmmsSymmetricMatrix.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>OhmmsSymmetricMatrix_8h</filename>
    <class kind="class">SymmetricMatrix</class>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>OhmmsSymmetricMatrix_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(SymmetricMatrix&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsSymmetricMatrix_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;out, const SymmetricMatrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVector.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>OhmmsVector_8h</filename>
    <class kind="class">Vector</class>
    <class kind="struct">CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</class>
    <class kind="class">SizeLeaf</class>
    <class kind="struct">LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</class>
    <class kind="struct">LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</class>
    <class kind="struct">LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>OhmmsVector_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Vector&lt; T, C &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsVector_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;out, const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVectorOperators.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>OhmmsVectorOperators_8h</filename>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>acos</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>asin</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnArcTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCeil, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ceil</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cos</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypCos, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>cosh</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnExp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>exp</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFabs, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fabs</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnFloor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>floor</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnLog10, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>log10</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sin</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypSin, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sinh</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnSqrt, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>sqrt</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tan</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; FnHypTan, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>tanh</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpNot, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const T1 &amp;, const Vector&lt; T2, C2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpDivide, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator/</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnLdexp, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>ldexp</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnPow, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>pow</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnFmod, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>fmod</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; FnArcTan2, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>atan2</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGT, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpGE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpEQ, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator==</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpNE, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator!=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpAnd, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpOr, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator||</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpLeftShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpRightShift, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; Vector&lt; T2, C2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;l, const Vector&lt; T2, C2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; Vector&lt; T1, C1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const Vector&lt; T1, C1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T1, C1 &gt; &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>OhmmsVectorOperators_8h.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(Vector&lt; T1, C1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OhmmsVectorRef.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>OhmmsVectorRef_8h</filename>
    <class kind="struct">VectorRef</class>
  </compound>
  <compound kind="file">
    <name>OneBodyJastrowFunction.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>OneBodyJastrowFunction_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::OneBodyJastrow</class>
  </compound>
  <compound kind="file">
    <name>OneDimCubicSpline.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>OneDimCubicSpline_8h</filename>
    <class kind="class">OneDimCubicSplineFirst</class>
    <class kind="class">OneDimCubicSplinePBC</class>
    <class kind="class">OneDimCubicSpline</class>
  </compound>
  <compound kind="file">
    <name>OneDimGridBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>OneDimGridBase_8h</filename>
    <class kind="struct">OneDimGridBase</class>
    <class kind="struct">LinearGrid</class>
    <class kind="struct">LogGrid</class>
    <class kind="struct">LogGridZero</class>
    <class kind="struct">NumericalGrid</class>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>OneDimGridBase_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ostream &amp;out, const OneDimGridBase&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDimGridFunctor.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>OneDimGridFunctor_8h</filename>
    <class kind="struct">FunctorBase</class>
    <class kind="struct">OneDimGridFunctor</class>
  </compound>
  <compound kind="file">
    <name>OneDimIntegration.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>OneDimIntegration_8h</filename>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2_forward</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate_RK2_backward</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const GF &amp;f, GF &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_RK2</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(GF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>GF::value_type</type>
      <name>integrate</name>
      <anchorfile>OneDimIntegration_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const GF &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrbitalBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>OrbitalBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::OrbitalBase</class>
  </compound>
  <compound kind="file">
    <name>OrbitalBuilderBase.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>OrbitalBuilderBase_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>OrbitalBuilderBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>OrbitalBuilderBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::OrbitalBuilderBase</class>
  </compound>
  <compound kind="file">
    <name>PadeJastrow.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>PadeJastrow_8h</filename>
    <class kind="struct">PadeJastrow</class>
    <class kind="struct">PadeJastrow2</class>
  </compound>
  <compound kind="file">
    <name>ParameterSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>ParameterSet_8h</filename>
    <class kind="struct">ParameterSet</class>
  </compound>
  <compound kind="file">
    <name>parse.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>parse_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>parse_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttrib.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleAttrib_8cpp</filename>
    <class kind="struct">CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</class>
    <class kind="class">SizeLeafPA</class>
    <class kind="struct">LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</class>
    <class kind="struct">LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</class>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryMinus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator-</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpUnaryPlus, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator+</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpBitwiseNot, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator~</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpIdentity, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>PETE_identity</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; UnaryNode&lt; OpCast&lt; T1 &gt;, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>peteCast</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const T1 &amp;, const ParticleAttrib&lt; T2 &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMultiply, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator *</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpMod, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator%</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseAnd, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator &amp;</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseOr, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator|</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; BinaryNode&lt; OpBitwiseXor, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; ParticleAttrib&lt; T2 &gt; &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>operator^</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;l, const ParticleAttrib&lt; T2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MakeReturn&lt; TrinaryNode&lt; FnWhere, typename CreateLeaf&lt; ParticleAttrib&lt; T1 &gt; &gt;::Leaf_t, typename CreateLeaf&lt; T2 &gt;::Leaf_t, typename CreateLeaf&lt; T3 &gt;::Leaf_t &gt; &gt;::Expression_t</type>
      <name>where</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ParticleAttrib&lt; T1 &gt; &amp;c, const T2 &amp;t, const T3 &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>assign</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParticleAttrib&lt; T1 &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ParticleAttrib&lt; T1 &gt; &amp;lhs, const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ParticleAttrib&lt; T &gt; &amp;lhs, const Op &amp;op, const Expression&lt; RHS &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>ParticleAttrib_8cpp.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(ostream &amp;out, const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleAttrib.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleAttrib_8h</filename>
    <class kind="class">ParticleAttrib</class>
    <member kind="define">
      <type>#define</type>
      <name>DEBUGMSG</name>
      <anchorfile>ParticleAttrib_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleBase.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleBase_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>ParticleBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleBase_8h</filename>
    <class kind="class">ParticleBase</class>
  </compound>
  <compound kind="file">
    <name>ParticleFunctions.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleFunctions_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>PartitionGrid</name>
      <anchorfile>ParticleFunctions_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(PL &amp;lattice, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCell</name>
      <anchorfile>ParticleFunctions_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ExpandSuperCellOMP</name>
      <anchorfile>ParticleFunctions_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(PT &amp;in_, PT &amp;out_, GIV &amp;uc_grid, GIM &amp;grid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleMessage.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleMessage_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>gsum</name>
      <anchorfile>ParticleMessage_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleSet.BC.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>ParticleSet_8BC_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSet.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>ParticleSet_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>ParticleSet_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::ParticleSet</class>
  </compound>
  <compound kind="file">
    <name>ParticleSetPool.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>ParticleSetPool_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleSetPool.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>ParticleSetPool_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::ParticleSetPool</class>
  </compound>
  <compound kind="file">
    <name>ParticleTags.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/</path>
    <filename>ParticleTags_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>ParticleTags.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/</path>
    <filename>ParticleTags_8h</filename>
    <class kind="struct">ParticleTags</class>
  </compound>
  <compound kind="file">
    <name>ParticleUtility.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>ParticleUtility_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>ParticleUtility_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>ParticleUtility_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>ParticleUtility_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PL &amp;lat, PV &amp;pin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wrapAroundBox</name>
      <anchorfile>ParticleUtility_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const PL &amp;lat, const PV &amp;pin, PV &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>Dot</name>
      <anchorfile>ParticleUtility_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;pa, const ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>ParticleUtility_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; T, D &gt; &gt; &amp;pa)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PC.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>PC_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>PC_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PLayoutFunctions.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>PLayoutFunctions_8h</filename>
    <namespace>OHMMS</namespace>
    <class kind="struct">OHMMS::PLayoutFunc</class>
  </compound>
  <compound kind="file">
    <name>PolarizationEstimator.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>PolarizationEstimator_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::PolarizationEstimator</class>
  </compound>
  <compound kind="file">
    <name>PolarizationPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>PolarizationPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::PolarizationPotential</class>
  </compound>
  <compound kind="file">
    <name>PolarizedJastrow.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>PolarizedJastrow_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::PolarizedJastrow</class>
  </compound>
  <compound kind="file">
    <name>PolymerChain.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>PolymerChain_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::PolymerChain</class>
  </compound>
  <compound kind="file">
    <name>PolymerEstimator.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>PolymerEstimator_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>PolymerEstimator.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>PolymerEstimator_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::PolymerEstimator</class>
  </compound>
  <compound kind="file">
    <name>PooledData.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>PooledData_8h</filename>
    <class kind="class">PooledData</class>
  </compound>
  <compound kind="file">
    <name>ProjectData.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</path>
    <filename>ProjectData_8cpp</filename>
    <namespace>OHMMS</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectData.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</path>
    <filename>ProjectData_8h</filename>
    <namespace>OHMMS</namespace>
    <class kind="struct">OHMMS::ProjectData</class>
    <member kind="define">
      <type>#define</type>
      <name>OHHMS_PROJECTDATA_H__</name>
      <anchorfile>ProjectData_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QDwf.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>QDwf_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>QDwf.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>QDwf_8h</filename>
    <class kind="class">QDwf</class>
  </compound>
  <compound kind="file">
    <name>QDwfBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>QDwfBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>QDwfBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>QDwfBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::QDwfBuilder</class>
  </compound>
  <compound kind="file">
    <name>qmcapp.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>qmcapp_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>qmcapp_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QMCAppBase.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>QMCAppBase_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>QMCAppBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>QMCAppBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::QMCAppBase</class>
  </compound>
  <compound kind="file">
    <name>QMCDriver.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>QMCDriver_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>QMCDriver.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>QMCDriver_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::QMCDriver</class>
  </compound>
  <compound kind="file">
    <name>QMCGaussianParserBase.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>QMCGaussianParserBase_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>QMCGaussianParserBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>QMCGaussianParserBase_8h</filename>
    <class kind="struct">OhmmsAsciiParser</class>
    <class kind="struct">QMCGaussianParserBase</class>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonian.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>QMCHamiltonian_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonian.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>QMCHamiltonian_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::QMCHamiltonian</class>
  </compound>
  <compound kind="file">
    <name>QMCHamiltonianBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>QMCHamiltonianBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::QMCHamiltonianBase</class>
  </compound>
  <compound kind="file">
    <name>QMCMain.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>QMCMain_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>QMCMain.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>QMCMain_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::QMCMain</class>
  </compound>
  <compound kind="file">
    <name>QMCUtilities.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>QMCUtilities_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <member kind="function">
      <type>bool</type>
      <name>determineNumOfElectrons</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;el, xmlXPathContextPtr acontext)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RadialFunctorUtility.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>RadialFunctorUtility_8h</filename>
    <member kind="function">
      <type>T</type>
      <name>Phisq_x_Yk</name>
      <anchorfile>RadialFunctorUtility_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const GF &amp;g, const GF &amp;a, const GF &amp;b, T prefactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Ykofr</name>
      <anchorfile>RadialFunctorUtility_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(GF &amp;g, const GF &amp;a, const GF &amp;b, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Make_Loc_Pot</name>
      <anchorfile>RadialFunctorUtility_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(GF &amp;g, const GF &amp;y, const GF &amp;a, const GF &amp;b, typename GF::value_type coeff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RadialOrbitalBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>RadialOrbitalBase_8h</filename>
    <class kind="struct">RadialOrbitalBase</class>
    <class kind="struct">RadialOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>RadialOrbitalManager.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>RadialOrbitalManager_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>RadialOrbitalManager.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>RadialOrbitalManager_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::RadialOrbitalManager</class>
  </compound>
  <compound kind="file">
    <name>RandomFunctors.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>RandomFunctors_8h</filename>
    <class kind="class">RandomUniformPos</class>
    <class kind="class">RandomUniformPos&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="class">RandomUniformPos&lt; TinyVector&lt; double, 2 &gt;, RNG &gt;</class>
    <class kind="struct">NormRandomSeq</class>
    <class kind="struct">NormRandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</class>
    <class kind="struct">NormRandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="struct">RandomSeq</class>
    <class kind="struct">RandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</class>
    <class kind="struct">RandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</class>
    <class kind="struct">RandomVector</class>
    <class kind="struct">RandomSequence</class>
    <class kind="struct">RandomSequence&lt; vector&lt; T &gt;, RNG &gt;</class>
    <class kind="struct">RandomSequence&lt; vector&lt; double &gt;, RNG &gt;</class>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>RandomGenerator_8cpp</filename>
    <member kind="variable">
      <type>RandomGenerator_t</type>
      <name>Random</name>
      <anchorfile>RandomGenerator_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomGenerator.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>RandomGenerator_8h</filename>
    <member kind="typedef">
      <type>RandRandom</type>
      <name>RandomGenerator_t</name>
      <anchorfile>RandomGenerator_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RandomGenerator_t</type>
      <name>Random</name>
      <anchorfile>RandomGenerator_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandomNumberControl.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</path>
    <filename>RandomNumberControl_8cpp</filename>
    <namespace>OHMMS</namespace>
  </compound>
  <compound kind="file">
    <name>RandomNumberControl.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</path>
    <filename>RandomNumberControl_8h</filename>
    <namespace>OHMMS</namespace>
    <class kind="class">OHMMS::RandomNumberControl</class>
  </compound>
  <compound kind="file">
    <name>RandomSeqGenerator.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>RandomSeqGenerator_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>assignGaussRand</name>
      <anchorfile>RandomSeqGenerator_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *restrict a, unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignUniformRand</name>
      <anchorfile>RandomSeqGenerator_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T *restrict a, unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGaussRandom</name>
      <anchorfile>RandomSeqGenerator_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Matrix&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUniformRandom</name>
      <anchorfile>RandomSeqGenerator_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandRandom.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>RandRandom_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>struct_t</name>
      <anchorfile>RandRandom_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RandRandom.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>RandRandom_8h</filename>
    <class kind="class">RandRandom</class>
  </compound>
  <compound kind="file">
    <name>RecordProperty.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>RecordProperty_8h</filename>
    <class kind="struct">RecordProperty</class>
    <class kind="class">RecordPropertyList</class>
    <class kind="struct">RecordNamedProperty</class>
  </compound>
  <compound kind="file">
    <name>ReptationMC.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>ReptationMC_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>ReptationMC.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>ReptationMC_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::ReptationMC</class>
  </compound>
  <compound kind="file">
    <name>RGFBuilderBase.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>RGFBuilderBase_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>RGFBuilderBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>RGFBuilderBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::RGFBuilderBase</class>
  </compound>
  <compound kind="file">
    <name>RPAJastrow.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>RPAJastrow_8h</filename>
    <class kind="struct">RPAJastrow</class>
  </compound>
  <compound kind="file">
    <name>RQMCMultiple.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>RQMCMultiple_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>RQMCMultiple.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>RQMCMultiple_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::RQMCMultiple</class>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>ScalarEstimatorBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::ScalarEstimatorBase</class>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorManager.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>ScalarEstimatorManager_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>ScalarEstimatorManager.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>ScalarEstimatorManager_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::ScalarEstimatorManager</class>
  </compound>
  <compound kind="file">
    <name>SimpleParser.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>SimpleParser_8cpp</filename>
    <member kind="function">
      <type>char *</type>
      <name>readLine</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(char *s, int max, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readXmol</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(istream &amp;fxmol, double *data, int numvar)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parseXwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>SimpleParser_8cpp.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleParser.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>SimpleParser_8h</filename>
    <member kind="function">
      <type>char *</type>
      <name>readLine</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(char *s, int max, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getXwords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(vector&lt; string &gt; &amp;slist, istream &amp;fp)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>parsewords</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(char *inbuf, vector&lt; string &gt; &amp;slist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readXmol</name>
      <anchorfile>SimpleParser_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(istream &amp;, double *, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SingleParticleOrbitalSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>SingleParticleOrbitalSet_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::SingleParticleOrbitalSet</class>
  </compound>
  <compound kind="file">
    <name>SlaterBasisSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>SlaterBasisSet_8h</filename>
    <class kind="struct">SlaterCombo</class>
  </compound>
  <compound kind="file">
    <name>SlaterDeterminant.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>SlaterDeterminant_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::SlaterDeterminant</class>
  </compound>
  <compound kind="file">
    <name>SlaterTypeOrbital.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>SlaterTypeOrbital_8h</filename>
    <class kind="struct">STONorm</class>
    <class kind="struct">GenericSTO</class>
    <class kind="struct">RadialSTO</class>
  </compound>
  <compound kind="file">
    <name>SpeciesSet.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>SpeciesSet_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>SpeciesSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>SpeciesSet_8h</filename>
    <class kind="class">SpeciesSet</class>
  </compound>
  <compound kind="file">
    <name>SphericalOrbitalSet.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>SphericalOrbitalSet_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::DummyGrid</class>
    <class kind="struct">ohmmsqmc::SphericalOrbitalSet</class>
    <member kind="typedef">
      <type>TinyVector&lt; int, 4 &gt;</type>
      <name>QuantumNumberType</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_n</name>
      <anchor>a16a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_l</name>
      <anchor>a16a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_m</name>
      <anchor>a16a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_s</name>
      <anchor>a16a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalTensor.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>SphericalTensor_8h</filename>
    <class kind="class">SphericalTensor</class>
    <class kind="struct">SCTFunctor</class>
    <class kind="struct">SCTFunctor&lt; SCT, 1 &gt;</class>
    <class kind="struct">SCTFunctor&lt; SCT, 2 &gt;</class>
    <class kind="struct">SCTFunctor&lt; SCT, 3 &gt;</class>
  </compound>
  <compound kind="file">
    <name>spline.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>spline_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION</name>
      <anchorfile>spline_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DFUNCTION</name>
      <anchorfile>spline_8cpp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>spline_8cpp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline3.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>spline3_8cpp</filename>
    <class kind="struct">TestFunc</class>
    <class kind="struct">ComboFunc</class>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>spline3_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spline3_io.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>spline3__io_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>spline3__io_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline3DBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/Spline3D/</path>
    <filename>Spline3DBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>Spline3DBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/Spline3D/</path>
    <filename>Spline3DBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::Spline3DBuilder</class>
  </compound>
  <compound kind="file">
    <name>Spline3DPotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>Spline3DPotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::Spline3DPotential</class>
  </compound>
  <compound kind="file">
    <name>SPOSetBase.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>SPOSetBase_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::SPOSetBase</class>
  </compound>
  <compound kind="file">
    <name>SprngRandom.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>SprngRandom_8h</filename>
    <class kind="class">SprngRandom</class>
    <member kind="define">
      <type>#define</type>
      <name>SRSEED</name>
      <anchorfile>SprngRandom_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STO2GridBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STO2GridBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>STO2GridBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STO2GridBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::STO2GridBuilder</class>
  </compound>
  <compound kind="file">
    <name>STOMolecularOrbitals.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STOMolecularOrbitals_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>STOMolecularOrbitals.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>STOMolecularOrbitals_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::STOMolecularOrbitals</class>
  </compound>
  <compound kind="file">
    <name>SymmetricDistanceTableData.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>SymmetricDistanceTableData_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::SymmetricDTD</class>
  </compound>
  <compound kind="file">
    <name>Tensor.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>Tensor_8h</filename>
    <class kind="class">Tensor</class>
    <class kind="class">Tensor::DontInitialize</class>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>Tensor_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt;</type>
      <name>transpose</name>
      <anchorfile>Tensor_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>dot</name>
      <anchorfile>Tensor_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;lhs, const Tensor&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>Tensor_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;out, const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>Tensor_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(std::istream &amp;is, Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>test_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSpline</name>
      <anchorfile>test_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const T *x, const T *y, int n, T yp1, T ypn, T *d2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NRCubicSplinePBC</name>
      <anchorfile>test_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const T *x, const T *y, int n, T *d2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TinyMatrixRef.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>TinyMatrixRef_8h</filename>
    <class kind="class">TinyMatrixRef</class>
  </compound>
  <compound kind="file">
    <name>TinyVector.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>TinyVector_8h</filename>
    <class kind="class">TinyVector</class>
    <class kind="class">TinyVector::DontInitialize</class>
    <class kind="struct">printTinyVector</class>
    <class kind="struct">printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</class>
    <class kind="struct">printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</class>
    <class kind="struct">printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</class>
    <member kind="function">
      <type>BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t</type>
      <name>dot</name>
      <anchorfile>TinyVector_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>cross</name>
      <anchorfile>TinyVector_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; typename BinaryReturn&lt; T1, T2, OpMultiply &gt;::Type_t, D &gt;</type>
      <name>outerProduct</name>
      <anchorfile>TinyVector_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;lhs, const TinyVector&lt; T2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>TinyVector_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::ostream &amp;out, const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>TinyVector_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(std::istream &amp;is, TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transform2GridFunctor.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>Transform2GridFunctor_8h</filename>
    <class kind="struct">Transform2GridFunctorBase</class>
    <class kind="struct">Transform2GridFunctor</class>
    <class kind="struct">TestTransform</class>
    <member kind="function">
      <type>Transform2GridFunctorBase&lt; FnOut &gt; *</type>
      <name>createTransform2GridFunctor</name>
      <anchorfile>Transform2GridFunctor_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(FnIn &amp;in, FnOut &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>TrialWaveFunction_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>TrialWaveFunction.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>TrialWaveFunction_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::TrialWaveFunction</class>
  </compound>
  <compound kind="file">
    <name>TriCubicSplineBuilder.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>TriCubicSplineBuilder_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>TriCubicSplineBuilder.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>TriCubicSplineBuilder_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::TriCubicSplineBuilder</class>
    <member kind="define">
      <type>#define</type>
      <name>OHMMS_QMC_TRICUBICSPLINE3DBUILDER_H</name>
      <anchorfile>TriCubicSplineBuilder_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriCubicSplinePotential.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>TriCubicSplinePotential_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::TriCubicSplinePotential</class>
  </compound>
  <compound kind="file">
    <name>TriCubicSplineT.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>TriCubicSplineT_8h</filename>
    <class kind="class">TriCubicSplineT</class>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowFunction.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>TwoBodyJastrowFunction_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::TwoBodyJastrow</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow&lt; FT, false &gt;</class>
  </compound>
  <compound kind="file">
    <name>TwoBodyJastrowFunction.Shared.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>TwoBodyJastrowFunction_8Shared_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::TwoBodyJastrow&lt; FT, true &gt;</class>
  </compound>
  <compound kind="file">
    <name>UOverRN.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>UOverRN_8h</filename>
    <class kind="struct">UOverRN</class>
  </compound>
  <compound kind="file">
    <name>UtilityFunctions.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>UtilityFunctions_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>FairDivide</name>
      <anchorfile>UtilityFunctions_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int ntot, int npart, IV &amp;adist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VMC.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMC_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>VMC.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMC_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::VMC</class>
  </compound>
  <compound kind="file">
    <name>VMC_OPT.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMC__OPT_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::VMC_OPT::WalkerData</class>
  </compound>
  <compound kind="file">
    <name>VMC_OPT.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMC__OPT_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::VMC_OPT</class>
  </compound>
  <compound kind="file">
    <name>VMCMoveAll.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCMoveAll_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMoveAll.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCMoveAll_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::VMCMoveAll</class>
  </compound>
  <compound kind="file">
    <name>VMCMultiple.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCMultiple_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>VMCMultiple.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCMultiple_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::VMCMultiple</class>
  </compound>
  <compound kind="file">
    <name>VMCParticleByParticle.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCParticleByParticle_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>VMCParticleByParticle.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCParticleByParticle_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::VMCParticleByParticle</class>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiple.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCPbyPMultiple_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>VMCPbyPMultiple.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>VMCPbyPMultiple_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::VMCPbyPMultiple</class>
  </compound>
  <compound kind="file">
    <name>Walker.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>Walker_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="struct">ohmmsqmc::Walker</class>
    <member kind="enumvalue">
      <name>LOGPSI</name>
      <anchor>a15a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGN</name>
      <anchor>a15a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMBRELLAWEIGHT</name>
      <anchor>a15a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALENERGY</name>
      <anchor>a15a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALPOTENTIAL</name>
      <anchor>a15a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMPROPERTIES</name>
      <anchor>a15a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ostream &amp;out, const Walker&lt; T, PA &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WaveFunctionPool.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>WaveFunctionPool_8cpp</filename>
    <namespace>ohmmsqmc</namespace>
  </compound>
  <compound kind="file">
    <name>WaveFunctionPool.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>WaveFunctionPool_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::WaveFunctionPool</class>
  </compound>
  <compound kind="file">
    <name>WaveFunctionTester.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>WaveFunctionTester_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>WaveFunctionTester.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>WaveFunctionTester_8h</filename>
    <namespace>ohmmsqmc</namespace>
    <class kind="class">ohmmsqmc::WaveFunctionTester</class>
  </compound>
  <compound kind="file">
    <name>XMLTemplate.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>XMLTemplate_8h</filename>
    <namespace>OHMMS</namespace>
    <member kind="function">
      <type>void</type>
      <name>printXML</name>
      <anchorfile>namespaceOHMMS.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const T &amp;, ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XYZCubicGrid.h</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>XYZCubicGrid_8h</filename>
    <class kind="struct">XYZCubicGrid</class>
  </compound>
  <compound kind="file">
    <name>ylmtest.cpp</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>ylmtest_8cpp</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>ylmtest_8cpp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Any2Slater</name>
    <filename>classAny2Slater.html</filename>
    <base>MinimizeFunction</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; scalar &gt;</type>
      <name>SourceType</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogGrid&lt; scalar &gt;</type>
      <name>GridType</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Any2Slater</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(SourceType &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>Params</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Params</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Cost</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteStuff</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SourceType &amp;</type>
      <name>Source</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_tolerance</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_stepsize</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>scalar</type>
      <name>cg_epsilon</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minIndex</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>mPtr</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericSTO&lt; scalar &gt;</type>
      <name>Target</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; scalar &gt;</type>
      <name>OptParams</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; scalar &gt;</type>
      <name>psi_sq</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; scalar &gt;</type>
      <name>psi_norm</name>
      <anchorfile>classAny2Slater.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ApplyBConds</name>
    <filename>structApplyBConds.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="struct">
    <name>ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</name>
    <filename>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ApplyBConds&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</name>
    <filename>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array_t::Type_t</type>
      <name>Component_t</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;G, const Transformer_t &amp;R, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Unit2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(Array_t &amp;pinout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Cart2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;G, const Transformer_t &amp;R, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(const Component_t &amp;pos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Unit</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Unit2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component_t</type>
      <name>Cart2Cart</name>
      <anchorfile>structApplyBConds_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(const Component_t &amp;pos, const Transformer_t &amp;G, const Transformer_t &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BLAS</name>
    <filename>structBLAS.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(int n, double x, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(int n, double x, const double *a, int incx, double *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(int n, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(int n, float x, const float *a, int incx, float *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>axpy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(int n, const complex&lt; double &gt; x, const complex&lt; double &gt; *a, int incx, complex&lt; double &gt; *b, int incy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>norm2</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(int n, const double *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>norm2</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>norm2</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(int n, const float *a, int incx=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scal</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(int n, double alpha, double *x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemv</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(int n, int m, const double *amat, const double *x, double *y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(int n, const double *a, const double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>dot</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(int n, const float *a, const float *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(int n, const double *a, double *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(int n, const double *a, int ia, double *b, int ib)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, complex&lt; double &gt; *b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(int n, const complex&lt; double &gt; *a, int ia, complex&lt; double &gt; *b, int ib)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INCX</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>INCY</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>UPLO</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>TRANS</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>sone</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>szero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>done</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>dzero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; float &gt;</type>
      <name>cone</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; float &gt;</type>
      <name>czero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; double &gt;</type>
      <name>zone</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const complex&lt; double &gt;</type>
      <name>zzero</name>
      <anchorfile>structBLAS.html</anchorfile>
      <anchor>s11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoostRandom</name>
    <filename>classBoostRandom.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Return_t</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::minstd_rand</type>
      <name>base_generator_type</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::mt19937</type>
      <name>generator_type</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variate_generator&lt; generator_type, boost::uniform_real&lt; T &gt; &gt;</type>
      <name>uniform_generator_type</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int iseed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoostRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type>uniform_generator_type &amp;</type>
      <name>getGenerator</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRandom</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>baseSeed</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>base_generator_type</type>
      <name>base_generator</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::uniform_real&lt; T &gt;</type>
      <name>unit_dist</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>generator_type *</type>
      <name>generator</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uniform_generator_type *</type>
      <name>uni</name>
      <anchorfile>classBoostRandom.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CasinoParser</name>
    <filename>classCasinoParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>CasinoParser</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CasinoParser</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNumberOfAtoms</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAtomicPositions</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAtomicNumbers</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValenceCharges</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>contractionCorrection</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int shell_id, double alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCorrections</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>BasisCorrection</name>
      <anchorfile>classCasinoParser.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChebyshevJastrow</name>
    <filename>structChebyshevJastrow.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ChebyshevJastrow</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(vector&lt; T &gt; a)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>alpha</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>TT</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>dTT</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>d2TT</name>
      <anchorfile>structChebyshevJastrow.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Clebsch_Gordan</name>
    <filename>classClebsch__Gordan.html</filename>
    <member kind="function">
      <type></type>
      <name>Clebsch_Gordan</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int lmax)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Clebsch_Gordan</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int l1, int l2, int l3, int m1, int m2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cg</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int l1, int l2, int l3, int m1, int m2) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>CG_coeff</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Clebsch_Gordan</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L1max</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>L2max</name>
      <anchorfile>classClebsch__Gordan.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ComboFunc</name>
    <filename>structComboFunc.html</filename>
    <member kind="function">
      <type></type>
      <name>ComboFunc</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double c, TestFunc *fn)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>C</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TestFunc * &gt;</type>
      <name>F</name>
      <anchorfile>structComboFunc.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConstScale</name>
    <filename>structConstScale.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstScale</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double c=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstScale</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double r, double &amp;vr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double r, double &amp;vr, double &amp;dvr)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>C</name>
      <anchorfile>structConstScale.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConvertPosUnit</name>
    <filename>structConvertPosUnit.html</filename>
    <templarg>T1</templarg>
    <templarg>T2</templarg>
    <templarg>ORTHO</templarg>
  </compound>
  <compound kind="struct">
    <name>ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, false &gt;</name>
    <filename>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01false_01_4.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConvertPosUnit&lt; ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;, Tensor&lt; T, 3 &gt;, true &gt;</name>
    <filename>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>ParticleAttrib&lt; TinyVector&lt; T, 3 &gt; &gt;</type>
      <name>Array_t</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tensor&lt; T, 3 &gt;</type>
      <name>Transformer_t</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Array_t &amp;pin, const Transformer_t &amp;X, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const Transformer_t &amp;X, const Array_t &amp;pin, Array_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(Array_t &amp;pinout, const Transformer_t &amp;X, int first, int last)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structConvertPosUnit_3_01ParticleAttrib_3_01TinyVector_3_01T_00_013_01_4_01_4_00_01Tensor_3_01T_00_013_01_4_00_01true_01_4.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const Transformer_t &amp;X, Array_t &amp;pinout, int first, int last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Cosine3D</name>
    <filename>structCosine3D.html</filename>
    <templarg>T</templarg>
    <templarg>PT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT</type>
      <name>pos_type</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cosine3D</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(value_type kx=0, value_type ky=0, value_type kz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(value_type kx, value_type ky, value_type kz)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>PT</type>
      <name>gradient</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v, PT &amp;gr)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kx</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Ky</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kz</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Knorm2</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Val</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Lap</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pos_type</type>
      <name>Grad</name>
      <anchorfile>structCosine3D.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CreateLeaf&lt; Matrix&lt; T, C &gt; &gt;</name>
    <filename>structCreateLeaf_3_01Matrix_3_01T_00_01C_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>Reference&lt; Matrix&lt; T, C &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>structCreateLeaf_3_01Matrix_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>structCreateLeaf_3_01Matrix_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CreateLeaf&lt; ParticleAttrib&lt; T &gt; &gt;</name>
    <filename>structCreateLeaf_3_01ParticleAttrib_3_01T_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>Reference&lt; ParticleAttrib&lt; T &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>structCreateLeaf_3_01ParticleAttrib_3_01T_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>structCreateLeaf_3_01ParticleAttrib_3_01T_01_4_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CreateLeaf&lt; Vector&lt; T, C &gt; &gt;</name>
    <filename>structCreateLeaf_3_01Vector_3_01T_00_01C_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>Reference&lt; Vector&lt; T, C &gt; &gt;</type>
      <name>Leaf_t</name>
      <anchorfile>structCreateLeaf_3_01Vector_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Leaf_t</type>
      <name>make</name>
      <anchorfile>structCreateLeaf_3_01Vector_3_01T_00_01C_01_4_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CubicSpline</name>
    <filename>classCubicSpline.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicSpline</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T x0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T x0, T &amp;yval)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T x0, T &amp;yval, T &amp;yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int n, T *x, T *y, const T yp1, const T ypn)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Npt</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Yp1</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Ypn</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>X</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>Y</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>Y2</name>
      <anchorfile>classCubicSpline.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::deque</name>
    <filename>classstd_1_1deque.html</filename>
  </compound>
  <compound kind="class">
    <name>std::deque</name>
    <filename>classstd_1_1deque.html</filename>
  </compound>
  <compound kind="struct">
    <name>EwaldSum</name>
    <filename>structEwaldSum.html</filename>
    <templarg>PT</templarg>
    <base>EwaldSumTraits&lt; PT::Scalar_t, false, false &gt;</base>
    <member kind="typedef">
      <type>ParticleBase&lt; PT &gt;</type>
      <name>Particle_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Particle_t::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PtclPairListBase&lt; double, 3 &gt;</type>
      <name>PtclPairList_t</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EwaldSum</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EwaldSum</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleLayout_t &amp;lat, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makecells</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyG</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyR</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>energyR</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const PtclPairList_t &amp;nnlist, int first, int last, const ParticleScalar_t &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Scalar_t</type>
      <name>forcestress</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const ParticleLayout_t &amp;lattice, const ParticlePos_t &amp;r, const ParticleScalar_t &amp;q, ParticlePos_t &amp;f, Tensor_t &amp;stress)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Eps</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Tr_over_Tg</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>maxG</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SingleParticleIndex_t</type>
      <name>maxR</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Rmax</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>acclog</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>g2max</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>x2max</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>sqeps</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>gamrec</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>gamdir</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>s3</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>s4</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Volume</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>E0</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Cg</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar_t</type>
      <name>Cr</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SingleParticleIndex_t &gt;</type>
      <name>RShell</name>
      <anchorfile>structEwaldSum.html</anchorfile>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits</name>
    <filename>structEwaldSumTraits.html</filename>
    <templarg>T</templarg>
    <templarg>EVUNIT</templarg>
    <templarg>AAUNIT</templarg>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits&lt; T, false, false &gt;</name>
    <filename>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EwaldSumTraits</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvE</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvF</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EwaldSumTraits&lt; T, true, true &gt;</name>
    <filename>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>EwaldSumTraits</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvE</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>ConvF</name>
      <anchorfile>structEwaldSumTraits_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FunctorBase</name>
    <filename>structFunctorBase.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
  </compound>
  <compound kind="class">
    <name>GamesXmlParser</name>
    <filename>classGamesXmlParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GamesXmlParser</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GamesXmlParser</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getEigVectors</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>(vector&lt; xmlNodePtr &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getControlParameters</name>
      <anchorfile>classGamesXmlParser.html</anchorfile>
      <anchor>d3</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GaussianCombo</name>
    <filename>structGaussianCombo.html</filename>
    <templarg>T</templarg>
    <base>RadialOrbitalBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianCombo</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int l=0, bool normalized=false, const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianCombo</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>DFactorial</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>L</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormL</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>NormPow</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BasicGaussian &gt;</type>
      <name>gset</name>
      <anchorfile>structGaussianCombo.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">GaussianCombo::BasicGaussian</class>
  </compound>
  <compound kind="struct">
    <name>GaussianCombo::BasicGaussian</name>
    <filename>structGaussianCombo_1_1BasicGaussian.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicGaussian</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T sig, T c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T sig, T c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r2) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T r, T r2) const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Sigma</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Coeff</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>CoeffP</name>
      <anchorfile>structGaussianCombo_1_1BasicGaussian.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GaussianFCHKParser</name>
    <filename>classGaussianFCHKParser.html</filename>
    <base>QMCGaussianParserBase</base>
    <base>OhmmsAsciiParser</base>
    <member kind="function">
      <type></type>
      <name>GaussianFCHKParser</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFCHKParser</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const std::string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGeometry</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGaussianCenters</name>
      <anchorfile>classGaussianFCHKParser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GenericSTO</name>
    <filename>structGenericSTO.html</filename>
    <templarg>T</templarg>
    <base>RadialOrbitalBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int power, T z, T norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericSTO</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int n, int l, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>N</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Power</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Z</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Y</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dY</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2Y</name>
      <anchorfile>structGenericSTO.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GTO2Slater</name>
    <filename>structGTO2Slater.html</filename>
    <member kind="typedef">
      <type>GaussianCombo&lt; double &gt;</type>
      <name>GTOType</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogGrid&lt; double &gt;</type>
      <name>GridType</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTO2Slater</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimize</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType</type>
      <name>myGrid</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>gridPtr</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; string, xmlNodePtr &gt;</type>
      <name>sPtr</name>
      <anchorfile>structGTO2Slater.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO</name>
    <filename>structHDFAttribIO.html</filename>
    <templarg>T</templarg>
    <base>HDFAttribIOBase</base>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(hid_t, const char *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t, const char *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; hsize_t &gt;</name>
    <filename>structHDFAttribIO_3_01hsize__t_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(hsize_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>hsize_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01hsize__t_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; Matrix&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Matrix&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01double_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; Matrix&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Component_t</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Component_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01Matrix_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; ParticleAttrib&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01double_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; ParticleAttrib&lt; int &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01int_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; ParticleAttrib&lt; TinyVector&lt; double, 3 &gt; &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; SingleParticlePos_t &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01ParticleAttrib_3_01TinyVector_3_01double_00_013_01_4_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; std::vector&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ArrayType_t &amp;a, std::vector&lt; int &gt; &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>Dim</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; std::vector&lt; int &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01std_1_1vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; string &gt;</name>
    <filename>structHDFAttribIO_3_01string_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>string</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>str80</name>
      <anchorfile>structHDFAttribIO_3_01string_01_4.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; TriCubicSplineT&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; double &gt;</type>
      <name>Data_t</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Data_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>Data_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01TriCubicSplineT_3_01double_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; Vector&lt; double &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; double &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01double_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; Vector&lt; int &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</filename>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; int &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01int_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIO&lt; Vector&lt; TinyVector&lt; double, D &gt; &gt; &gt;</name>
    <filename>structHDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</filename>
    <templarg>D</templarg>
    <base>HDFAttribIOBase</base>
    <member kind="typedef">
      <type>Vector&lt; TinyVector&lt; double, D &gt; &gt;</type>
      <name>ArrayType_t</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFAttribIO</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ArrayType_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hid_t grp, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>ArrayType_t &amp;</type>
      <name>ref</name>
      <anchorfile>structHDFAttribIO_3_01Vector_3_01TinyVector_3_01double_00_01D_01_4_01_4_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HDFAttribIOBase</name>
    <filename>structHDFAttribIOBase.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>structHDFAttribIOBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(hid_t, const char *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>structHDFAttribIOBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(hid_t, const char *)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Matrix&lt; T, C &gt;, EvalLeaf2 &gt;</name>
    <filename>structLeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01EvalLeaf2_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01EvalLeaf2_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01EvalLeaf2_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;mat, const EvalLeaf2 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Matrix&lt; T, C &gt;, SizeLeaf2 &gt;</name>
    <filename>structLeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01SizeLeaf2_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Matrix_3_01T_00_01C_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;v, const SizeLeaf2 &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; ParticleAttrib&lt; T &gt;, EvalLeaf1 &gt;</name>
    <filename>structLeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01EvalLeaf1_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;vec, const EvalLeaf1 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; ParticleAttrib&lt; T &gt;, SizeLeafPA &gt;</name>
    <filename>structLeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01SizeLeafPA_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01ParticleAttrib_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;v, const SizeLeafPA &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf &gt;</name>
    <filename>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeaf &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeaf2 &gt;</name>
    <filename>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf2_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeaf2_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeaf2 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Scalar&lt; T &gt;, SizeLeafPA &gt;</name>
    <filename>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeafPA_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Scalar_3_01T_01_4_00_01SizeLeafPA_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Scalar&lt; T &gt; &amp;, const SizeLeafPA &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Vector&lt; T, C &gt;, EvalLeaf1 &gt;</name>
    <filename>structLeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01EvalLeaf1_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type_t</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01EvalLeaf1_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;vec, const EvalLeaf1 &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LeafFunctor&lt; Vector&lt; T, C &gt;, SizeLeaf &gt;</name>
    <filename>structLeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01SizeLeaf_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>Type_t</name>
      <anchorfile>structLeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>structLeafFunctor_3_01Vector_3_01T_00_01C_01_4_00_01SizeLeaf_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;v, const SizeLeaf &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LinearGrid</name>
    <filename>structLinearGrid.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>OneDimGridBase</base>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structLinearGrid.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structLinearGrid.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>DeltaInv</name>
      <anchorfile>structLinearGrid.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LogGrid</name>
    <filename>structLogGrid.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>OneDimGridBase</base>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structLogGrid.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structLogGrid.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverLogDelta</name>
      <anchorfile>structLogGrid.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LogGridZero</name>
    <filename>structLogGridZero.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>OneDimGridBase</base>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structLogGridZero.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structLogGridZero.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverA</name>
      <anchorfile>structLogGridZero.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>OneOverB</name>
      <anchorfile>structLogGridZero.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::map</name>
    <filename>classstd_1_1map.html</filename>
  </compound>
  <compound kind="class">
    <name>std::map</name>
    <filename>classstd_1_1map.html</filename>
  </compound>
  <compound kind="class">
    <name>MatGrid1D</name>
    <filename>classMatGrid1D.html</filename>
    <member kind="function">
      <type></type>
      <name>MatGrid1D</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int nsections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Grid1D &amp;aGrid1D, const std::vector&lt; int &gt; &amp;ix, const std::vector&lt; int &gt; &amp;prior, const std::vector&lt; double &gt; &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>prop</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nsecs_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix0_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iaxis</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>d_ivals</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>prior_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>prop_m</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>dx_ivals</name>
      <anchorfile>classMatGrid1D.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix</name>
    <filename>classMatrix.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C::size_type</type>
      <name>size_type</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(size_type n, size_type m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Matrix</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>cols</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size1</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size2</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>extent</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>end</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>end</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Container_t::iterator</type>
      <name>begin</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Container_t::const_iterator</type>
      <name>begin</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(size_type n, size_type m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const Matrix&lt; T, C &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(size_type i, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(size_type i, size_type j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const T1 *sub, size_type d1, size_type d2, size_type i0, size_type j0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const T1 *sub, size_type d1, size_type d2, size_type i0, size_type j0, const T &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const SubMat_t &amp;sub, unsigned int i0, unsigned int j0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const This_t &amp;sub, unsigned int i0, unsigned int j0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>D1</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>D2</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classMatrix.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MinimizeFunction</name>
    <filename>classMinimizeFunction.html</filename>
  </compound>
  <compound kind="struct">
    <name>NDimGrid</name>
    <filename>structNDimGrid.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>CT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structNDimGrid.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; T, CT &gt;</type>
      <name>OneDimGridType</name>
      <anchorfile>structNDimGrid.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>index</name>
      <anchorfile>structNDimGrid.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const PV &amp;pos)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; OneDimGridType * &gt;</type>
      <name>Component</name>
      <anchorfile>structNDimGrid.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Index</name>
      <anchorfile>structNDimGrid.html</anchorfile>
      <anchor>o1</anchor>
      <arglist>[D]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NoBConds</name>
    <filename>structNoBConds.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structNoBConds.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const CrystalLattice&lt; T, D &gt; &amp;lat, const TinyVector&lt; T, D &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NoCuspJastrow</name>
    <filename>structNoCuspJastrow.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>NoCuspJastrow</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T a=1.0, T b=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>A</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>AB2</name>
      <anchorfile>structNoCuspJastrow.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq</name>
    <filename>structNormRandomSeq.html</filename>
    <templarg>VT</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>structNormRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NormRandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</name>
    <filename>structNormRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structNormRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NumericalGrid</name>
    <filename>structNumericalGrid.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <base>OneDimGridBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalGrid</name>
      <anchorfile>structNumericalGrid.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const VA &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structNumericalGrid.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structNumericalGrid.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T ri, T rf, int n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsAsciiParser</name>
    <filename>structOhmmsAsciiParser.html</filename>
    <member kind="function">
      <type>void</type>
      <name>skiplines</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(std::istream &amp;is, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValue</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::istream &amp;is, T &amp;aval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValues</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is, IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>search</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;keyword)</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>dbuffer</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>o0</anchor>
      <arglist>[bufferSize]</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>currentWords</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>bufferSize</name>
      <anchorfile>structOhmmsAsciiParser.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OhmmsAttributeSet</name>
    <filename>structOhmmsAttributeSet.html</filename>
    <base>std::map</base>
    <member kind="function">
      <type></type>
      <name>OhmmsAttributeSet</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsAttributeSet</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(PDT &amp;aparam, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>myNode</name>
      <anchorfile>structOhmmsAttributeSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsElementBase</name>
    <filename>classOhmmsElementBase.html</filename>
    <member kind="enumvalue">
      <name>useLIBXML</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>useLIBXMLPP</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>usePLAIN</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsElementBase</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OhmmsElementBase</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIOMode</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int imode)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(std::ostream &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(std::istream &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>add</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>begin_node</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end_node</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OhmmsElementBase</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const OhmmsElementBase &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>myIOMode</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>myName</name>
      <anchorfile>classOhmmsElementBase.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsInfo</name>
    <filename>classOhmmsInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv, int master=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsInfo</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInfo</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const char *froot, int master)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>die</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Debug</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Warn</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Error</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OhmmsInform *</type>
      <name>Log</name>
      <anchorfile>classOhmmsInfo.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsInform</name>
    <filename>classOhmmsInform.html</filename>
    <member kind="enumvalue">
      <name>OVERWRITE</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPEND</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool allcanwrite=true, bool writenode=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *prompt, bool allcanwrite=true, bool writenode=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *prompt, const char *fname, int appmode=OVERWRITE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const char *prompt, std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OhmmsInform</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *fname, int appmode=OVERWRITE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(OhmmsInform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getStream</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>open</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>thisPrompt</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream *</type>
      <name>thisStream</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OwnStream</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>CanWrite</name>
      <anchorfile>classOhmmsInform.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsIOBase</name>
    <filename>classOhmmsIOBase.html</filename>
    <member kind="function">
      <type></type>
      <name>OhmmsIOBase</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>open</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const char *, ios_base::openmode iomode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int iter)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ios_base::openmode</type>
      <name>Mode</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stride</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>OhmmsIOBase</name>
      <anchorfile>classOhmmsIOBase.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(OhmmsIOBase &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsObject</name>
    <filename>classOhmmsObject.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsObject</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OhmmsObject</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OhmmsObject</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setID</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elementByteSize</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const std::string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObjName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>typeName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>objName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>TypeName</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ObjectID</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ElementByteSize</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static int</type>
      <name>ObjectCounter</name>
      <anchorfile>classOhmmsObject.html</anchorfile>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsParameter</name>
    <filename>classOhmmsParameter.html</filename>
    <templarg>T</templarg>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsParameter</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T &amp;a, const char *aname, const char *uname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>z12_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>ref_</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>z11_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>unit_</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>z11_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>node_</name>
      <anchorfile>classOhmmsParameter.html</anchorfile>
      <anchor>z11_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OhmmsParameter&lt; bool &gt;</name>
    <filename>classOhmmsParameter_3_01bool_01_4.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>OhmmsParameter</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool &amp;a, const char *aname, const char *uname=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool &amp;</type>
      <name>ref_</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>z12_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>unit_</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>z12_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>node_</name>
      <anchorfile>classOhmmsParameter_3_01bool_01_4.html</anchorfile>
      <anchor>z12_2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneDimCubicSpline</name>
    <filename>classOneDimCubicSpline.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(grid_type *gt=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSpline</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y2</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>first_deriv</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>last_deriv</name>
      <anchorfile>classOneDimCubicSpline.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneDimCubicSplineFirst</name>
    <filename>classOneDimCubicSplineFirst.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplineFirst</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplineFirst</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv, bool pbc=true)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_min</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>point_type</type>
      <name>r_max</name>
      <anchorfile>classOneDimCubicSplineFirst.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OneDimCubicSplinePBC</name>
    <filename>classOneDimCubicSplinePBC.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <base>OneDimGridFunctor</base>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>base_type</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::point_type</type>
      <name>point_type</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::data_type</type>
      <name>data_type</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>base_type::grid_type</type>
      <name>grid_type</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplinePBC</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimCubicSplinePBC</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(grid_type *gt, const VV &amp;nv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>splint</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y1</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>First</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Difference</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Length</name>
      <anchorfile>classOneDimCubicSplinePBC.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OneDimGridBase</name>
    <filename>structOneDimGridBase.html</filename>
    <templarg>T</templarg>
    <templarg>CT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CT</type>
      <name>Array_t</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>currentIndex</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dh</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>r</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dr</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmin</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rmax</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFirstOrder</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cubicInterpolateFirst</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(T a, T b, T a1, T b1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cubicInterpolateFirst</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(T a, T b, T a1, T b1, T &amp;du, T &amp;d2u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSecondOrder</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(T r, bool all)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cubicInterpolateSecond</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(T y1, T y2, T d2y1, T d2y2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cubicInterpolateSecond</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(T y1, T y2, T d2y1, T d2y2, T &amp;du, T &amp;d2u)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>locate</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(T r)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(T ri, T rf, int n)=0</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Loc</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Delta</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dL</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dLinv</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>cL</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>cR</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>p1</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>p2</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>q1</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>q2</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dp1</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dq1</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dq2</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2p1</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2q1</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2q2</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array_t</type>
      <name>X</name>
      <anchorfile>structOneDimGridBase.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OneDimGridFunctor</name>
    <filename>structOneDimGridFunctor.html</filename>
    <templarg>Td</templarg>
    <templarg>Tg</templarg>
    <templarg>CTd</templarg>
    <templarg>CTg</templarg>
    <member kind="typedef">
      <type>Td</type>
      <name>value_type</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tg</type>
      <name>point_type</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CTd</type>
      <name>data_type</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; Tg, CTg &gt;</type>
      <name>grid_type</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; Td, Tg, CTd, CTg &gt;</type>
      <name>this_type</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridFunctor</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(grid_type *gt=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OneDimGridFunctor</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimGridFunctor</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const this_type &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const this_type &amp;</type>
      <name>operator=</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const T1 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumOfNodes</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOfNodes</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>data</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type *</type>
      <name>data</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>grid_type &amp;</type>
      <name>grid</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator()</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>data</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>dh</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>r</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>point_type</type>
      <name>dr</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(point_type r, point_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluateAll</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(point_type r, point_type rinv)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>splint</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(point_type r, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual value_type</type>
      <name>splint</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(point_type r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>spline</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(int imin, value_type yp1, int imax, value_type ypn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>spline</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(point_type r, point_type rinv, value_type &amp;du, value_type &amp;d2u)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>grid_type *</type>
      <name>m_grid</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>data_type</type>
      <name>m_Y</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumNodes</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; value_type * &gt;</type>
      <name>FirstAddress</name>
      <anchorfile>structOneDimGridFunctor.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PadeJastrow</name>
    <filename>structPadeJastrow.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>PadeJastrow</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T a=1.0, T b=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>A</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>AB</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B2</name>
      <anchorfile>structPadeJastrow.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PadeJastrow2</name>
    <filename>structPadeJastrow2.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>PadeJastrow2</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T a=1.0, T b=1.0, T c=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T a, T b, T c)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>A</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>C</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>C2</name>
      <anchorfile>structPadeJastrow2.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParameterSet</name>
    <filename>structParameterSet.html</filename>
    <base>OhmmsElementBase</base>
    <base>std::map</base>
    <member kind="function">
      <type></type>
      <name>ParameterSet</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;parameter&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParameterSet</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(PDT &amp;aparam, const char *aname, const char *uname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>structParameterSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;aname, PDT aval)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleAttrib</name>
    <filename>classParticleAttrib.html</filename>
    <templarg>T</templarg>
    <base>OhmmsObject</base>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; T &gt;</type>
      <name>Container_t</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; T &gt;</type>
      <name>This_t</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga0</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga1</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga2</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga3</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParticleAttrib</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin_node</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_node</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z3_0</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>handling ghost elements int</type>
      <name>getNumGhosts</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z3_1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z3_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGhosts</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z3_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGhosts</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z3_4</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z4_0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>set set the unit void</type>
      <name>setUnit</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z4_1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUnit</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z4_2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterators consistent with stl::iterator const_iterator</type>
      <name>begin</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z5_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z5_1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z5_2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>z5_3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>InUnit</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nLocal</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nGhosts</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classParticleAttrib.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParticleBase</name>
    <filename>classParticleBase.html</filename>
    <templarg>PT</templarg>
    <base>ParticleTags</base>
    <member kind="typedef">
      <type>PT::ParticleScalar_t</type>
      <name>ParticleScalar_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z7_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z7_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleTensor_t</type>
      <name>ParticleTensor_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z7_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>containers typedef PT::ParticleIndex_t</type>
      <name>ParticleIndex_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z7_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::ParticleLayout_t</type>
      <name>ParticleLayout_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Index_t</type>
      <name>Index_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Scalar_t</type>
      <name>Scalar_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::SingleParticleIndex_t</type>
      <name>SingleParticleIndex_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT::Tensor_t</type>
      <name>Tensor_t</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; string, OhmmsObject * &gt;::iterator</type>
      <name>PAListIterator</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleBase</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ParticleBase&lt; PT &gt; &amp;P)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleBase</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAttribType</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;tname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>first_attrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PAListIterator</type>
      <name>last_attrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const std::string &amp;attrib_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleIndex_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleScalar_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticlePos_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const vector&lt; int &gt; &amp;agroup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const ParticleBase&lt; PT &gt; &amp;ptclin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNum</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>groups</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(int igroup) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(int igroup) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCounter</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(int i=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z6_0</anchor>
      <arglist>(ParticleTensor_t &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex_t *</type>
      <name>getIndexAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z6_1</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticleScalar_t *</type>
      <name>getScalarAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z6_2</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePos_t *</type>
      <name>getVectorAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z6_3</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ParticleTensor_t *</type>
      <name>getTensorAttrib</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>z6_4</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleLayout_t</type>
      <name>Lattice</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>ID</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleIndex_t</type>
      <name>GroupID</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>R</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticlePos_t</type>
      <name>curR</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initBase</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>LocalNum</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>GlobalNum</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleIndex_t</type>
      <name>SubPtcl</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>AttribTypeMap</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, int &gt;</type>
      <name>Name2Index</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>map&lt; string, OhmmsObject * &gt;</type>
      <name>AttribList</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleIndex_t * &gt;</type>
      <name>INDEX</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleScalar_t * &gt;</type>
      <name>VAL</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticlePos_t * &gt;</type>
      <name>POS</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; ParticleTensor_t * &gt;</type>
      <name>TENZOR</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; OhmmsObject * &gt;</type>
      <name>myAttribList</name>
      <anchorfile>classParticleBase.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ParticleTags</name>
    <filename>structParticleTags.html</filename>
    <member kind="enumvalue">
      <name>PA_IndexType</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_ScalarType</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_StringType</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_PositionType</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PA_TensorType</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>null_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>indextype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>scalartype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>stringtype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>postype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>tensortype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>xmoltype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>position_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>id_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>ionid_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>trajectory_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>force_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>velocity_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>energy_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sumbc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>root_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>attrib_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>name_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>datatype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>condition_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>size_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>format_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>role_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PeriodicBConds</name>
    <filename>structPeriodicBConds.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structPeriodicBConds.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const CrystalLattice&lt; T, D &gt; &amp;lat, const TinyVector&lt; T, D &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PeriodicBConds&lt; T, 3 &gt;</name>
    <filename>structPeriodicBConds_3_01T_00_013_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>structPeriodicBConds_3_01T_00_013_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const CrystalLattice&lt; T, 3 &gt; &amp;lat, const TinyVector&lt; T, 3 &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PooledData</name>
    <filename>classPooledData.html</filename>
    <templarg>T</templarg>
    <base>std::vector</base>
    <member kind="function">
      <type></type>
      <name>PooledData</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PooledData</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const PooledData &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>PooledData&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PooledData&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>current</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(_OutputIterator first, _OutputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(_InputIterator first, _InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>Current</name>
      <anchorfile>classPooledData.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>printTinyVector</name>
    <filename>structprintTinyVector.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>printTinyVector&lt; TinyVector&lt; T, 2 &gt; &gt;</name>
    <filename>structprintTinyVector_3_01TinyVector_3_01T_00_012_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>structprintTinyVector_3_01TinyVector_3_01T_00_012_01_4_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, 2 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>printTinyVector&lt; TinyVector&lt; T, 3 &gt; &gt;</name>
    <filename>structprintTinyVector_3_01TinyVector_3_01T_00_013_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>structprintTinyVector_3_01TinyVector_3_01T_00_013_01_4_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, 3 &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>printTinyVector&lt; TinyVector&lt; T, D &gt; &gt;</name>
    <filename>structprintTinyVector_3_01TinyVector_3_01T_00_01D_01_4_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>structprintTinyVector_3_01TinyVector_3_01T_00_01D_01_4_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::ostream &amp;os, const TinyVector&lt; T, D &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PtclOnLatticeTraits</name>
    <filename>classPtclOnLatticeTraits.html</filename>
  </compound>
  <compound kind="class">
    <name>QDwf</name>
    <filename>classQDwf.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QDwf</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_point</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const posvec_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const posvec_t &amp;r, posvec_t &amp;gradf, double &amp;lapf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>funcz</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>zprime</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(double z)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>X</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>sigx</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>a</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>sigy</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Y0</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>z0</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>Ez</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>VB</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>zB</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>kappa</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>EL</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>psiB</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>onethird</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>fac1</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>fac2</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uGrid1D *</type>
      <name>m_grid</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CubicSpline *</type>
      <name>m_spline</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gsl_mode_t</type>
      <name>mode</name>
      <anchorfile>classQDwf.html</anchorfile>
      <anchor>r17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QMCGaussianParserBase</name>
    <filename>structQMCGaussianParserBase.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>value_type</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::SingleParticlePos_t</type>
      <name>SingleParticlePos_t</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCGaussianParserBase</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCGaussianParserBase</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOccupationNumbers</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGridNode</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createElectronSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createIonSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createBasisSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createCenter</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iat, int _off)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createShell</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int n, int ig, int off_, xmlNodePtr abasis)</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>createDeterminantSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2GridFunctors</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const std::string &amp;fname)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>BohrUnit</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>SpinRestricted</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>IonChargeIndex</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ValenceChargeIndex</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>AtomicNumberIndex</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfAtoms</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfEls</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SpinMultiplicity</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfAlpha</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumberOfBeta</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SizeOfBasisSet</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Title</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisType</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>basisName</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>Normalized</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>CurrentCenter</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet</type>
      <name>IonSystem</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; string &gt;</type>
      <name>GroupName</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gShell</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gNumber</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>gBound</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Occ_alpha</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>Occ_beta</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Qv</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gExp</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gC0</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>gC1</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVal_alpha</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVal_beta</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>EigVec</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>gridPtr</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>o30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; int, std::string &gt;</type>
      <name>IonName</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>gShellType</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::vector&lt; int &gt;</type>
      <name>gShellID</name>
      <anchorfile>structQMCGaussianParserBase.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QMCTraits</name>
    <filename>classQMCTraits.html</filename>
  </compound>
  <compound kind="struct">
    <name>RadialGaussian</name>
    <filename>structRadialGaussian.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RadialGaussian</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialGaussian</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int l, T sig, T norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Sigma</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>structRadialGaussian.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialOrbitalBase</name>
    <filename>structRadialOrbitalBase.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RadialOrbitalBase</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RadialOrbitalBase</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>f</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T r) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>df</name>
      <anchorfile>structRadialOrbitalBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialOrbitalSet</name>
    <filename>structRadialOrbitalSet.html</filename>
    <templarg>T</templarg>
    <base>RadialOrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>~RadialOrbitalSet</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRadialOrbital</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(RadialOrbitalBase&lt; T &gt; *arad)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbitalBase&lt; T &gt; * &gt;</type>
      <name>InFunc</name>
      <anchorfile>structRadialOrbitalSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RadialSTO</name>
    <filename>structRadialSTO.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialSTO</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialSTO</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int n, double z, double norm=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NminusOne</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Z</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Norm</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Y</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dY</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2Y</name>
      <anchorfile>structRadialSTO.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSeq</name>
    <filename>structRandomSeq.html</filename>
    <templarg>VT</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="struct">
    <name>RandomSeq&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>structRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSeq&lt; TinyVector&lt; T, D &gt;, RNG &gt;</name>
    <filename>structRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, D &gt;</type>
      <name>Return_t</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Return_t</type>
      <name>get</name>
      <anchorfile>structRandomSeq_3_01TinyVector_3_01T_00_01D_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(RNG &amp;rng)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSequence</name>
    <filename>structRandomSequence.html</filename>
    <templarg>RA</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="struct">
    <name>RandomSequence&lt; vector&lt; double &gt;, RNG &gt;</name>
    <filename>structRandomSequence_3_01vector_3_01double_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structRandomSequence_3_01vector_3_01double_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(vector&lt; double &gt; &amp;s, RNG &amp;rnd)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomSequence&lt; vector&lt; T &gt;, RNG &gt;</name>
    <filename>structRandomSequence_3_01vector_3_01T_01_4_00_01RNG_01_4.html</filename>
    <templarg>T</templarg>
    <templarg>RNG</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structRandomSequence_3_01vector_3_01T_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(vector&lt; T &gt; &amp;v, RandomVector&lt; T, RNG &gt; &amp;rnd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos</name>
    <filename>classRandomUniformPos.html</filename>
    <templarg>Vec</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos&lt; TinyVector&lt; double, 2 &gt;, RNG &gt;</name>
    <filename>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 2 &gt;</type>
      <name>Return_t</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomUniformPos</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(RNG &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RNG &amp;</type>
      <name>d_engine</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_012_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomUniformPos&lt; TinyVector&lt; double, 3 &gt;, RNG &gt;</name>
    <filename>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</filename>
    <templarg>RNG</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; double, 3 &gt;</type>
      <name>Return_t</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomUniformPos</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(RNG &amp;rg)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RNG &amp;</type>
      <name>d_engine</name>
      <anchorfile>classRandomUniformPos_3_01TinyVector_3_01double_00_013_01_4_00_01RNG_01_4.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RandomVector</name>
    <filename>structRandomVector.html</filename>
    <templarg>VT</templarg>
    <templarg>RNG</templarg>
  </compound>
  <compound kind="class">
    <name>RandRandom</name>
    <filename>classRandRandom.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Return_t</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i=0, int nstr=1, int iseed=-1)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getRandom</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisStreamID</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStreams</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisSeed</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const Return_t</type>
      <name>rand_max_inv</name>
      <anchorfile>classRandRandom.html</anchorfile>
      <anchor>v0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RecordNamedProperty</name>
    <filename>structRecordNamedProperty.html</filename>
    <templarg>T</templarg>
    <base>RecordProperty</base>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordNamedProperty</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecordNamedProperty</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValues</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const char *fileroot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream *</type>
      <name>OutStream</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>Values</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>Name</name>
      <anchorfile>structRecordNamedProperty.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RecordProperty</name>
    <filename>structRecordProperty.html</filename>
    <member kind="function">
      <type></type>
      <name>RecordProperty</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordProperty</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *fileroot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>report</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stride</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>FileName</name>
      <anchorfile>structRecordProperty.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RecordPropertyList</name>
    <filename>classRecordPropertyList.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; RecordProperty * &gt;</type>
      <name>RecordList_t</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RecordPropertyList</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RecordPropertyList</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRecord</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(RecordProperty *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setstride</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RecordProperty * &gt;</type>
      <name>Properties</name>
      <anchorfile>classRecordPropertyList.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RegCubicSpline</name>
    <filename>classRegCubicSpline.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RegCubicSpline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegCubicSpline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T x0)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T x0, T &amp;yval)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T x0, T &amp;yval, T &amp;yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spline</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int n, const T x0, const T dx, const T yp1, const T ypn, T *y)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Npt</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Xmin</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Xmax</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Dx</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>DxInv</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Yp1</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>Ypn</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>h2over6</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; T &gt;</type>
      <name>Y</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; T &gt;</type>
      <name>Y2</name>
      <anchorfile>classRegCubicSpline.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RPAJastrow</name>
    <filename>structRPAJastrow.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RPAJastrow</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T a=1.0, T b=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T a, T b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r, T &amp;dudr, T &amp;d2udr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; T1 &gt; &amp;vlist)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>A</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>A2</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>B</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Finv</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>AFinv_sq</name>
      <anchorfile>structRPAJastrow.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor</name>
    <filename>structSCTFunctor.html</filename>
    <templarg>SCT</templarg>
    <templarg>L</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 1 &gt;</name>
    <filename>structSCTFunctor_3_01SCT_00_011_01_4.html</filename>
    <templarg>SCT</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_011_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_011_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_011_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 2 &gt;</name>
    <filename>structSCTFunctor_3_01SCT_00_012_01_4.html</filename>
    <templarg>SCT</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_012_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_012_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_012_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SCTFunctor&lt; SCT, 3 &gt;</name>
    <filename>structSCTFunctor_3_01SCT_00_013_01_4.html</filename>
    <templarg>SCT</templarg>
    <member kind="typedef">
      <type>SCT::value_type</type>
      <name>value_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_013_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCT::pos_type</type>
      <name>pos_type</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_013_01_4.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>structSCTFunctor_3_01SCT_00_013_01_4.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(std::vector&lt; value_type &gt; &amp;Ylm, std::vector&lt; pos_type &gt; &amp;gYlm, const pos_type &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Sine3D</name>
    <filename>structSine3D.html</filename>
    <templarg>T</templarg>
    <templarg>PT</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PT</type>
      <name>pos_type</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sine3D</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(value_type kx=0, value_type ky=0, value_type kz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(value_type kx, value_type ky, value_type kz)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const PT &amp;r, PT &amp;gr, value_type &amp;lap)</arglist>
    </member>
    <member kind="function">
      <type>PT</type>
      <name>gradient</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const PT &amp;r, value_type &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>laplacian</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const PT &amp;r)</arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kx</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Ky</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Kz</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Knorm2</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Val</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Lap</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pos_type</type>
      <name>Grad</name>
      <anchorfile>structSine3D.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SizeLeaf</name>
    <filename>classSizeLeaf.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeLeaf</name>
      <anchorfile>classSizeLeaf.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf</name>
      <anchorfile>classSizeLeaf.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const SizeLeaf &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classSizeLeaf.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_m</name>
      <anchorfile>classSizeLeaf.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SizeLeaf2</name>
    <filename>classSizeLeaf2.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>classSizeLeaf2.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf2</name>
      <anchorfile>classSizeLeaf2.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(size_type s, size_type p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeaf2</name>
      <anchorfile>classSizeLeaf2.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const SizeLeaf2 &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classSizeLeaf2.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(size_type s, size_type p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>size_m</name>
      <anchorfile>classSizeLeaf2.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_type</type>
      <name>size_n</name>
      <anchorfile>classSizeLeaf2.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SizeLeafPA</name>
    <filename>classSizeLeafPA.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeLeafPA</name>
      <anchorfile>classSizeLeafPA.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SizeLeafPA</name>
      <anchorfile>classSizeLeafPA.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const SizeLeafPA &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classSizeLeafPA.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>size_m</name>
      <anchorfile>classSizeLeafPA.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SlaterCombo</name>
    <filename>structSlaterCombo.html</filename>
    <templarg>T</templarg>
    <base>RadialOrbitalBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; T &gt;</type>
      <name>Component_t</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterCombo</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int l=0, bool normalized=true, const char *node_name=&quot;radfunc&quot;, const char *exp_name=&quot;exponent&quot;, const char *c_name=&quot;contraction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterCombo</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T r, T rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>expName</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>coeffName</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; xmlNodePtr &gt;</type>
      <name>InParam</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Component_t &gt;</type>
      <name>sset</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Y</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dY</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2Y</name>
      <anchorfile>structSlaterCombo.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpeciesBase</name>
    <filename>classSpeciesBase.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar_t</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Scalar_t &gt;</type>
      <name>SpeciesAttrib_t</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; SpeciesAttrib_t * &gt;</type>
      <name>AttribList_t</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesBase</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpeciesBase</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getTotalNum</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNum</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAttributes</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttrib</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>find</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSpeciesID</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>TotalNum</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>Name</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AttribList_t</type>
      <name>d_attrib</name>
      <anchorfile>classSpeciesBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SpeciesSet</name>
    <filename>classSpeciesSet.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar_t</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Scalar_t &gt;</type>
      <name>SpeciesAttrib_t</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SpeciesAttrib_t * &gt;</type>
      <name>AttribList_t</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeciesSet</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SpeciesSet</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNum</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTotalNum</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numAttributes</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSpecies</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAttribute</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const std::string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findSpecies</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>TotalNum</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>speciesName</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>attribName</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AttribList_t</type>
      <name>d_attrib</name>
      <anchorfile>classSpeciesSet.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SphericalTensor</name>
    <filename>classSphericalTensor.html</filename>
    <templarg>T</templarg>
    <templarg>Point_t</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point_t</type>
      <name>pos_type</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; T, Point_t &gt;</type>
      <name>This_t</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalTensor</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int lmax, bool addsign=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateTest</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Point_t &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int l, int m) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>Point_t</type>
      <name>getGradYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int lm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Ylm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>NormFactor</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>FactorLM</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>FactorL</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; value_type &gt;</type>
      <name>Factor2L</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point_t &gt;</type>
      <name>gradYlm</name>
      <anchorfile>classSphericalTensor.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SprngRandom</name>
    <filename>classSprngRandom.html</filename>
    <templarg>rg</templarg>
    <member kind="typedef">
      <type>double</type>
      <name>Return_t</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SprngRandom</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int i, int nstr, int iseed)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getRandom</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator()</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>irand</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bivariate</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(Return_t &amp;g1, Return_t &amp;g2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisStreamID</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nStreams</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>thisSeed</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int *</type>
      <name>thisStream</name>
      <anchorfile>classSprngRandom.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>STONorm</name>
    <filename>structSTONorm.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>STONorm</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int nmax=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int nmax)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int n, T screen)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; T &gt;</type>
      <name>Factorial</name>
      <anchorfile>structSTONorm.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StreamIO</name>
    <filename>classStreamIO.html</filename>
    <templarg>T</templarg>
    <base>OhmmsIOBase</base>
    <member kind="function">
      <type></type>
      <name>StreamIO</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T &amp;a, ios_base::openmode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StreamIO</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const char *fname, ios_mode::openmode mode)</arglist>
    </member>
    <member kind="function">
      <type>inlin void</type>
      <name>setBuffer</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(iostream *ebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T &amp;</type>
      <name>ref_</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>iostream *</type>
      <name>m_buffer</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OwnBuffer</name>
      <anchorfile>classStreamIO.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SymmetricMatrix</name>
    <filename>classSymmetricMatrix.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricMatrix&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(unsigned n, unsigned m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const SymmetricMatrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SymmetricMatrix</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>nrows</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ncols</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(unsigned n, unsigned m)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const SymmetricMatrix&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const SymmetricMatrix&lt; T, C &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>operator[]</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(unsigned int i, unsigned int j) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>D1</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>D2</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classSymmetricMatrix.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tensor</name>
    <filename>classTensor.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElemDim</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Size</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(DontInitialize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const T &amp;x00)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const T &amp;x00, const T &amp;x10, const T &amp;x01, const T &amp;x11)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const T &amp;x00, const T &amp;x10, const T &amp;x20, const T &amp;x01, const T &amp;x11, const T &amp;x21, const T &amp;x02, const T &amp;x12, const T &amp;x22)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const SymTensor&lt; T, D &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const AntiSymTensor&lt; T, D &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tensor</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const Tensor&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const Tensor&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Tensor&lt; T, D &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diagonal</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>len</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(unsigned int i, unsigned int j) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>X</name>
      <anchorfile>classTensor.html</anchorfile>
      <anchor>r0</anchor>
      <arglist>[Size]</arglist>
    </member>
    <class kind="class">Tensor::DontInitialize</class>
  </compound>
  <compound kind="class">
    <name>Tensor::DontInitialize</name>
    <filename>classTensor_1_1DontInitialize.html</filename>
  </compound>
  <compound kind="struct">
    <name>TestFunc</name>
    <filename>structTestFunc.html</filename>
    <member kind="function">
      <type></type>
      <name>TestFunc</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int nk0=1, int nk1=1, int nk2=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const TinyVector&lt; double, 3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2f</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k0</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k1</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>k2</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d2factor</name>
      <anchorfile>structTestFunc.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TestTransform</name>
    <filename>structTestTransform.html</filename>
    <templarg>FnIn</templarg>
    <templarg>FnOut</templarg>
    <member kind="typedef">
      <type>FnOut::value_type</type>
      <name>value_type</name>
      <anchorfile>structTestTransform.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FnOut::point_type</type>
      <name>point_type</name>
      <anchorfile>structTestTransform.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>check</name>
      <anchorfile>structTestTransform.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(FnIn &amp;af, FnOut &amp;nf, point_type ri, point_type rf, int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TinyMatrixRef</name>
    <filename>classTinyMatrixRef.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *datain, int d1, int d2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(TinyMatrix&lt; T, N, M &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(unsigned int i, unsigned int j) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TinyMatrixRef</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>D1</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>D2</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classTinyMatrixRef.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TinyVector</name>
    <filename>classTinyVector.html</filename>
    <templarg>T</templarg>
    <templarg>D</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Size</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(DontInitialize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const TinyVector&lt; T1, D1 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const T &amp;x00)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const T &amp;x00, const T &amp;x01, const T &amp;x02, const T &amp;x03)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TinyVector</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>byteSize</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const TinyVector&lt; T, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const TinyVector&lt; T1, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TinyVector&lt; T, D &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>begin</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>begin</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>end</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>end</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>X</name>
      <anchorfile>classTinyVector.html</anchorfile>
      <anchor>r0</anchor>
      <arglist>[Size]</arglist>
    </member>
    <class kind="class">TinyVector::DontInitialize</class>
  </compound>
  <compound kind="class">
    <name>TinyVector::DontInitialize</name>
    <filename>classTinyVector_1_1DontInitialize.html</filename>
  </compound>
  <compound kind="struct">
    <name>Transform2GridFunctor</name>
    <filename>structTransform2GridFunctor.html</filename>
    <templarg>FnIn</templarg>
    <templarg>FnOut</templarg>
    <base>Transform2GridFunctorBase</base>
    <member kind="typedef">
      <type>FnIn::value_type</type>
      <name>result_t</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FnOut::point_type</type>
      <name>point_type</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform2GridFunctor</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(FnIn &amp;in, FnOut &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(point_type ri, point_type rf, int ng, int np=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(point_type rf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int np=0)</arglist>
    </member>
    <member kind="variable">
      <type>FnIn &amp;</type>
      <name>in_</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FnOut &amp;</type>
      <name>out_</name>
      <anchorfile>structTransform2GridFunctor.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Transform2GridFunctorBase</name>
    <filename>structTransform2GridFunctorBase.html</filename>
    <templarg>FnOut</templarg>
    <member kind="typedef">
      <type>FnOut::point_type</type>
      <name>point_type</name>
      <anchorfile>structTransform2GridFunctorBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctorBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(point_type ri, point_type rf, int ng, int np=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>structTransform2GridFunctorBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int np=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriCubicSplineT</name>
    <filename>classTriCubicSplineT.html</filename>
    <templarg>T</templarg>
    <templarg>Tg</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tg</type>
      <name>point_type</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>XYZCubicGrid&lt; Tg &gt;</type>
      <name>GridType</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; T, Tg &gt;</type>
      <name>ThisType</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::KnotType</type>
      <name>KnotType</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::Grid1DType</type>
      <name>Grid1DType</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriCubicSplineT</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(GridType *agrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridManager</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(bool willmanage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(bool periodic=true)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const PV &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const PV &amp;r, PV &amp;gradf, T &amp;lapf)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>GridManager</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UpToDate</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nX</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nY</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nZ</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n001</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n010</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n011</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n100</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n101</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n110</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n111</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GridType *</type>
      <name>m_grid</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; KnotType &gt;</type>
      <name>F</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateX</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(int source, int target, bool periodic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateY</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(int source, int target, bool periodic)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>UpdateZ</name>
      <anchorfile>classTriCubicSplineT.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>(int source, int target, bool periodic)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UOverRN</name>
    <filename>structUOverRN.html</filename>
    <templarg>Rin</templarg>
    <member kind="typedef">
      <type>Rin::value_type</type>
      <name>value_type</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rin::point_type</type>
      <name>point_type</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UOverRN</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int x, Rin &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UOverRN</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setgrid</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(value_type r)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(value_type r, value_type rinv)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>evaluate</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(value_type r, value_type rinv, value_type &amp;drnl, value_type &amp;d2rnl)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>X</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>Y</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>dY</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>d2Y</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Rin &amp;</type>
      <name>U</name>
      <anchorfile>structUOverRN.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::vector</name>
    <filename>classstd_1_1vector.html</filename>
  </compound>
  <compound kind="class">
    <name>Vector</name>
    <filename>classVector.html</filename>
    <templarg>T</templarg>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type_t</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container_t</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; T, C &gt;</type>
      <name>This_t</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const Vector&lt; T, C &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>This_t &amp;</type>
      <name>operator=</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Type_t *</type>
      <name>data</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Type_t *</type>
      <name>data</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator[]</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Type_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Type_t</type>
      <name>operator()</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container_t</type>
      <name>X</name>
      <anchorfile>classVector.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>std::vector</name>
    <filename>classstd_1_1vector.html</filename>
  </compound>
  <compound kind="struct">
    <name>VectorRef</name>
    <filename>structVectorRef.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorRef</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T *datain)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>dptr</name>
      <anchorfile>structVectorRef.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>XYZCubicGrid</name>
    <filename>structXYZCubicGrid.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>TinyVector&lt; T, 8 &gt;</type>
      <name>KnotType</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridBase&lt; T &gt;</type>
      <name>Grid1DType</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>p2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>q1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>q2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dp1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dq1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dp2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dq2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>d2p1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>d2q1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>d2p2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>d2q2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZCubicGrid</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XYZCubicGrid</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(Grid1DType *xgrid, Grid1DType *ygrid, Grid1DType *zgrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridXYZ</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(Grid1DType *xgrid, Grid1DType *ygrid, Grid1DType *zgrid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBC</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(bool pbc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int i, int j, int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(T x, T y, T z, bool updateall)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(bool all)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const KnotType &amp;f000, const KnotType &amp;f001, const KnotType &amp;f010, const KnotType &amp;f011, const KnotType &amp;f100, const KnotType &amp;f101, const KnotType &amp;f110, const KnotType &amp;f111)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const KnotType &amp;f000, const KnotType &amp;f001, const KnotType &amp;f010, const KnotType &amp;f011, const KnotType &amp;f100, const KnotType &amp;f101, const KnotType &amp;f110, const KnotType &amp;f111)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Periodic</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Loc</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ix</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iy</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iz</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nX</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nY</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nZ</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x_min</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x_max</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>LengthX</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y_min</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y_max</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>LengthY</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>z_min</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>z_max</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>LengthZ</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>h</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>k</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>l</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>hinv</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>kinv</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>linv</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>u</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>v</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>w</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>val</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfX</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfY</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>gradfZ</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>lapf</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>c0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>c1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>c2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>c3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>da0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>da1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>da2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>da3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>db0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>db1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>db2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>db3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dc0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dc1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dc2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>dc3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2a0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2a1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2a2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2a3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2b0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2b1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2b2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2b3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2c0</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2c1</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2c2</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>d2c3</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridX</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridY</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid1DType *</type>
      <name>gridZ</name>
      <anchorfile>structXYZCubicGrid.html</anchorfile>
      <anchor>o69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>bool</name>
    <filename>classbool.html</filename>
  </compound>
  <compound kind="class">
    <name>containers typedef PtclOnLatticeTraits::ParticleIndex_t</name>
    <filename>classcontainers_01typedef_01PtclOnLatticeTraits_1_1ParticleIndex__t.html</filename>
  </compound>
  <compound kind="class">
    <name>int</name>
    <filename>classint.html</filename>
  </compound>
  <compound kind="class">
    <name>map&lt; string, int &gt;</name>
    <filename>classmap_3_01string_00_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>map&lt; string, OhmmsObject * &gt;</name>
    <filename>classmap_3_01string_00_01OhmmsObject_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>ParticlePos_t</name>
    <filename>classParticlePos__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ParticlePos_t</name>
    <filename>classParticlePos__t.html</filename>
  </compound>
  <compound kind="class">
    <name>ParticleSet::RealType</name>
    <filename>classParticleSet_1_1RealType.html</filename>
  </compound>
  <compound kind="class">
    <name>RealType</name>
    <filename>classRealType.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; OhmmsObject * &gt;</name>
    <filename>classvector_3_01OhmmsObject_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticleIndex_t * &gt;</name>
    <filename>classvector_3_01ParticleIndex__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticlePos_t * &gt;</name>
    <filename>classvector_3_01ParticlePos__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticleScalar_t * &gt;</name>
    <filename>classvector_3_01ParticleScalar__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>vector&lt; ParticleTensor_t * &gt;</name>
    <filename>classvector_3_01ParticleTensor__t_01_5_01_4.html</filename>
  </compound>
  <compound kind="group">
    <name>XMLTags</name>
    <title>Reserved XML tags</title>
    <filename>group__XMLTags.html</filename>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>null_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>indextype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>scalartype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>stringtype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>postype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>tensortype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>xmoltype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>position_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>id_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>ionid_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>trajectory_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>force_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>velocity_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>energy_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sumbc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>root_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>attrib_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>name_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>datatype_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>condition_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>size_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>format_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>role_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>wfs_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>param_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>dtable_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>jastrow_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>detset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sd_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>det_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>spo_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basis_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisfunc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PtclAttribConst</name>
    <title>Constructors of ParticleAttrib</title>
    <filename>group__PtclAttribConst.html</filename>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga0</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga1</anchor>
      <arglist>(const std::string &amp;tname, const std::string &amp;oname, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga2</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAttrib</name>
      <anchorfile>group__PtclAttribConst.html</anchorfile>
      <anchor>ga3</anchor>
      <arglist>(const ParticleAttrib&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nnlist</name>
    <title>Distance-table group</title>
    <filename>group__nnlist.html</filename>
    <class kind="struct">ohmmsqmc::AsymmetricDTD</class>
    <class kind="struct">NoBConds</class>
    <class kind="struct">PeriodicBConds</class>
    <class kind="class">ohmmsqmc::DistanceTable</class>
    <class kind="class">ohmmsqmc::DistanceTableData</class>
    <class kind="struct">ohmmsqmc::SymmetricDTD</class>
  </compound>
  <compound kind="group">
    <name>OrbitalComponent</name>
    <title>Orbital group</title>
    <filename>group__OrbitalComponent.html</filename>
    <class kind="class">ohmmsqmc::MultiSlaterDeterminant</class>
    <class kind="class">ohmmsqmc::OneBodyJastrow</class>
    <class kind="struct">ohmmsqmc::OrbitalBase</class>
    <class kind="class">ohmmsqmc::SlaterDeterminant</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow&lt; FT, false &gt;</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow&lt; FT, true &gt;</class>
  </compound>
  <compound kind="group">
    <name>WFSBuilder</name>
    <title>Orbital builder group</title>
    <filename>group__WFSBuilder.html</filename>
    <class kind="struct">ohmmsqmc::JastrowBuilder</class>
    <class kind="class">ohmmsqmc::OrbitalBuilderBase</class>
  </compound>
  <compound kind="group">
    <name>MBWfs</name>
    <title>Many-body wave function group</title>
    <filename>group__MBWfs.html</filename>
    <class kind="class">ohmmsqmc::TrialWaveFunction</class>
  </compound>
  <compound kind="group">
    <name>hamiltonian</name>
    <title>Hamiltonian group</title>
    <filename>group__hamiltonian.html</filename>
    <class kind="struct">ohmmsqmc::BareKineticEnergy</class>
    <class kind="struct">ohmmsqmc::CoulombPotentialAB</class>
    <class kind="struct">ohmmsqmc::CoulombPotentialAA</class>
    <class kind="struct">ohmmsqmc::IonIonPotential</class>
    <class kind="struct">ohmmsqmc::LocalCorePolPotential</class>
    <class kind="struct">ohmmsqmc::LocalPPotential</class>
    <class kind="struct">ohmmsqmc::NonLocalPPotential</class>
    <class kind="struct">ohmmsqmc::QMCHamiltonianBase</class>
  </compound>
  <compound kind="group">
    <name>QMCDrivers</name>
    <title>QMC Driver group</title>
    <filename>group__QMCDrivers.html</filename>
    <class kind="class">ohmmsqmc::DMCParticleByParticle</class>
    <class kind="class">ohmmsqmc::DummyQMC</class>
    <class kind="class">ohmmsqmc::MolecuDMC</class>
    <class kind="class">ohmmsqmc::QMCDriver</class>
    <class kind="class">ohmmsqmc::ReptationMC</class>
    <class kind="class">ohmmsqmc::RQMCMultiple</class>
    <class kind="class">ohmmsqmc::VMC</class>
    <class kind="class">ohmmsqmc::VMC_OPT</class>
    <class kind="class">ohmmsqmc::VMCMultiple</class>
    <class kind="class">ohmmsqmc::VMCParticleByParticle</class>
    <class kind="class">ohmmsqmc::VMCPbyPMultiple</class>
  </compound>
  <compound kind="group">
    <name>WalkerByWalker</name>
    <title>QMC Drivers using walker-by-walker update</title>
    <filename>group__WalkerByWalker.html</filename>
    <class kind="class">ohmmsqmc::MolecuDMC</class>
    <class kind="class">ohmmsqmc::VMC</class>
    <class kind="class">ohmmsqmc::VMCMultiple</class>
  </compound>
  <compound kind="group">
    <name>ParticleByParticle</name>
    <title>QMC Drivers using particle-by-particle update</title>
    <filename>group__ParticleByParticle.html</filename>
    <class kind="class">ohmmsqmc::DMCParticleByParticle</class>
    <class kind="class">ohmmsqmc::VMCParticleByParticle</class>
    <class kind="class">ohmmsqmc::VMCPbyPMultiple</class>
  </compound>
  <compound kind="group">
    <name>MultiplePsi</name>
    <title>QMC Drivers for energy differences</title>
    <filename>group__MultiplePsi.html</filename>
    <class kind="class">ohmmsqmc::RQMCMultiple</class>
    <class kind="class">ohmmsqmc::VMCMultiple</class>
    <class kind="class">ohmmsqmc::VMCPbyPMultiple</class>
  </compound>
  <compound kind="group">
    <name>qmcapp</name>
    <title>QMC Application Group</title>
    <filename>group__qmcapp.html</filename>
    <file>qmcapp.cpp</file>
    <class kind="class">ohmmsqmc::HamiltonianPool</class>
    <class kind="class">ohmmsqmc::ParticleSetPool</class>
    <class kind="class">ohmmsqmc::QMCAppBase</class>
    <class kind="class">ohmmsqmc::QMCMain</class>
    <class kind="class">ohmmsqmc::WaveFunctionPool</class>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</path>
    <filename>dir_000011.html</filename>
    <file>HeSTOClementiRottie.cpp</file>
    <file>HeSTOClementiRottie.h</file>
    <file>HFAtomicSTOSet.cpp</file>
    <file>HFAtomicSTOSet.h</file>
    <file>HFAtomicSTOSetBuilder.cpp</file>
    <file>HFAtomicSTOSetBuilder.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</path>
    <filename>dir_000012.html</filename>
    <file>LocalEnergyEstimator.h</file>
    <file>MultipleEnergyEstimator.cpp</file>
    <file>MultipleEnergyEstimator.h</file>
    <file>PolarizationEstimator.h</file>
    <file>ScalarEstimatorBase.h</file>
    <file>ScalarEstimatorManager.cpp</file>
    <file>ScalarEstimatorManager.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</path>
    <filename>dir_000002.html</filename>
    <file>Any2GridBuilder.cpp</file>
    <file>Any2GridBuilder.h</file>
    <file>GridMolecularOrbitals.cpp</file>
    <file>GridMolecularOrbitals.h</file>
    <file>GTO2GridBuilder.cpp</file>
    <file>GTO2GridBuilder.h</file>
    <file>GTOMolecularOrbitals.cpp</file>
    <file>GTOMolecularOrbitals.h</file>
    <file>MolecularOrbitalBasis.h</file>
    <file>MolecularOrbitalBuilder.cpp</file>
    <file>MolecularOrbitalBuilder.h</file>
    <file>NumericalMolecularOrbitals.cpp</file>
    <file>NumericalMolecularOrbitals.h</file>
    <file>NumericalRGFBuilder.cpp</file>
    <file>NumericalRGFBuilder.h</file>
    <file>RGFBuilderBase.cpp</file>
    <file>RGFBuilderBase.h</file>
    <file>STO2GridBuilder.cpp</file>
    <file>STO2GridBuilder.h</file>
    <file>STOMolecularOrbitals.cpp</file>
    <file>STOMolecularOrbitals.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</path>
    <filename>dir_000007.html</filename>
    <file>Blasf.h</file>
    <file>Clebsch_Gordan.cpp</file>
    <file>Clebsch_Gordan.h</file>
    <file>ConstScale.h</file>
    <file>CosineFunction.h</file>
    <file>CubicSplineFunctions.cpp</file>
    <file>CubicSplineFunctions.h</file>
    <file>DeterminantOperators.h</file>
    <file>GaussianBasisSet.h</file>
    <file>GaussianTypeOrbital.h</file>
    <file>HDFNumericAttrib.h</file>
    <file>HDFSTLAttrib.h</file>
    <file>HDFTriCubicSpline.h</file>
    <file>LibxmlNumericIO.h</file>
    <file>MatGrid1D.h</file>
    <file>NDimGridBase.h</file>
    <file>NRSplineFunctions.h</file>
    <file>OhmmsBlas.cpp</file>
    <file>OhmmsBlas.h</file>
    <file>OneDimCubicSpline.h</file>
    <file>OneDimGridBase.h</file>
    <file>OneDimGridFunctor.h</file>
    <file>OneDimIntegration.h</file>
    <file>RadialFunctorUtility.h</file>
    <file>RadialOrbitalBase.h</file>
    <file>SlaterBasisSet.h</file>
    <file>SlaterTypeOrbital.h</file>
    <file>SphericalTensor.h</file>
    <file>test.h</file>
    <file>Transform2GridFunctor.h</file>
    <file>TriCubicSplineT.h</file>
    <file>UOverRN.h</file>
    <file>XYZCubicGrid.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</path>
    <filename>dir_000015.html</filename>
    <file>ProjectData.cpp</file>
    <file>ProjectData.h</file>
    <file>RandomNumberControl.cpp</file>
    <file>RandomNumberControl.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</path>
    <filename>dir_000005.html</filename>
    <file>AttributeSet.h</file>
    <file>DataParserTemplate.h</file>
    <file>DOMProcessor.h</file>
    <file>FileUtility.h</file>
    <file>HDFAttribIO.h</file>
    <file>libxmldefs.h</file>
    <file>OhmmsElementBase.h</file>
    <file>OhmmsIOBase.h</file>
    <file>OhmmsParameter.h</file>
    <file>ParameterSet.h</file>
    <file>RecordProperty.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</path>
    <filename>dir_000013.html</filename>
    <file>OhmmsMatrix.h</file>
    <file>OhmmsMatrixOperators.h</file>
    <file>OhmmsSymmetricMatrix.h</file>
    <file>OhmmsVector.h</file>
    <file>OhmmsVectorOperators.h</file>
    <file>OhmmsVectorRef.h</file>
    <file>Tensor.h</file>
    <file>TinyMatrixRef.h</file>
    <file>TinyVector.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</path>
    <filename>dir_000004.html</filename>
    <file>AsymmetricDistanceTableData.h</file>
    <file>DistanceTable.cpp</file>
    <file>DistanceTable.h</file>
    <file>DistanceTableData.h</file>
    <file>extfunct.h</file>
    <file>FastParticleOperators.h</file>
    <file>HDFParticleAttrib.h</file>
    <file>HDFWalkerIO.cpp</file>
    <file>HDFWalkerIO.h</file>
    <file>MCWalkerConfiguration.cpp</file>
    <file>MCWalkerConfiguration.h</file>
    <file>ParticleSet.BC.cpp</file>
    <file>ParticleSet.cpp</file>
    <file>ParticleSet.h</file>
    <file>PLayoutFunctions.h</file>
    <file>SymmetricDistanceTableData.h</file>
    <file>Walker.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</path>
    <filename>dir_000014.html</filename>
    <file>ParticleAttrib.cpp</file>
    <file>ParticleAttrib.h</file>
    <file>ParticleBase.cpp</file>
    <file>ParticleBase.h</file>
    <file>ParticleFunctions.h</file>
    <file>ParticleMessage.h</file>
    <file>ParticleUtility.h</file>
    <file>RandomSeqGenerator.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</path>
    <filename>dir_000010.html</filename>
    <file>HamiltonianPool.cpp</file>
    <file>HamiltonianPool.h</file>
    <file>InitMolecularSystem.cpp</file>
    <file>InitMolecularSystem.h</file>
    <file>MO2Grid3D.cpp</file>
    <file>MO2Grid3D.h</file>
    <file>mo2grid3d_main.cpp</file>
    <file>ParticleSetPool.cpp</file>
    <file>ParticleSetPool.h</file>
    <file>qmcapp.cpp</file>
    <file>QMCAppBase.cpp</file>
    <file>QMCAppBase.h</file>
    <file>QMCMain.cpp</file>
    <file>QMCMain.h</file>
    <file>WaveFunctionPool.cpp</file>
    <file>WaveFunctionPool.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</path>
    <filename>dir_000009.html</filename>
    <file>DMCParticleByParticle.cpp</file>
    <file>DMCParticleByParticle.h</file>
    <file>DummyQMC.cpp</file>
    <file>DummyQMC.h</file>
    <file>MolecuDMC.cpp</file>
    <file>MolecuDMC.h</file>
    <file>MolecuFixedNodeBranch.h</file>
    <file>MultiChain.h</file>
    <file>PolymerChain.h</file>
    <file>PolymerEstimator.cpp</file>
    <file>PolymerEstimator.h</file>
    <file>QMCDriver.cpp</file>
    <file>QMCDriver.h</file>
    <file>ReptationMC.cpp</file>
    <file>ReptationMC.h</file>
    <file>RQMCMultiple.cpp</file>
    <file>RQMCMultiple.h</file>
    <file>VMC.cpp</file>
    <file>VMC.h</file>
    <file>VMC_OPT.cpp</file>
    <file>VMC_OPT.h</file>
    <file>VMCMoveAll.cpp</file>
    <file>VMCMoveAll.h</file>
    <file>VMCMultiple.cpp</file>
    <file>VMCMultiple.h</file>
    <file>VMCParticleByParticle.cpp</file>
    <file>VMCParticleByParticle.h</file>
    <file>VMCPbyPMultiple.cpp</file>
    <file>VMCPbyPMultiple.h</file>
    <file>WaveFunctionTester.cpp</file>
    <file>WaveFunctionTester.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</path>
    <filename>dir_000006.html</filename>
    <file>BareKineticEnergy.h</file>
    <file>ConservedEnergy.h</file>
    <file>CoulombPotential.h</file>
    <file>EffMKineticEnergy.h</file>
    <file>EwaldSum.h</file>
    <file>HarmonicPotential.h</file>
    <file>IonIonPotential.h</file>
    <file>LocalCorePolPotential.cpp</file>
    <file>LocalCorePolPotential.h</file>
    <file>LocalPPotential.cpp</file>
    <file>LocalPPotential.h</file>
    <file>NonLocalPPotential.cpp</file>
    <file>NonLocalPPotential.h</file>
    <file>PolarizationPotential.h</file>
    <file>QMCHamiltonian.cpp</file>
    <file>QMCHamiltonian.h</file>
    <file>QMCHamiltonianBase.h</file>
    <file>Spline3DPotential.h</file>
    <file>TriCubicSplinePotential.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</path>
    <filename>dir_000003.html</filename>
    <file>Any2Slater.h</file>
    <file>Assign.cpp</file>
    <file>CasinoParser.cpp</file>
    <file>CasinoParser.h</file>
    <file>GamesXmlParser.cpp</file>
    <file>GamesXmlParser.h</file>
    <file>GaussianFCHKParser.cpp</file>
    <file>GaussianFCHKParser.h</file>
    <file>gto2grid.cpp</file>
    <file>gto2slater.cpp</file>
    <file>parse.cpp</file>
    <file>PC.cpp</file>
    <file>QMCGaussianParserBase.cpp</file>
    <file>QMCGaussianParserBase.h</file>
    <file>QMCUtilities.h</file>
    <file>spline.cpp</file>
    <file>spline3.cpp</file>
    <file>spline3_io.cpp</file>
    <file>ylmtest.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</path>
    <filename>dir_000001.html</filename>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/AtomicOrbitals/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/MolecularOrbitals/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/Spline3D/</dir>
    <file>ChebyshevJastrow.h</file>
    <file>DetSetBuilderWithBasisSet.h</file>
    <file>DiracDeterminant.h</file>
    <file>JastrowBuilder.cpp</file>
    <file>JastrowBuilder.h</file>
    <file>LCOrbitals.h</file>
    <file>MultiSlaterDeterminant.h</file>
    <file>NoCuspJastrow.h</file>
    <file>NumericalOrbitalSetBuilder.cpp</file>
    <file>NumericalOrbitalSetBuilder.h</file>
    <file>OneBodyJastrowFunction.h</file>
    <file>OrbitalBase.h</file>
    <file>OrbitalBuilderBase.cpp</file>
    <file>OrbitalBuilderBase.h</file>
    <file>PadeJastrow.h</file>
    <file>PolarizedJastrow.h</file>
    <file>QDwf.cpp</file>
    <file>QDwf.h</file>
    <file>QDwfBuilder.cpp</file>
    <file>QDwfBuilder.h</file>
    <file>RadialOrbitalManager.cpp</file>
    <file>RadialOrbitalManager.h</file>
    <file>RPAJastrow.h</file>
    <file>SingleParticleOrbitalSet.h</file>
    <file>SlaterDeterminant.h</file>
    <file>SphericalOrbitalSet.h</file>
    <file>SPOSetBase.h</file>
    <file>TrialWaveFunction.cpp</file>
    <file>TrialWaveFunction.h</file>
    <file>TriCubicSplineBuilder.cpp</file>
    <file>TriCubicSplineBuilder.h</file>
    <file>TwoBodyJastrowFunction.h</file>
    <file>TwoBodyJastrowFunction.Shared.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/Spline3D/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/Spline3D/</path>
    <filename>dir_000016.html</filename>
    <file>Spline3DBuilder.cpp</file>
    <file>Spline3DBuilder.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/</path>
    <filename>dir_000000.html</filename>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/Estimators/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/Numerics/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsApp/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsData/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/OhmmsPETE/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/Particle/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/ParticleBase/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCApp/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCDrivers/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCHamiltonians/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCTools/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/QMCWaveFunctions/</dir>
    <dir>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</dir>
    <file>ParticleTags.cpp</file>
    <file>ParticleTags.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</name>
    <path>/home/jnkim/qmcPlusPlus/v0.2/src/Utilities/</path>
    <filename>dir_000008.html</filename>
    <file>BoostRandom.h</file>
    <file>Clock.h</file>
    <file>IteratorUtility.h</file>
    <file>OhmmsInfo.cpp</file>
    <file>OhmmsInfo.h</file>
    <file>OhmmsInform.cpp</file>
    <file>OhmmsInform.h</file>
    <file>OhmmsObject.cpp</file>
    <file>OhmmsObject.h</file>
    <file>OhmmsSpecies.cpp</file>
    <file>OhmmsSpecies.h</file>
    <file>PooledData.h</file>
    <file>RandomFunctors.h</file>
    <file>RandomGenerator.cpp</file>
    <file>RandomGenerator.h</file>
    <file>RandRandom.cpp</file>
    <file>RandRandom.h</file>
    <file>SimpleParser.cpp</file>
    <file>SimpleParser.h</file>
    <file>SpeciesSet.cpp</file>
    <file>SpeciesSet.h</file>
    <file>SprngRandom.h</file>
    <file>UtilityFunctions.h</file>
    <file>XMLTemplate.h</file>
  </compound>
  <compound kind="namespace">
    <name>OHMMS</name>
    <filename>namespaceOHMMS.html</filename>
    <class kind="struct">OHMMS::PLayoutFunc</class>
    <class kind="struct">OHMMS::ProjectData</class>
    <class kind="class">OHMMS::RandomNumberControl</class>
    <member kind="function">
      <type>void</type>
      <name>printXML</name>
      <anchorfile>namespaceOHMMS.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const T &amp;, ostream &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OHMMS::PLayoutFunc</name>
    <filename>structOHMMS_1_1PLayoutFunc.html</filename>
    <base>PtclOnLatticeTraits</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBC</name>
      <anchorfile>structOHMMS_1_1PLayoutFunc.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const ParticleLayout_t &amp;Lattice, const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>applyBC</name>
      <anchorfile>structOHMMS_1_1PLayoutFunc.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const ParticleLayout_t &amp;Lattice, ParticlePos_t &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OHMMS::ProjectData</name>
    <filename>structOHMMS_1_1ProjectData.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>ProjectData</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;project&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>CurrentRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>NextRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>PreviousRoot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(string &amp;oldroot) const </arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_title</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_user</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_host</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_date</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_projectroot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>m_nextroot</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_series</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>m_cur</name>
      <anchorfile>structOHMMS_1_1ProjectData.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OHMMS::RandomNumberControl</name>
    <filename>classOHMMS_1_1RandomNumberControl.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>RandomNumberControl</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;random&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>initialize</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlXPathContextPtr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>NeverBeenInitialized</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlNodePtr</type>
      <name>myCur</name>
      <anchorfile>classOHMMS_1_1RandomNumberControl.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ohmmsqmc</name>
    <filename>namespaceohmmsqmc.html</filename>
    <class kind="struct">ohmmsqmc::AsymmetricDTD</class>
    <class kind="class">ohmmsqmc::DistanceTable</class>
    <class kind="struct">ohmmsqmc::TempDisplacement</class>
    <class kind="class">ohmmsqmc::DistanceTableData</class>
    <class kind="class">ohmmsqmc::HDFWalkerOutput</class>
    <class kind="class">ohmmsqmc::HDFWalkerInput</class>
    <class kind="class">ohmmsqmc::MCWalkerConfiguration</class>
    <class kind="class">ohmmsqmc::ParticleSet</class>
    <class kind="struct">ohmmsqmc::SymmetricDTD</class>
    <class kind="struct">ohmmsqmc::Walker</class>
    <class kind="struct">ohmmsqmc::HePresetHF</class>
    <class kind="struct">ohmmsqmc::HePresetHFBuilder</class>
    <class kind="struct">ohmmsqmc::ComboSTO</class>
    <class kind="struct">ohmmsqmc::HFAtomicSTOSet</class>
    <class kind="class">ohmmsqmc::HFAtomicSTOSetBuilder</class>
    <class kind="struct">ohmmsqmc::DetSetBuilderWithBasisSet</class>
    <class kind="struct">ohmmsqmc::DiracDeterminant</class>
    <class kind="struct">ohmmsqmc::JastrowBuilder</class>
    <class kind="class">ohmmsqmc::LCOrbitals</class>
    <class kind="struct">ohmmsqmc::PadeOrbital</class>
    <class kind="struct">ohmmsqmc::Any2GridBuilder</class>
    <class kind="class">ohmmsqmc::GridMolecularOrbitals</class>
    <class kind="struct">ohmmsqmc::GTO2GridBuilder</class>
    <class kind="class">ohmmsqmc::GTOMolecularOrbitals</class>
    <class kind="class">ohmmsqmc::MolecularOrbitalBasis</class>
    <class kind="struct">ohmmsqmc::MolecularOrbitalBuilder</class>
    <class kind="class">ohmmsqmc::NumericalMolecularOrbitals</class>
    <class kind="struct">ohmmsqmc::NumericalRGFBuilder</class>
    <class kind="struct">ohmmsqmc::RGFBuilderBase</class>
    <class kind="struct">ohmmsqmc::STO2GridBuilder</class>
    <class kind="class">ohmmsqmc::STOMolecularOrbitals</class>
    <class kind="class">ohmmsqmc::MultiSlaterDeterminant</class>
    <class kind="class">ohmmsqmc::NumericalOrbitalSetBuilder</class>
    <class kind="class">ohmmsqmc::OneBodyJastrow</class>
    <class kind="struct">ohmmsqmc::OrbitalBase</class>
    <class kind="class">ohmmsqmc::OrbitalBuilderBase</class>
    <class kind="class">ohmmsqmc::PolarizedJastrow</class>
    <class kind="class">ohmmsqmc::QDwfBuilder</class>
    <class kind="struct">ohmmsqmc::RadialOrbitalManager</class>
    <class kind="struct">ohmmsqmc::SingleParticleOrbitalSet</class>
    <class kind="class">ohmmsqmc::SlaterDeterminant</class>
    <class kind="struct">ohmmsqmc::DummyGrid</class>
    <class kind="struct">ohmmsqmc::SphericalOrbitalSet</class>
    <class kind="class">ohmmsqmc::Spline3DBuilder</class>
    <class kind="struct">ohmmsqmc::SPOSetBase</class>
    <class kind="class">ohmmsqmc::TrialWaveFunction</class>
    <class kind="class">ohmmsqmc::TriCubicSplineBuilder</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow&lt; FT, false &gt;</class>
    <class kind="class">ohmmsqmc::TwoBodyJastrow&lt; FT, true &gt;</class>
    <class kind="struct">ohmmsqmc::BareKineticEnergy</class>
    <class kind="struct">ohmmsqmc::ConservedEnergy</class>
    <class kind="struct">ohmmsqmc::CoulombPotentialAB</class>
    <class kind="struct">ohmmsqmc::CoulombPotentialAA</class>
    <class kind="struct">ohmmsqmc::EffMKineticEnergy</class>
    <class kind="struct">ohmmsqmc::HarmonicPotential</class>
    <class kind="struct">ohmmsqmc::IonIonPotential</class>
    <class kind="struct">ohmmsqmc::LocalCorePolPotential</class>
    <class kind="struct">ohmmsqmc::LocalPPotential</class>
    <class kind="struct">ohmmsqmc::NonLocalPPotential</class>
    <class kind="struct">ohmmsqmc::PolarizationPotential</class>
    <class kind="class">ohmmsqmc::QMCHamiltonian</class>
    <class kind="struct">ohmmsqmc::QMCHamiltonianBase</class>
    <class kind="struct">ohmmsqmc::Spline3DPotential</class>
    <class kind="struct">ohmmsqmc::TriCubicSplinePotential</class>
    <class kind="class">ohmmsqmc::LocalEnergyEstimator</class>
    <class kind="struct">ohmmsqmc::MultipleEnergyEstimator</class>
    <class kind="class">ohmmsqmc::PolarizationEstimator</class>
    <class kind="struct">ohmmsqmc::ScalarEstimatorBase</class>
    <class kind="class">ohmmsqmc::ScalarEstimatorManager</class>
    <class kind="class">ohmmsqmc::DMCParticleByParticle</class>
    <class kind="class">ohmmsqmc::DummyQMC</class>
    <class kind="class">ohmmsqmc::MolecuDMC</class>
    <class kind="class">ohmmsqmc::MolecuFixedNodeBranch</class>
    <class kind="struct">ohmmsqmc::Bead</class>
    <class kind="struct">ohmmsqmc::MultiChain</class>
    <class kind="struct">ohmmsqmc::PolymerChain</class>
    <class kind="class">ohmmsqmc::PolymerEstimator</class>
    <class kind="class">ohmmsqmc::QMCDriver</class>
    <class kind="class">ohmmsqmc::ReptationMC</class>
    <class kind="class">ohmmsqmc::RQMCMultiple</class>
    <class kind="class">ohmmsqmc::VMC</class>
    <class kind="class">ohmmsqmc::VMC_OPT</class>
    <class kind="class">ohmmsqmc::VMCMoveAll</class>
    <class kind="class">ohmmsqmc::VMCMultiple</class>
    <class kind="class">ohmmsqmc::VMCParticleByParticle</class>
    <class kind="class">ohmmsqmc::VMCPbyPMultiple</class>
    <class kind="class">ohmmsqmc::WaveFunctionTester</class>
    <class kind="class">ohmmsqmc::HamiltonianPool</class>
    <class kind="class">ohmmsqmc::InitMolecularSystem</class>
    <class kind="class">ohmmsqmc::MO2Grid3D</class>
    <class kind="class">ohmmsqmc::ParticleSetPool</class>
    <class kind="class">ohmmsqmc::QMCAppBase</class>
    <class kind="class">ohmmsqmc::QMCMain</class>
    <class kind="class">ohmmsqmc::WaveFunctionPool</class>
    <member kind="typedef">
      <type>TinyVector&lt; int, 4 &gt;</type>
      <name>QuantumNumberType</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGPSI</name>
      <anchor>a15a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGN</name>
      <anchor>a15a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMBRELLAWEIGHT</name>
      <anchor>a15a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALENERGY</name>
      <anchor>a15a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCALPOTENTIAL</name>
      <anchor>a15a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMPROPERTIES</name>
      <anchor>a15a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_n</name>
      <anchor>a16a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_l</name>
      <anchor>a16a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_m</name>
      <anchor>a16a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>q_s</name>
      <anchor>a16a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ostream &amp;out, const Walker&lt; T, PA &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(std::ostream &amp;out, const ComboSTO&lt; T, POS &gt; &amp;asto)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>determineNumOfElectrons</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;el, xmlXPathContextPtr acontext)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_iter</name>
      <anchorfile>namespaceohmmsqmc.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(IT first, IT last)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::AsymmetricDTD</name>
    <filename>structohmmsqmc_1_1AsymmetricDTD.html</filename>
    <templarg>BC</templarg>
    <base>ohmmsqmc::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>AsymmetricDTD</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int n1, int n2, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const WalkerSetRef &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet &amp;</type>
      <name>Target</name>
      <anchorfile>structohmmsqmc_1_1AsymmetricDTD.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::DistanceTable</name>
    <filename>classohmmsqmc_1_1DistanceTable.html</filename>
    <member kind="typedef">
      <type>ParticleSet::Scalar_t</type>
      <name>RealType</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleSet::SingleParticlePos_t</type>
      <name>PosType</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const ParticleSet &amp;s, const char *aname=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const ParticleSet &amp;s, const ParticleSet &amp;t, const char *aname=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceTableData *</type>
      <name>getTable</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceTableData *</type>
      <name>getTable</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const char *atable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getTables</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(int ptag, vector&lt; DistanceTableData * &gt; &amp;tables)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>updated</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(ParticleSet &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(WalkerSetRef &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copyToBuffer</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DistanceTable</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static vector&lt; bool &gt;</type>
      <name>Updated</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>z8_0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static vector&lt; DistanceTableData * &gt;</type>
      <name>TableList</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>z8_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static vector&lt; int &gt;</type>
      <name>VisitorID</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>z8_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static map&lt; string, int &gt;</type>
      <name>TableMap</name>
      <anchorfile>classohmmsqmc_1_1DistanceTable.html</anchorfile>
      <anchor>z8_3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::TempDisplacement</name>
    <filename>structohmmsqmc_1_1TempDisplacement.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>TempDisplacement</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r0</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r1</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv0</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rinv1</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, N &gt;</type>
      <name>dr0</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; T, N &gt;</type>
      <name>dr1</name>
      <anchorfile>structohmmsqmc_1_1TempDisplacement.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::DistanceTableData</name>
    <filename>classohmmsqmc_1_1DistanceTableData.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type>const ParticleSet &amp;</type>
      <name>origin</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>access functions to the inverse of the distance and directional consine vector PosType</type>
      <name>dr</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_1</anchor>
      <arglist>(int iw, int iat) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>r</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_2</anchor>
      <arglist>(int iw, int iat) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>rinv</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_3</anchor>
      <arglist>(int iw, int iat) const </arglist>
    </member>
    <member kind="function">
      <type>PosType</type>
      <name>dr</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_4</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>r</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_5</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>rinv</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_6</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="variable">
      <type>access functions to the</type>
      <name>distance</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z9_7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z10_0</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>*std::vector&lt; PosType &gt;</type>
      <name>dr_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z10_1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealType &gt;</type>
      <name>r_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z10_2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; RealType &gt;</type>
      <name>rinv_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>z10_3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>IndexVectorType</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TempDisplacement&lt; RealType, 3 &gt;</type>
      <name>TempDistType</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; RealType &gt;</type>
      <name>BufferType</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WalkerIndex</name>
      <anchor>w7w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SourceIndex</name>
      <anchor>w7w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VisitorIndex</name>
      <anchor>w7w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PairIndex</name>
      <anchor>w7w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceTableData</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceTableData</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>centers</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>getTotNadj</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>nadj</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>iadj</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>loc</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const WalkerSetRef &amp;W)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(IndexType jat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>create</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int walkers)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(BufferType &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>std::bitset&lt; 4 &gt;</type>
      <name>Status</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>activePtcl</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; IndexType, 3 &gt;</type>
      <name>N</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>M</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>J</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IndexVectorType</type>
      <name>PairID</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; IndexType &gt;</type>
      <name>IJ</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; TempDistType &gt;</type>
      <name>Temp</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(int npairs, int nw=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ParticleSet &amp;</type>
      <name>Origin</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>npairs_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; PosType &gt;</type>
      <name>dr2_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>r2_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix&lt; RealType &gt;</type>
      <name>rinv2_m</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DistanceTableData</name>
      <anchorfile>classohmmsqmc_1_1DistanceTableData.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const DistanceTableData &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::HDFWalkerOutput</name>
    <filename>classohmmsqmc_1_1HDFWalkerOutput.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerOutput</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;fname, bool append=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerOutput</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(MCWalkerConfiguration &amp;)</arglist>
    </member>
    <member kind="function">
      <type>hid_t</type>
      <name>getGroupID</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>AppendMode</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_file</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_config</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerOutput.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::HDFWalkerInput</name>
    <filename>classohmmsqmc_1_1HDFWalkerInput.html</filename>
    <member kind="function">
      <type></type>
      <name>HDFWalkerInput</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFWalkerInput</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(MCWalkerConfiguration &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(MCWalkerConfiguration &amp;, int ic)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hsize_t</type>
      <name>NumSets</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_file</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>hid_t</type>
      <name>h_config</name>
      <anchorfile>classohmmsqmc_1_1HDFWalkerInput.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::MCWalkerConfiguration</name>
    <filename>classohmmsqmc_1_1MCWalkerConfiguration.html</filename>
    <base>ohmmsqmc::ParticleSet</base>
    <member kind="typedef">
      <type>Walker&lt; RealType, ParticlePos_t &gt;</type>
      <name>Walker_t</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Walker_t::PropertyContainer_t</type>
      <name>PropertyContainer_t</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>WalkerList_t</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WalkerList_t::iterator</type>
      <name>iterator</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WalkerList_t::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Update_All</name>
      <anchor>w8w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Update_Walker</name>
      <anchor>w8w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Update_Particle</name>
      <anchor>w8w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCWalkerConfiguration</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MCWalkerConfiguration</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const MCWalkerConfiguration &amp;mcw)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MCWalkerConfiguration</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createWalkers</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int numWalkers)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>destroyWalkers</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyWalkerRefs</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(Walker_t *head, Walker_t *tail)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int numWalkers, int numPtcls)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(iterator it, RealType tauinv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getActiveWalkers</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParticleNum</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateMode</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int updatemode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalEnergy</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(RealType e)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getLocalEnergy</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int maxcopy, int Nmax, int Nmin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadWalker</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(Walker_t &amp;awalker)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createAuxDataSet</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(int nfield=256)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(Walker_t &amp;awalker, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyToBuffer</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetWalkerProperty</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int ncopy=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>OwnWalkers</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ReadyForPbyP</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>UpdateMode</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>LocalEnergy</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WalkerList_t</type>
      <name>WalkerList</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initPropertyList</name>
      <anchorfile>classohmmsqmc_1_1MCWalkerConfiguration.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::ParticleSet</name>
    <filename>classohmmsqmc_1_1ParticleSet.html</filename>
    <base>QMCTraits</base>
    <base>OhmmsElementBase</base>
    <base>ParticleBase&lt; PtclOnLatticeTraits &gt;</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; GradType &gt;</type>
      <name>ParticleGradient_t</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; ValueType &gt;</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ParticleSet &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iflag=0)</arglist>
    </member>
    <member kind="function">
      <type>SpeciesSet &amp;</type>
      <name>getSpeciesSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SpeciesSet &amp;</type>
      <name>getSpeciesSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tag</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SingleParticlePos_t</type>
      <name>makeMove</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(Index_t iat, const SingleParticlePos_t &amp;displ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceptMove</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(Index_t iat)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addProperty</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Unit</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert2Cart</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(ParticlePos_t &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBC</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const ParticlePos_t &amp;pin, ParticlePos_t &amp;pout, int first, int last)</arglist>
    </member>
    <member kind="variable">
      <type>ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpeciesSet</type>
      <name>mySpecies</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initParticleSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>ObjectTag</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index_t</type>
      <name>activePtcl</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SingleParticlePos_t</type>
      <name>activePos</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; DistanceTableData * &gt;</type>
      <name>DistTables</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>PropertyList</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static Index_t</type>
      <name>PtclObjectCounter</name>
      <anchorfile>classohmmsqmc_1_1ParticleSet.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::SymmetricDTD</name>
    <filename>structohmmsqmc_1_1SymmetricDTD.html</filename>
    <templarg>BC</templarg>
    <base>ohmmsqmc::DistanceTableData</base>
    <member kind="function">
      <type></type>
      <name>SymmetricDTD</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ParticleSet &amp;source, const ParticleSet &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int walkers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int m, int nactive)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const WalkerSetRef &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleSet &amp;P, const PosType &amp;rnew, IndexType jat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structohmmsqmc_1_1SymmetricDTD.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(IndexType jat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::Walker</name>
    <filename>structohmmsqmc_1_1Walker.html</filename>
    <templarg>T</templarg>
    <templarg>PA</templarg>
    <templarg>GA</templarg>
    <member kind="typedef">
      <type>Matrix&lt; T &gt;</type>
      <name>PropertyContainer_t</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PooledData&lt; T &gt;</type>
      <name>Buffer_t</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Walker</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Walker</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Walker &amp;</type>
      <name>operator=</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopy</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Walker &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T *restrict</type>
      <name>getPropertyBase</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProperty</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(T logpsi, T sigN, T ene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willDie</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeProperty</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int n, int m)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Age</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Weight</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Multiplicity</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PropertyContainer_t</type>
      <name>Properties</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PA</type>
      <name>R</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GA</type>
      <name>Drift</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Buffer_t</type>
      <name>DataSet</name>
      <anchorfile>structohmmsqmc_1_1Walker.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::HePresetHF</name>
    <filename>structohmmsqmc_1_1HePresetHF.html</filename>
    <base>QMCTraits</base>
    <member kind="enumvalue">
      <name>N</name>
      <anchor>w1w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HePresetHF</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi, GV &amp;dphi, VV &amp;d2phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(DistanceTableData *dtable)</arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>C</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>Z</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TinyVector&lt; RealType, N &gt;</type>
      <name>ZZ</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structohmmsqmc_1_1HePresetHF.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::HePresetHFBuilder</name>
    <filename>structohmmsqmc_1_1HePresetHFBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>HePresetHFBuilder</name>
      <anchorfile>structohmmsqmc_1_1HePresetHFBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1HePresetHFBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::ComboSTO</name>
    <filename>structohmmsqmc_1_1ComboSTO.html</filename>
    <templarg>T</templarg>
    <templarg>POS</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; T, POS &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; T &gt;</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboSTO</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ComboSTO &amp;aSTO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComboSTO</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int lm, SphericalHarmonics_t &amp;ylm, const vector&lt; RadialOrbital_t * &gt; &amp;rnl, T *c)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>f</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>df</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T r)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(T r, T rinv, T &amp;drnl, T &amp;d2rnl)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(T r, T rinv, const POS &amp;dr, POS &amp;dy, T &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>Name</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LM</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t &amp;</type>
      <name>Ylm</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>Rnl</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; T &gt;</type>
      <name>C</name>
      <anchorfile>structohmmsqmc_1_1ComboSTO.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::HFAtomicSTOSet</name>
    <filename>structohmmsqmc_1_1HFAtomicSTOSet.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>SphericalTensor&lt; RealType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericSTO&lt; RealType &gt;</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ComboSTO&lt; RealType, PosType &gt;</type>
      <name>SPO_t</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSet</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSet</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int lmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;phi, GV &amp;dphi, VV &amp;d2phi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(DistanceTableData *dtable)</arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>RnlPool</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SPO_t * &gt;</type>
      <name>Orbital</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structohmmsqmc_1_1HFAtomicSTOSet.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::HFAtomicSTOSetBuilder</name>
    <filename>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>HFAtomicSTOSetBuilder</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HFAtomicSTOSet::RadialOrbital_t</type>
      <name>RadialOrbital_t</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>HFAtomicSTOSet::SPO_t</type>
      <name>SPO_t</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>getBasis</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>HFAtomicSTOSet *</type>
      <name>getOrbital</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Lmax</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RadialOrbital_t * &gt;</type>
      <name>Rnl</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, SPO_t * &gt;</type>
      <name>OrbSet</name>
      <anchorfile>classohmmsqmc_1_1HFAtomicSTOSetBuilder.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::DetSetBuilderWithBasisSet</name>
    <filename>structohmmsqmc_1_1DetSetBuilderWithBasisSet.html</filename>
    <templarg>BasisBuilderT</templarg>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>DetSetBuilderWithBasisSet</name>
      <anchorfile>structohmmsqmc_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, BasisBuilderT &amp;abuilder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>BasisBuilderT &amp;</type>
      <name>builder_ref</name>
      <anchorfile>structohmmsqmc_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcl</name>
      <anchorfile>structohmmsqmc_1_1DetSetBuilderWithBasisSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::DiracDeterminant</name>
    <filename>structohmmsqmc_1_1DiracDeterminant.html</filename>
    <templarg>SPOSet</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Determinant_t</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; GradType &gt;</type>
      <name>Gradient_t</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Laplacian_t</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminant</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(SPOSet &amp;spos, int first=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiracDeterminant</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiracDeterminant</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const DiracDeterminant&lt; SPOSet &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiracDeterminant&lt; SPOSet &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const DiracDeterminant&lt; SPOSet &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int first, int nel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int nel, int morb)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rows</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cols</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NP</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstIndex</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>LastIndex</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SPOSet &amp;</type>
      <name>Phi</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>WorkingIndex</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>CurrentDet</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiM</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiM_temp</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Determinant_t</type>
      <name>psiMinv</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dpsiM</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Gradient_t</type>
      <name>dpsiM_temp</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2psiM</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Laplacian_t</type>
      <name>d2psiM_temp</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>psiV</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GradType &gt;</type>
      <name>dpsiV</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>d2psiV</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>workV1</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ValueType &gt;</type>
      <name>workV2</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Determinant_t &gt;</type>
      <name>psiM_v</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Gradient_t &gt;</type>
      <name>dpsiM_v</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Laplacian_t &gt;</type>
      <name>d2psiM_v</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>curRatio</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>cumRatio</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfG</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfG</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>FirstAddressOfdV</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType *</type>
      <name>LastAddressOfdV</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>myG_temp</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>myL_temp</name>
      <anchorfile>structohmmsqmc_1_1DiracDeterminant.html</anchorfile>
      <anchor>o30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::JastrowBuilder</name>
    <filename>structohmmsqmc_1_1JastrowBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JastrowBuilder</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createTwoBodySpin</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur, JeeType *j2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createTwoBodyNoSpin</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur, JeeType *j2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createOneBody</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur, JneType *j1)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>corr_tag</name>
      <anchorfile>structohmmsqmc_1_1JastrowBuilder.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::LCOrbitals</name>
    <filename>classohmmsqmc_1_1LCOrbitals.html</filename>
    <templarg>BS</templarg>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>BS::RealType</type>
      <name>RealType</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::PosType</type>
      <name>PosType</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::GradType</type>
      <name>GradType</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LCOrbitals</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(BS *bs, int id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LCOrbitals</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numOrbitals</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBasis</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, int jorb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ParticleSet &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ParticleSet &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const WalkerSetRef &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Identity</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ID</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>BasisSize</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BS *</type>
      <name>BasisSet</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>C</name>
      <anchorfile>classohmmsqmc_1_1LCOrbitals.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::PadeOrbital</name>
    <filename>structohmmsqmc_1_1PadeOrbital.html</filename>
    <templarg>T</templarg>
    <base>RadialOrbitalBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PadeOrbital</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *node_name=&quot;radfunc&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PadeOrbital</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>f</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>df</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(value_type r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a0</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a1</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a2</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a3</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>rcut</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>nodeName</name>
      <anchorfile>structohmmsqmc_1_1PadeOrbital.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::Any2GridBuilder</name>
    <filename>structohmmsqmc_1_1Any2GridBuilder.html</filename>
    <base>ohmmsqmc::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>Any2GridBuilder</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGaussian</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSlater</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPade</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>m_rcut</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>QuantumNumberType</type>
      <name>m_nlms</name>
      <anchorfile>structohmmsqmc_1_1Any2GridBuilder.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::GridMolecularOrbitals</name>
    <filename>classohmmsqmc_1_1GridMolecularOrbitals.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; ValueType &gt;</type>
      <name>GridType</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MolecularOrbitalBasis&lt; CenteredOrbitalType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridMolecularOrbitals</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;psi, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetType *</type>
      <name>addBasisSet</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="enumvalue">
      <name>DONOT_EXPAND</name>
      <anchor>y3y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAUSSIAN_EXPAND</name>
      <anchor>y3y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_EXPAND</name>
      <anchor>y3y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, CenteredOrbitalType *aos, xmlNodePtr cur1, int expandlm=DONOT_EXPAND)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>BasisSet</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RGFBuilderBase *</type>
      <name>rbuilder</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>CenterID</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>classohmmsqmc_1_1GridMolecularOrbitals.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::GTO2GridBuilder</name>
    <filename>structohmmsqmc_1_1GTO2GridBuilder.html</filename>
    <base>ohmmsqmc::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>GTO2GridBuilder</name>
      <anchorfile>structohmmsqmc_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool normalized=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structohmmsqmc_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>structohmmsqmc_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structohmmsqmc_1_1GTO2GridBuilder.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::GTOMolecularOrbitals</name>
    <filename>classohmmsqmc_1_1GTOMolecularOrbitals.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>GaussianCombo&lt; ValueType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MolecularOrbitalBasis&lt; CenteredOrbitalType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTOMolecularOrbitals</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TrialWaveFunction &amp;wfs, ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetType *</type>
      <name>addBasisSet</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>BasisSet</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>CenterID</name>
      <anchorfile>classohmmsqmc_1_1GTOMolecularOrbitals.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::MolecularOrbitalBasis</name>
    <filename>classohmmsqmc_1_1MolecularOrbitalBasis.html</filename>
    <templarg>COT</templarg>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBasis</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTable</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int nptcl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int nw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateAll</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const WalkerSetRef &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(COT *aos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>y</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const GradType *restrict</type>
      <name>dy</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>d2y</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>y</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="function">
      <type>const GradType *restrict</type>
      <name>dy</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType *restrict</type>
      <name>d2y</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int iw, int ia)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumPtcls</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>TotalBasis</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>I</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>Basis</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; COT * &gt;</type>
      <name>AOs</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>Y</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; GradType &gt;</type>
      <name>dY</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ValueType &gt;</type>
      <name>d2Y</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>classohmmsqmc_1_1MolecularOrbitalBasis.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::MolecularOrbitalBuilder</name>
    <filename>structohmmsqmc_1_1MolecularOrbitalBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PtclPoolType</name>
      <anchorfile>structohmmsqmc_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MolecularOrbitalBuilder</name>
      <anchorfile>structohmmsqmc_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi, PtclPoolType &amp;psets)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putSpecial</name>
      <anchorfile>structohmmsqmc_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putOpen</name>
      <anchorfile>structohmmsqmc_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;fname_in)</arglist>
    </member>
    <member kind="variable">
      <type>PtclPoolType &amp;</type>
      <name>ptclPool</name>
      <anchorfile>structohmmsqmc_1_1MolecularOrbitalBuilder.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::NumericalMolecularOrbitals</name>
    <filename>classohmmsqmc_1_1NumericalMolecularOrbitals.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalMolecularOrbitals</name>
      <anchorfile>classohmmsqmc_1_1NumericalMolecularOrbitals.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1NumericalMolecularOrbitals.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GridMolecularOrbitals *</type>
      <name>Original</name>
      <anchorfile>classohmmsqmc_1_1NumericalMolecularOrbitals.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::NumericalRGFBuilder</name>
    <filename>structohmmsqmc_1_1NumericalRGFBuilder.html</filename>
    <base>ohmmsqmc::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>NumericalRGFBuilder</name>
      <anchorfile>structohmmsqmc_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addGrid</name>
      <anchorfile>structohmmsqmc_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structohmmsqmc_1_1NumericalRGFBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::RGFBuilderBase</name>
    <filename>structohmmsqmc_1_1RGFBuilderBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; RealType &gt;</type>
      <name>GridType</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType, GridType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RGFBuilderBase</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RGFBuilderBase</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrbitalSet</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(CenteredOrbitalType *oset, const std::string &amp;acenter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>addGrid</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const std::string &amp;aroot, int omode)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_species</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CenteredOrbitalType *</type>
      <name>m_orbitals</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>m_file_id</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hid_t</type>
      <name>m_group_id</name>
      <anchorfile>structohmmsqmc_1_1RGFBuilderBase.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::STO2GridBuilder</name>
    <filename>structohmmsqmc_1_1STO2GridBuilder.html</filename>
    <base>ohmmsqmc::RGFBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>STO2GridBuilder</name>
      <anchorfile>structohmmsqmc_1_1STO2GridBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRadialOrbital</name>
      <anchorfile>structohmmsqmc_1_1STO2GridBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur, const QuantumNumberType &amp;nlms)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::STOMolecularOrbitals</name>
    <filename>classohmmsqmc_1_1STOMolecularOrbitals.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>SlaterCombo&lt; RealType &gt;</type>
      <name>RadialOrbitalType</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalOrbitalSet&lt; RadialOrbitalType &gt;</type>
      <name>CenteredOrbitalType</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MolecularOrbitalBasis&lt; CenteredOrbitalType &gt;</type>
      <name>BasisSetType</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STOMolecularOrbitals</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;els, TrialWaveFunction &amp;wfs, ParticleSet &amp;ions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>BasisSetType *</type>
      <name>addBasisSet</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="enumvalue">
      <name>DONOT_EXPAND</name>
      <anchor>y3y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GAUSSIAN_EXPAND</name>
      <anchor>y3y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NATURAL_EXPAND</name>
      <anchor>y3y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>expandYlm</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const string &amp;rnl, const QuantumNumberType &amp;nlms, int num, CenteredOrbitalType *aos, xmlNodePtr cur1, bool expandlm)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BasisSetType *</type>
      <name>BasisSet</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>RnlID</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>CenterID</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, int &gt;</type>
      <name>nlms_id</name>
      <anchorfile>classohmmsqmc_1_1STOMolecularOrbitals.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::MultiSlaterDeterminant</name>
    <filename>classohmmsqmc_1_1MultiSlaterDeterminant.html</filename>
    <templarg>SPOSet</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="typedef">
      <type>SlaterDeterminant&lt; SPOSet &gt;</type>
      <name>DeterminantSet_t</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiSlaterDeterminant</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiSlaterDeterminant</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(DeterminantSet_t *sdet, RealType c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initParameters</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; DeterminantSet_t * &gt;</type>
      <name>SDets</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>C</name>
      <anchorfile>classohmmsqmc_1_1MultiSlaterDeterminant.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::NumericalOrbitalSetBuilder</name>
    <filename>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="typedef">
      <type>TriCubicSplineT&lt; ValueType, RealType &gt;</type>
      <name>SPOType</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SingleParticleOrbitalSet&lt; SPOType &gt;</type>
      <name>SPOSetType</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NumericalOrbitalSetBuilder</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TrialWaveFunction &amp;wfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addSlaterDeterminantSet</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initOrbitalSet</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SPOSetType *</type>
      <name>createSPOSet</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SPOType *</type>
      <name>createSPO</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>d3</anchor>
      <arglist>(const string &amp;srcfile, int iorb)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>XYZCubicGrid&lt; RealType &gt; *</type>
      <name>GridXYZ</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classohmmsqmc_1_1NumericalOrbitalSetBuilder.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::OneBodyJastrow</name>
    <filename>classohmmsqmc_1_1OneBodyJastrow.html</filename>
    <templarg>FT</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneBodyJastrow</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;els, DistanceTableData *dt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneBodyJastrow</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curVal</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>curLap</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradType</type>
      <name>curGrad</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classohmmsqmc_1_1OneBodyJastrow.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::OrbitalBase</name>
    <filename>structohmmsqmc_1_1OrbitalBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; ValueType &gt;</type>
      <name>ValueVectorType</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; GradType &gt;</type>
      <name>GradVectorType</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SourceIndex</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VisitorIndex</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WalkerIndex</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalBase</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OrbitalBase</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizable</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(bool optimizeit)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeByWalkers</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restore</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>ratio</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ValueType</type>
      <name>registerData</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyFromBuffer</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)=0</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Optimizable</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>LogValue</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>SignValue</name>
      <anchorfile>structohmmsqmc_1_1OrbitalBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::OrbitalBuilderBase</name>
    <filename>classohmmsqmc_1_1OrbitalBuilderBase.html</filename>
    <member kind="typedef">
      <type>TrialWaveFunction::RealType</type>
      <name>RealType</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::PosType</type>
      <name>PosType</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TrialWaveFunction::GradType</type>
      <name>GradType</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrbitalBuilderBase</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;p, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>wfs_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>param_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>dtable_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>jastrow_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>detset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>sd_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>det_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>spo_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisset_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basis_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::string</type>
      <name>basisfunc_tag</name>
      <anchorfile>group__XMLTags.html</anchorfile>
      <anchor>ga13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet &amp;</type>
      <name>targetPtcl</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>targetPsi</name>
      <anchorfile>classohmmsqmc_1_1OrbitalBuilderBase.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::PolarizedJastrow</name>
    <filename>classohmmsqmc_1_1PolarizedJastrow.html</filename>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="function">
      <type></type>
      <name>PolarizedJastrow</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolarizedJastrow</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur, VarRegistry&lt; RealType &gt; &amp;vlist)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="variable">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alpha</name>
      <anchorfile>classohmmsqmc_1_1PolarizedJastrow.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::QDwfBuilder</name>
    <filename>classohmmsqmc_1_1QDwfBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>QDwfBuilder</name>
      <anchorfile>classohmmsqmc_1_1QDwfBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TrialWaveFunction &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1QDwfBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SingleParticleOrbitalSet&lt; QDwf &gt;</type>
      <name>SPOSet_t</name>
      <anchorfile>classohmmsqmc_1_1QDwfBuilder.html</anchorfile>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::RadialOrbitalManager</name>
    <filename>structohmmsqmc_1_1RadialOrbitalManager.html</filename>
    <base>QMCTraits</base>
    <member kind="function">
      <type></type>
      <name>RadialOrbitalManager</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putBasisGroup</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr parent, xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>putGrid</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Need2Transform</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Normalized</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>L</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OhmmsAttributeSet</type>
      <name>groupAttrib</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>radFuncType</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RadialOrbitalSet&lt; ValueType &gt;</type>
      <name>InFunc</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>OutFunc</name>
      <anchorfile>structohmmsqmc_1_1RadialOrbitalManager.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::SingleParticleOrbitalSet</name>
    <filename>structohmmsqmc_1_1SingleParticleOrbitalSet.html</filename>
    <templarg>OT</templarg>
    <member kind="typedef">
      <type>OT</type>
      <name>SPOrbital_t</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OT::value_type</type>
      <name>value_type</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleParticleOrbitalSet</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(SPOrbital_t *afunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const PTCL &amp;P, int iat, VV &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const PTCL &amp;P, int iat, VV &amp;psi, GV &amp;dpsi, VV &amp;d2psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const PTCL &amp;P, int first, int last, VM &amp;logdet, GM &amp;dlogdet, VM &amp;d2logdet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const WREF &amp;W, int first, int last, vector&lt; VM &gt; &amp;logdet, vector&lt; GM &gt; &amp;dlogdet, vector&lt; VM &gt; &amp;d2logdet)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; SPOrbital_t * &gt;</type>
      <name>Phi</name>
      <anchorfile>structohmmsqmc_1_1SingleParticleOrbitalSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::SlaterDeterminant</name>
    <filename>classohmmsqmc_1_1SlaterDeterminant.html</filename>
    <templarg>SPOSet</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="typedef">
      <type>DiracDeterminant&lt; SPOSet &gt;</type>
      <name>Determinant_t</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlaterDeterminant</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SlaterDeterminant</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Determinant_t *det)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeByWalkers</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; int &gt;</type>
      <name>M</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Determinant_t * &gt;</type>
      <name>Dets</name>
      <anchorfile>classohmmsqmc_1_1SlaterDeterminant.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::DummyGrid</name>
    <filename>structohmmsqmc_1_1DummyGrid.html</filename>
    <member kind="function">
      <type>void</type>
      <name>locate</name>
      <anchorfile>structohmmsqmc_1_1DummyGrid.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::SphericalOrbitalSet</name>
    <filename>structohmmsqmc_1_1SphericalOrbitalSet.html</filename>
    <templarg>ROT</templarg>
    <templarg>GT</templarg>
    <member kind="typedef">
      <type>DistanceTableData::RealType</type>
      <name>RealType</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceTableData::ValueType</type>
      <name>ValueType</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceTableData::PosType</type>
      <name>PosType</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphericalTensor&lt; ValueType, PosType &gt;</type>
      <name>SphericalHarmonics_t</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ROT</type>
      <name>RadialOrbital_t</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalOrbitalSet</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int lmax, bool addsignforM=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SphericalOrbitalSet</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>basis</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(DistanceTableData *atable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int source, int iat, int offset, VM &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int source, int iat, int offset, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int source, int first, int nptcl, int offset, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateW</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int source, int first, int nptcl, int offset, int nw, int nstride, VM &amp;y, GM &amp;dy, VM &amp;d2y)</arglist>
    </member>
    <member kind="variable">
      <type>const DistanceTableData *</type>
      <name>myTable</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SphericalHarmonics_t</type>
      <name>Ylm</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>LM</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>NL</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GT * &gt;</type>
      <name>Grids</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ROT * &gt;</type>
      <name>Rnl</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; QuantumNumberType &gt;</type>
      <name>RnlID</name>
      <anchorfile>structohmmsqmc_1_1SphericalOrbitalSet.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::Spline3DBuilder</name>
    <filename>classohmmsqmc_1_1Spline3DBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>Spline3DBuilder</name>
      <anchorfile>classohmmsqmc_1_1Spline3DBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TrialWaveFunction &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1Spline3DBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>Grid3D *</type>
      <name>getFullGrid</name>
      <anchorfile>classohmmsqmc_1_1Spline3DBuilder.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SingleParticleOrbitalSet&lt; Spline3D &gt;</type>
      <name>SPOSet_t</name>
      <anchorfile>classohmmsqmc_1_1Spline3DBuilder.html</anchorfile>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Spline3DSet *</type>
      <name>d_orbitals</name>
      <anchorfile>classohmmsqmc_1_1Spline3DBuilder.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Grid3D *</type>
      <name>grid_ref</name>
      <anchorfile>classohmmsqmc_1_1Spline3DBuilder.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::SPOSetBase</name>
    <filename>structohmmsqmc_1_1SPOSetBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>ParticleAttrib&lt; ValueType &gt;</type>
      <name>ValueVectorType</name>
      <anchorfile>structohmmsqmc_1_1SPOSetBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParticleAttrib&lt; GradType &gt;</type>
      <name>GradVectorType</name>
      <anchorfile>structohmmsqmc_1_1SPOSetBase.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPOSetBase</name>
      <anchorfile>structohmmsqmc_1_1SPOSetBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPOSetBase</name>
      <anchorfile>structohmmsqmc_1_1SPOSetBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::TrialWaveFunction</name>
    <filename>classohmmsqmc_1_1TrialWaveFunction.html</filename>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::PosType</type>
      <name>PosType</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::GradType</type>
      <name>GradType</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrialWaveFunction</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrialWaveFunction</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>getSign</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>getLogPsi</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(OrbitalBase *aterm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeByWalkers</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSPOSet</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSPOSet</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(OhmmsElementBase *spo)</arglist>
    </member>
    <member kind="function">
      <type>OhmmsElementBase *</type>
      <name>getSPOSet</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, bool all)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;fixedG, ParticleSet::ParticleLaplacian_t &amp;fixedL)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update2</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(WalkerSetRef &amp;W, OrbitalBase::ValueVectorType &amp;psi)</arglist>
    </member>
    <member kind="variable">
      <type>VarRegistry&lt; RealType &gt;</type>
      <name>VarList</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TrialWaveFunction</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const TrialWaveFunction &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>TotalDim</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>WorkingPtcl</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>SignValue</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>LogValue</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; OrbitalBase * &gt;</type>
      <name>Z</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; OhmmsElementBase * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>delta_G</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>delta_L</name>
      <anchorfile>classohmmsqmc_1_1TrialWaveFunction.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::TriCubicSplineBuilder</name>
    <filename>classohmmsqmc_1_1TriCubicSplineBuilder.html</filename>
    <base>ohmmsqmc::OrbitalBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>TriCubicSplineBuilder</name>
      <anchorfile>classohmmsqmc_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(TrialWaveFunction &amp;a, Grid3D *agrid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SingleParticleOrbitalSet&lt; TriCubicSpline &gt;</type>
      <name>SPOSet_t</name>
      <anchorfile>classohmmsqmc_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TriCubicSplineSet *</type>
      <name>m_orbitals</name>
      <anchorfile>classohmmsqmc_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Grid3D *</type>
      <name>grid_ref</name>
      <anchorfile>classohmmsqmc_1_1TriCubicSplineBuilder.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::TwoBodyJastrow</name>
    <filename>classohmmsqmc_1_1TwoBodyJastrow.html</filename>
    <templarg>FT</templarg>
    <templarg>SharedFunction</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::TwoBodyJastrow&lt; FT, false &gt;</name>
    <filename>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</filename>
    <templarg>FT</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrow</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrow</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; FT * &gt;</type>
      <name>F</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffVal</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffValSum</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curLap</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curVal</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>curGrad</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Matrix&lt; int &gt;</type>
      <name>PairID</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01false_01_4.html</anchorfile>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::TwoBodyJastrow&lt; FT, true &gt;</name>
    <filename>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</filename>
    <templarg>FT</templarg>
    <base>ohmmsqmc::OrbitalBase</base>
    <member kind="typedef">
      <type>FT</type>
      <name>FuncType</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoBodyJastrow</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;p, DistanceTableData *dtable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoBodyJastrow</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluateLog</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;G, ParticleSet::ParticleLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet &amp;P, int iat, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSet &amp;P, int iat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ParticleSet &amp;P, ParticleSet::ParticleGradient_t &amp;dG, ParticleSet::ParticleLaplacian_t &amp;dL, int iat)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>registerData</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFromBuffer</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ParticleSet &amp;P, PooledData&lt; RealType &gt; &amp;buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(WalkerSetRef &amp;W, ValueVectorType &amp;psi, WalkerSetRef::WalkerGradient_t &amp;G, WalkerSetRef::WalkerLaplacian_t &amp;L)</arglist>
    </member>
    <member kind="variable">
      <type>FT</type>
      <name>F</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>N</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NN</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffVal</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType</type>
      <name>DiffValSum</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>U</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>d2U</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curLap</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueVectorType</type>
      <name>curVal</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>dU</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradVectorType</type>
      <name>curGrad</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>FirstAddressOfdU</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ValueType *</type>
      <name>LastAddressOfdU</name>
      <anchorfile>classohmmsqmc_1_1TwoBodyJastrow_3_01FT_00_01true_01_4.html</anchorfile>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::BareKineticEnergy</name>
    <filename>structohmmsqmc_1_1BareKineticEnergy.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>BareKineticEnergy</name>
      <anchorfile>structohmmsqmc_1_1BareKineticEnergy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(RealType m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BareKineticEnergy</name>
      <anchorfile>structohmmsqmc_1_1BareKineticEnergy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1BareKineticEnergy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1BareKineticEnergy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1BareKineticEnergy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>M</name>
      <anchorfile>structohmmsqmc_1_1BareKineticEnergy.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::ConservedEnergy</name>
    <filename>structohmmsqmc_1_1ConservedEnergy.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>ConservedEnergy</name>
      <anchorfile>structohmmsqmc_1_1ConservedEnergy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConservedEnergy</name>
      <anchorfile>structohmmsqmc_1_1ConservedEnergy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1ConservedEnergy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1ConservedEnergy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1ConservedEnergy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::CoulombPotentialAB</name>
    <filename>structohmmsqmc_1_1CoulombPotentialAB.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotentialAB</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPotentialAB</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Z</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAB.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::CoulombPotentialAA</name>
    <filename>structohmmsqmc_1_1CoulombPotentialAA.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>CoulombPotentialAA</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoulombPotentialAA</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structohmmsqmc_1_1CoulombPotentialAA.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::EffMKineticEnergy</name>
    <filename>structohmmsqmc_1_1EffMKineticEnergy.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>EffMKineticEnergy</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Grid1D &amp;aGrid1D, const std::vector&lt; int &gt; &amp;intvals, const std::vector&lt; int &gt; &amp;priority, const std::vector&lt; double &gt; &amp;inveffm, RealType m=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EffMKineticEnergy</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>M</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatGrid1D *</type>
      <name>inveffm_grid</name>
      <anchorfile>structohmmsqmc_1_1EffMKineticEnergy.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::HarmonicPotential</name>
    <filename>structohmmsqmc_1_1HarmonicPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>HarmonicPotential</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(RealType omega=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HarmonicPotential</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ParticleSet &amp;center, ParticleSet &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HarmonicPotential</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Centers</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Omega</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structohmmsqmc_1_1HarmonicPotential.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::IonIonPotential</name>
    <filename>structohmmsqmc_1_1IonIonPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>IonIonPotential</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IonIonPotential</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>d_sum</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ii</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>PtclRef</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RealType &gt;</type>
      <name>Z</name>
      <anchorfile>structohmmsqmc_1_1IonIonPotential.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::LocalCorePolPotential</name>
    <filename>structohmmsqmc_1_1LocalCorePolPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>LocalCorePolPotential</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalCorePolPotential</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>FirstTime</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nCenters</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nParticles</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>eCoreCore</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet &amp;</type>
      <name>IonSys</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ie</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_ii</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; CPP_Param * &gt;</type>
      <name>Centers</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>CoreCoef</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PosType &gt;</type>
      <name>CoreCoreDipole</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; PosType &gt;</type>
      <name>CoreElDipole</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ohmmsqmc::LocalCorePolPotential::CPP_Param</class>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::LocalCorePolPotential::CPP_Param</name>
    <filename>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</filename>
    <member kind="function">
      <type></type>
      <name>CPP_Param</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(RealType a=1.0, RealType r=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(RealType a, RealType r)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>operator()</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(RealType r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>alpha</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>C</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>r_b</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>one_over_rr</name>
      <anchorfile>structohmmsqmc_1_1LocalCorePolPotential_1_1CPP__Param.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::LocalPPotential</name>
    <filename>structohmmsqmc_1_1LocalPPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; ValueType &gt;</type>
      <name>GridType</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>LocalPotentialType</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalPPotential</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalPPotential</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialSet * &gt;</type>
      <name>PP</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet::ParticleIndex_t &amp;</type>
      <name>Centers</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ohmmsqmc::LocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::LocalPPotential::RadialPotentialSet</name>
    <filename>structohmmsqmc_1_1LocalPPotential_1_1RadialPotentialSet.html</filename>
    <member kind="function">
      <type></type>
      <name>~RadialPotentialSet</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(DistanceTableData *d_table, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; LocalPotentialType * &gt;</type>
      <name>lpp_m</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GridType * &gt;</type>
      <name>grid_m</name>
      <anchorfile>structohmmsqmc_1_1LocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::NonLocalPPotential</name>
    <filename>structohmmsqmc_1_1NonLocalPPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="typedef">
      <type>OneDimGridBase&lt; ValueType &gt;</type>
      <name>GridType</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDimGridFunctor&lt; ValueType &gt;</type>
      <name>LocalPotentialType</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonLocalPPotential</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSet &amp;ions, ParticleSet &amp;els, TrialWaveFunction &amp;psi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonLocalPPotential</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceTableData *</type>
      <name>d_table</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; RadialPotentialSet * &gt;</type>
      <name>PP</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ParticleSet::ParticleIndex_t &amp;</type>
      <name>Centers</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxnonloc</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxsgridpts</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxangmom</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ohmmsqmc::NonLocalPPotential::RadialPotentialSet</class>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::NonLocalPPotential::RadialPotentialSet</name>
    <filename>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</filename>
    <member kind="typedef">
      <type>vector&lt; PosType &gt;</type>
      <name>SpherGridType</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RadialPotentialSet</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int angmom, GridType *agrid, LocalPotentialType *pp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addknot</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(PosType xyz, ValueType weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize_warrays</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int n, int m, int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_grid</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet &amp;W, DistanceTableData *d_table, int iat, TrialWaveFunction &amp;Psi)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(DistanceTableData *d_table, int iat)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; LocalPotentialType * &gt;</type>
      <name>lpp_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GridType * &gt;</type>
      <name>lgrid_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lmax</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Rmax</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>angpp_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>wgt_angpp_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; LocalPotentialType * &gt;</type>
      <name>nlpp_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GridType * &gt;</type>
      <name>nlgrid_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>sgridxyz_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpherGridType</type>
      <name>rrotsgrid_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>sgridweight_m</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>psiratio</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>vrad</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>wvec</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>Amat</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ValueType &gt;</type>
      <name>lpol</name>
      <anchorfile>structohmmsqmc_1_1NonLocalPPotential_1_1RadialPotentialSet.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::PolarizationPotential</name>
    <filename>structohmmsqmc_1_1PolarizationPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>PolarizationPotential</name>
      <anchorfile>structohmmsqmc_1_1PolarizationPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double field)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolarizationPotential</name>
      <anchorfile>structohmmsqmc_1_1PolarizationPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1PolarizationPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1PolarizationPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1PolarizationPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Efield</name>
      <anchorfile>structohmmsqmc_1_1PolarizationPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::QMCHamiltonian</name>
    <filename>classohmmsqmc_1_1QMCHamiltonian.html</filename>
    <member kind="typedef">
      <type>QMCHamiltonianBase::RealType</type>
      <name>RealType</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QMCHamiltonianBase::Return_t</type>
      <name>Return_t</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCHamiltonian</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCHamiltonian</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(QMCHamiltonianBase *h, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2WalkerProperty</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>startIndex</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>operator[]</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveProperty</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(IT first)</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonianBase *</type>
      <name>getHamiltonian</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getLocalEnergy</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>getLocalPotential</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(RealType tau)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Return_t</type>
      <name>LocalEnergy</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; QMCHamiltonianBase * &gt;</type>
      <name>H</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; int &gt;</type>
      <name>Hindex</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Return_t &gt;</type>
      <name>Hvalue</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>Hname</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; string, int &gt;</type>
      <name>Hmap</name>
      <anchorfile>classohmmsqmc_1_1QMCHamiltonian.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::QMCHamiltonianBase</name>
    <filename>structohmmsqmc_1_1QMCHamiltonianBase.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>RealType</type>
      <name>Return_t</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCHamiltonianBase</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCHamiltonianBase</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTau</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(RealType tau)</arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Value</name>
      <anchorfile>structohmmsqmc_1_1QMCHamiltonianBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::Spline3DPotential</name>
    <filename>structohmmsqmc_1_1Spline3DPotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>Spline3DPotential</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Grid3D *agrid, const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Spline3DPotential</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Return_t</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(WalkerSetRef &amp;P, ValueVectorType &amp;LE)</arglist>
    </member>
    <member kind="variable">
      <type>Grid3D *</type>
      <name>full_Grid</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Spline3D *</type>
      <name>pot_m</name>
      <anchorfile>structohmmsqmc_1_1Spline3DPotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::TriCubicSplinePotential</name>
    <filename>structohmmsqmc_1_1TriCubicSplinePotential.html</filename>
    <base>ohmmsqmc::QMCHamiltonianBase</base>
    <member kind="function">
      <type></type>
      <name>TriCubicSplinePotential</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double mbyepsq, Grid3D *agrid, const string &amp;fname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TriCubicSplinePotential</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ParticleSet &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ParticleSet &amp;P, RealType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(WalkerSetRef &amp;P, ValueVectorType &amp;LE)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>Efac</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grid3D *</type>
      <name>DeviceGrid</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TriCubicSpline *</type>
      <name>pot_m</name>
      <anchorfile>structohmmsqmc_1_1TriCubicSplinePotential.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::LocalEnergyEstimator</name>
    <filename>classohmmsqmc_1_1LocalEnergyEstimator.html</filename>
    <templarg>T</templarg>
    <base>ohmmsqmc::ScalarEstimatorBase</base>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; T &gt;::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalEnergyEstimator</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Walker_t &amp;awalker, T wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, T wgtinv)</arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>y4y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>y4y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POTENTIAL_INDEX</name>
      <anchor>y4y2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_MAX</name>
      <anchor>y4y3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LocalEnergyIndex</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>LocalPotentialIndex</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>SizeOfHamiltonians</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; T &gt;</type>
      <name>elocal</name>
      <anchorfile>classohmmsqmc_1_1LocalEnergyEstimator.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::MultipleEnergyEstimator</name>
    <filename>structohmmsqmc_1_1MultipleEnergyEstimator.html</filename>
    <base>ohmmsqmc::ScalarEstimatorBase&lt; ParticleSet::RealType &gt;</base>
    <member kind="typedef">
      <type>ParticleSet::RealType</type>
      <name>RealType</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; RealType &gt;::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; RealType &gt;</type>
      <name>EnergyContainer_t</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_INDEX</name>
      <anchor>w7w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGY_SQ_INDEX</name>
      <anchor>w7w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEIGHT_INDEX</name>
      <anchor>w7w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE_INDEX</name>
      <anchor>w7w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleEnergyEstimator</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(QMCHamiltonian &amp;h, int hcopy=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Walker_t &amp;awalker, RealType wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(RecordNamedProperty&lt; RealType &gt; &amp;record, RealType wgtinv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(MCWalkerConfiguration &amp;W, vector&lt; QMCHamiltonian * &gt; &amp;h, vector&lt; TrialWaveFunction * &gt; &amp;psi, RealType tau, bool require_register=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>CurrentWalker</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumWalkers</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstColumnIndex</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>FirstHamiltonian</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCopies</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumOperators</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>RatioIJ</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>esum</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>elocal</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>esum_name</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; string &gt;</type>
      <name>elocal_name</name>
      <anchorfile>structohmmsqmc_1_1MultipleEnergyEstimator.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::PolarizationEstimator</name>
    <filename>classohmmsqmc_1_1PolarizationEstimator.html</filename>
    <templarg>T</templarg>
    <base>ohmmsqmc::ScalarEstimatorBase</base>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; T &gt;::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolarizationEstimator</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add2Record</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Walker_t &amp;awalker, T wgt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, T wgtinv)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; T &gt;</type>
      <name>z_sum</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pindex_0</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>pindex_1</name>
      <anchorfile>classohmmsqmc_1_1PolarizationEstimator.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::ScalarEstimatorBase</name>
    <filename>structohmmsqmc_1_1ScalarEstimatorBase.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarEstimatorBase</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>average</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>variance</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add2Record</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accumulate</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Walker_t &amp;awalker, T wgt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>report</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(RecordNamedProperty&lt; T &gt; &amp;record, T wgtinv)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>CollectSum</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b_average</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b_variance</name>
      <anchorfile>structohmmsqmc_1_1ScalarEstimatorBase.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::ScalarEstimatorManager</name>
    <filename>classohmmsqmc_1_1ScalarEstimatorManager.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>ScalarEstimatorBase&lt; RealType &gt;</type>
      <name>EstimatorType</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarEstimatorManager</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScalarEstimatorManager</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const MCWalkerConfiguration &amp;W)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReportSettings</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportHeader</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flushreport</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addColumn</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const char *aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int i, RealType v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(EstimatorType *newestimator, const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStride</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int istride)</arglist>
    </member>
    <member kind="function">
      <type>EstimatorType *</type>
      <name>getEstimator</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>average</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>RealType</type>
      <name>variance</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(RealType w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollectionMode</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(bool collect)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Stride</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>WeightIndex</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ostream *</type>
      <name>OutStream</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>WeightSum</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RecordNamedProperty&lt; RealType &gt;</type>
      <name>BlockAverages</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; string, int &gt;</type>
      <name>EstimatorMap</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; EstimatorType * &gt;</type>
      <name>Estimators</name>
      <anchorfile>classohmmsqmc_1_1ScalarEstimatorManager.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::DMCParticleByParticle</name>
    <filename>classohmmsqmc_1_1DMCParticleByParticle.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DMCParticleByParticle</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBranchInfo</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DMCParticleByParticle</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const DMCParticleByParticle &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DMCParticleByParticle &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const DMCParticleByParticle &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>PopIndex</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IndexType</type>
      <name>EtrialIndex</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>BranchInfo</name>
      <anchorfile>classohmmsqmc_1_1DMCParticleByParticle.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::DummyQMC</name>
    <filename>classohmmsqmc_1_1DummyQMC.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>DummyQMC</name>
      <anchorfile>classohmmsqmc_1_1DummyQMC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1DummyQMC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1DummyQMC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DummyQMC</name>
      <anchorfile>classohmmsqmc_1_1DummyQMC.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const DummyQMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DummyQMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1DummyQMC.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const DummyQMC &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::MolecuDMC</name>
    <filename>classohmmsqmc_1_1MolecuDMC.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>MolecuDMC</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(BRANCHER &amp;Branch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBranchInfo</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;fname)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MolecuDMC</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const MolecuDMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MolecuDMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const MolecuDMC &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>BranchInfo</name>
      <anchorfile>classohmmsqmc_1_1MolecuDMC.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::MolecuFixedNodeBranch</name>
    <filename>classohmmsqmc_1_1MolecuFixedNodeBranch.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>MolecuFixedNodeBranch</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(T tau, int nideal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(T psi0, T psi1) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>branchGF</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(T tau, T emixed, T reject) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEguess</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(T eg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>branch</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int iter, MCWalkerConfiguration &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>update</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(T pop_now, T eavg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(xmlNodePtr cur, OhmmsInform *LogOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBranchData</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBranchData</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Tau</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>Feed</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>E_T</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>logN</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nideal</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nmax</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Nmin</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MaxCopy</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>EgBufferSize</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumGeneration</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>branchPtr</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>xmlNodePtr</type>
      <name>egPtr</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::deque&lt; T &gt;</type>
      <name>Eg</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MolecuFixedNodeBranch</name>
      <anchorfile>classohmmsqmc_1_1MolecuFixedNodeBranch.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::Bead</name>
    <filename>structohmmsqmc_1_1Bead.html</filename>
    <base>ohmmsqmc::Walker&lt; RealType, ParticlePos_t &gt;</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::RealType</type>
      <name>RealType</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::ParticlePos_t</type>
      <name>ParticlePos_t</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bead</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Bead &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bead</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Walker_t &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Bead &amp;</type>
      <name>operator=</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Bead &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCopyBead</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Bead &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Resize_Grad_and_Action</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int n, int m)</arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; ParticlePos_t * &gt;</type>
      <name>Gradients</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; RealType &gt;</type>
      <name>Action</name>
      <anchorfile>structohmmsqmc_1_1Bead.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::MultiChain</name>
    <filename>structohmmsqmc_1_1MultiChain.html</filename>
    <base>std::deque</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::RealType</type>
      <name>RealType</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiChain</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Walker_t *awalker, int len, int direction, int npsi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiChain</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>GrowthDirection</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Middle</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>SumRatio</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>LogRatioActionIJ</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>TotalSign</name>
      <anchorfile>structohmmsqmc_1_1MultiChain.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::PolymerChain</name>
    <filename>structohmmsqmc_1_1PolymerChain.html</filename>
    <base>std::deque</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MCWalkerConfiguration::RealType</type>
      <name>RealType</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolymerChain</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Walker_t *awalker, int len, int movables)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolymerChain</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getID</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subCuts</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCuts</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeArrays</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int npsi=1)</arglist>
    </member>
    <member kind="function">
      <type>Walker_t *</type>
      <name>makeEnds</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEnds</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(Walker_t &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>MoveHead</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>NumCuts</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Middle</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>Last</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>NumMoves</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>AcceptedMoves</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>SumRatioPrimary</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>RefSign</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; int &gt;</type>
      <name>TotalSign</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector&lt; RealType &gt;</type>
      <name>LogRatioActionIJ</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>heads</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>tails</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Walker_t * &gt;</type>
      <name>repository</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ParticleGradient_t * &gt;</type>
      <name>Gradients</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; ParticleGradient_t * &gt;</type>
      <name>HeadGradients</name>
      <anchorfile>structohmmsqmc_1_1PolymerChain.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::PolymerEstimator</name>
    <filename>classohmmsqmc_1_1PolymerEstimator.html</filename>
    <member kind="function">
      <type></type>
      <name>PolymerEstimator</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(PolymerChain &amp;reptile, int npsi=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolymerEstimator</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetReportSettings</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PolymerChain &amp;</type>
      <name>Reptile</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Middle</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Counter</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ReptileLength</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>EpotLength</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>EpotSize</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ElocSize</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>fout</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>OutLocEn</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ofstream *</type>
      <name>OutPotEn</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; double &gt;</type>
      <name>AvgLocalEnergy</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; double &gt;</type>
      <name>AvgPotentialEnergy</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector&lt; double &gt;</type>
      <name>TotalWeight</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>PEavg</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>PE2</name>
      <anchorfile>classohmmsqmc_1_1PolymerEstimator.html</anchorfile>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::QMCDriver</name>
    <filename>classohmmsqmc_1_1QMCDriver.html</filename>
    <base>QMCTraits</base>
    <member kind="typedef">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCDriver</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QMCDriver</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileRoot</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;aname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_H_and_Psi</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(QMCHamiltonian *h, TrialWaveFunction *psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(xmlNodePtr cur)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>QMCDriver</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const QMCDriver &amp;a)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>putQMCInfo</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addWalkers</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(int nwalkers)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>pStride</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>AcceptIndex</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nBlocks</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nSteps</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nAccept</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nReject</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexType</type>
      <name>nTargetWalkers</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>Tau</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>FirstStep</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealType</type>
      <name>e_ref</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>qmcNode</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParameterSet</type>
      <name>m_param</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>QMCType</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>string</type>
      <name>RootName</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MCWalkerConfiguration &amp;</type>
      <name>W</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrialWaveFunction &amp;</type>
      <name>Psi</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QMCHamiltonian &amp;</type>
      <name>H</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScalarEstimatorManager *</type>
      <name>Estimators</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; TrialWaveFunction * &gt;</type>
      <name>Psi1</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; QMCHamiltonian * &gt;</type>
      <name>H1</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OhmmsInform *</type>
      <name>LogOut</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostrstream</type>
      <name>log_buffer</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PooledData&lt; RealType &gt;</type>
      <name>HamPool</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>p24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>Counter</name>
      <anchorfile>classohmmsqmc_1_1QMCDriver.html</anchorfile>
      <anchor>t0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::ReptationMC</name>
    <filename>classohmmsqmc_1_1ReptationMC.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>ReptationMC</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReptationMC</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MCWalkerConfiguration::Walker_t</type>
      <name>Walker_t</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>x0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveReptile</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initReptile</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>UseBounce</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ClonePolymer</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PolymerLength</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumCuts</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumTurns</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolymerChain *</type>
      <name>Reptile</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ReptationMC</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const ReptationMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ReptationMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1ReptationMC.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const ReptationMC &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::RQMCMultiple</name>
    <filename>classohmmsqmc_1_1RQMCMultiple.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>RQMCMultiple</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RQMCMultiple</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>moveReptile</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initReptile</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeArrays</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ReptileLength</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>MinusDirection</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>PlusDirection</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>Directionless</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>forward</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>backward</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ianchor</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>itail</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>inext</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>NumTurns</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nptcl</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MultiChain *</type>
      <name>Reptile</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bead *</type>
      <name>NewBead</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>SumRatioAction</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>LogRatioActionIJ</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>WReptile</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; RealType &gt;</type>
      <name>logpsi</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>NewTotalSign</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>WeightSign</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; int &gt;</type>
      <name>RefSign</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>p21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RQMCMultiple</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const RQMCMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RQMCMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const RQMCMultiple &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>NewLogRatioAction</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>NewSumRatio</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>accept</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>gRand</name>
      <anchorfile>classohmmsqmc_1_1RQMCMultiple.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::VMC</name>
    <filename>classohmmsqmc_1_1VMC.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMC</name>
      <anchorfile>classohmmsqmc_1_1VMC.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1VMC.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1VMC.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMC</name>
      <anchorfile>classohmmsqmc_1_1VMC.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const VMC &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMC &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1VMC.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const VMC &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classohmmsqmc_1_1VMC.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::VMC_OPT</name>
    <filename>classohmmsqmc_1_1VMC__OPT.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <base>MinimizeFunction</base>
    <member kind="enumvalue">
      <name>ENERGY</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENERGYSQ</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VMC_OPT</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMC_OPT</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run_vmc</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>correlatedSampling</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>Params</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Params</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Cost</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumParams</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WriteStuff</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>resetWaveFunctions</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkParameters</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>putOptParams</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RealType</type>
      <name>evalCost</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkConfigurations</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMC_OPT</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d5</anchor>
      <arglist>(const VMC_OPT &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMC_OPT &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>d6</anchor>
      <arglist>(const VMC_OPT &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; WalkerData * &gt;</type>
      <name>RefConf</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>UseWeight</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; scalar &gt;</type>
      <name>costList</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; vector&lt; scalar &gt; &gt;</type>
      <name>paramList</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; scalar &gt;</type>
      <name>OptParams</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>IDtag</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; string &gt;</type>
      <name>ConfigFile</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>optmethod</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumCostCalls</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>NumSamples</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>cg_tolerance</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>cg_stepsize</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>cg_epsilon</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_en</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>w_var</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealType</type>
      <name>CostValue</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian</type>
      <name>H_KE</name>
      <anchorfile>classohmmsqmc_1_1VMC__OPT.html</anchorfile>
      <anchor>r16</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">ohmmsqmc::VMC_OPT::WalkerData</class>
  </compound>
  <compound kind="struct">
    <name>ohmmsqmc::VMC_OPT::WalkerData</name>
    <filename>structohmmsqmc_1_1VMC__OPT_1_1WalkerData.html</filename>
    <member kind="function">
      <type></type>
      <name>WalkerData</name>
      <anchorfile>structohmmsqmc_1_1VMC__OPT_1_1WalkerData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int n=1)</arglist>
    </member>
    <member kind="variable">
      <type>ValueType</type>
      <name>LogPsi</name>
      <anchorfile>structohmmsqmc_1_1VMC__OPT_1_1WalkerData.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RealType</type>
      <name>Vloc</name>
      <anchorfile>structohmmsqmc_1_1VMC__OPT_1_1WalkerData.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>G</name>
      <anchorfile>structohmmsqmc_1_1VMC__OPT_1_1WalkerData.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>L</name>
      <anchorfile>structohmmsqmc_1_1VMC__OPT_1_1WalkerData.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::VMCMoveAll</name>
    <filename>classohmmsqmc_1_1VMCMoveAll.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCMoveAll</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, xmlNodePtr q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCMoveAll</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const VMCMoveAll &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCMoveAll &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const VMCMoveAll &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>advanceAllWalkers</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>drift</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet::ParticlePos_t</type>
      <name>deltaR</name>
      <anchorfile>classohmmsqmc_1_1VMCMoveAll.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::VMCMultiple</name>
    <filename>classohmmsqmc_1_1VMCMultiple.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCMultiple</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceWalkerByWalker</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCMultiple</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const VMCMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const VMCMultiple &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>logpsi</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>classohmmsqmc_1_1VMCMultiple.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::VMCParticleByParticle</name>
    <filename>classohmmsqmc_1_1VMCParticleByParticle.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCParticleByParticle</name>
      <anchorfile>classohmmsqmc_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCParticleByParticle</name>
      <anchorfile>classohmmsqmc_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const VMCParticleByParticle &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCParticleByParticle &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1VMCParticleByParticle.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const VMCParticleByParticle &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::VMCPbyPMultiple</name>
    <filename>classohmmsqmc_1_1VMCPbyPMultiple.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>VMCPbyPMultiple</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMCPbyPMultiple</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleGradient_t</type>
      <name>ParticleGradient_t</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>y0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ParticleSet::ParticleLaplacian_t</type>
      <name>ParticleLaplacian_t</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>y1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VMCPbyPMultiple</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const VMCPbyPMultiple &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>VMCPbyPMultiple &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const VMCPbyPMultiple &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>(int ncopy, int nptcls)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nPsi</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleGradient_t</type>
      <name>dG</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleGradient_t * &gt;</type>
      <name>G</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; ParticleLaplacian_t * &gt;</type>
      <name>dL</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratio</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>ratioij</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>UmbrellaWeight</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>sumratio</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; RealType &gt;</type>
      <name>invsumratio</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MultipleEnergyEstimator *</type>
      <name>multiEstimator</name>
      <anchorfile>classohmmsqmc_1_1VMCPbyPMultiple.html</anchorfile>
      <anchor>r9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::WaveFunctionTester</name>
    <filename>classohmmsqmc_1_1WaveFunctionTester.html</filename>
    <base>ohmmsqmc::QMCDriver</base>
    <member kind="function">
      <type></type>
      <name>WaveFunctionTester</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionTester.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(MCWalkerConfiguration &amp;w, TrialWaveFunction &amp;psi, QMCHamiltonian &amp;h, xmlNodePtr q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionTester.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionTester.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(xmlNodePtr q)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WaveFunctionTester</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionTester.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(const WaveFunctionTester &amp;a)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WaveFunctionTester &amp;</type>
      <name>operator=</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionTester.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(const WaveFunctionTester &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::HamiltonianPool</name>
    <filename>classohmmsqmc_1_1HamiltonianPool.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, QMCHamiltonian * &gt;</type>
      <name>PoolType</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HamiltonianPool</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;hamiltonian&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>getPrimary</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QMCHamiltonian *</type>
      <name>getHamiltonian</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetPool</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSetPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaveFunctionPool</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(WaveFunctionPool *pset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoulombPotential</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(xmlNodePtr cur, ParticleSet *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPseudoPotential</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(xmlNodePtr cur, ParticleSet *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCorePolPotential</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(xmlNodePtr cur, ParticleSet *target)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian *</type>
      <name>primaryH</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCHamiltonian *</type>
      <name>curH</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WaveFunctionPool *</type>
      <name>psiPool</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PoolType</type>
      <name>myPool</name>
      <anchorfile>classohmmsqmc_1_1HamiltonianPool.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::InitMolecularSystem</name>
    <filename>classohmmsqmc_1_1InitMolecularSystem.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>InitMolecularSystem</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(ParticleSetPool *pset, const char *aname=&quot;mosystem&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initAtom</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ParticleSet *els)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initMolecule</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ParticleSet *ions, ParticleSet *els)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classohmmsqmc_1_1InitMolecularSystem.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::MO2Grid3D</name>
    <filename>classohmmsqmc_1_1MO2Grid3D.html</filename>
    <base>ohmmsqmc::QMCAppBase</base>
    <member kind="typedef">
      <type>OrbitalBase::RealType</type>
      <name>RealType</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::ValueType</type>
      <name>ValueType</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrbitalBase::PosType</type>
      <name>PosType</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MO2Grid3D</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MO2Grid3D</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>xmlNodePtr</type>
      <name>generateNumericalOrbitals</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOrbitalSet</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setParticleSets</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(xmlNodePtr aroot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setWavefunctions</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(xmlNodePtr aroot)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>xmlXPathContextPtr</type>
      <name>m_context</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration</type>
      <name>el</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSet</type>
      <name>ion</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction</type>
      <name>Psi</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, TriCubicSplineT&lt; ValueType &gt; * &gt;</type>
      <name>SPOSet</name>
      <anchorfile>classohmmsqmc_1_1MO2Grid3D.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::ParticleSetPool</name>
    <filename>classohmmsqmc_1_1ParticleSetPool.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="typedef">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>PoolType</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleSetPool</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;particleset&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleSet *</type>
      <name>getParticleSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>MCWalkerConfiguration *</type>
      <name>getWalkerSet</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>PoolType &amp;</type>
      <name>getPool</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>map&lt; string, ParticleSet * &gt;</type>
      <name>myPool</name>
      <anchorfile>classohmmsqmc_1_1ParticleSetPool.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::QMCAppBase</name>
    <filename>classohmmsqmc_1_1QMCAppBase.html</filename>
    <member kind="function">
      <type></type>
      <name>QMCAppBase</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCAppBase</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;infile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveXml</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validateXML</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>execute</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlDocPtr</type>
      <name>m_doc</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>xmlNodePtr</type>
      <name>m_root</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OHMMS::ProjectData</type>
      <name>myProject</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>p2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OHMMS::RandomNumberControl</type>
      <name>myRandomControl</name>
      <anchorfile>classohmmsqmc_1_1QMCAppBase.html</anchorfile>
      <anchor>p3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::QMCMain</name>
    <filename>classohmmsqmc_1_1QMCMain.html</filename>
    <base>ohmmsqmc::QMCAppBase</base>
    <member kind="enumeration">
      <name>QMCRunType</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUMMY_RUN</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMC_RUN</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DMC_RUN</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RMC_RUN</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZE_RUN</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QMCMain</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QMCMain</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateXML</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>runQMC</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>d0</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>setMCWalkers</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>d1</anchor>
      <arglist>(xmlXPathContextPtr cur)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>processPWH</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>d2</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCRunType</type>
      <name>curRunType</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>curMethod</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QMCDriver *</type>
      <name>qmcDriver</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MCWalkerConfiguration *</type>
      <name>qmcSystem</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WaveFunctionPool *</type>
      <name>psiPool</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HamiltonianPool *</type>
      <name>hamPool</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>string</type>
      <name>PrevConfigFile</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; xmlNodePtr &gt;</type>
      <name>m_walkerset</name>
      <anchorfile>classohmmsqmc_1_1QMCMain.html</anchorfile>
      <anchor>r8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ohmmsqmc::WaveFunctionPool</name>
    <filename>classohmmsqmc_1_1WaveFunctionPool.html</filename>
    <base>OhmmsElementBase</base>
    <member kind="function">
      <type></type>
      <name>WaveFunctionPool</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *aname=&quot;wavefunction&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(xmlNodePtr cur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>getPrimary</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrialWaveFunction *</type>
      <name>getWaveFunction</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const std::string &amp;pname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleSetPool</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ParticleSetPool *pset)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TrialWaveFunction *</type>
      <name>primaryPsi</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, TrialWaveFunction * &gt;</type>
      <name>myPool</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParticleSetPool *</type>
      <name>ptclPool</name>
      <anchorfile>classohmmsqmc_1_1WaveFunctionPool.html</anchorfile>
      <anchor>r2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Pooma</name>
    <filename>namespacePooma.html</filename>
    <class kind="class">Pooma::Clock</class>
  </compound>
  <compound kind="class">
    <name>Pooma::Clock</name>
    <filename>classPooma_1_1Clock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cpu_time</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>value</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>highSpeed</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>start_time</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>r0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>stop_time</name>
      <anchorfile>classPooma_1_1Clock.html</anchorfile>
      <anchor>r1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
  </compound>
</tagfile>
